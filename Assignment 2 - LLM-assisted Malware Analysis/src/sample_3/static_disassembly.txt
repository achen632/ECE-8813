Function: _WinMain@16
  00401000: push    ebp
  00401001: mov     ebp, esp
  00401003: sub     esp, 24h
  00401006: fld     qword ptr ds:411120h
  0040100C: sub     esp, 8
  0040100F: fstp    [esp+2Ch+X]; X
  00401012: call    _sin
  00401017: fstp    st
  00401019: add     esp, 8
  0040101C: fld     qword ptr ds:411120h
  00401022: sub     esp, 8
  00401025: fstp    [esp+2Ch+X]; X
  00401028: call    _sin
  0040102D: fstp    st
  0040102F: add     esp, 8
  00401032: fld     qword ptr ds:411120h
  00401038: sub     esp, 8
  0040103B: fstp    [esp+2Ch+X]; X
  0040103E: call    _sin
  00401043: fstp    st
  00401045: add     esp, 8
  00401048: fld     qword ptr ds:411120h
  0040104E: sub     esp, 8
  00401051: fstp    [esp+2Ch+X]; X
  00401054: call    _sin
  00401059: fstp    st
  0040105B: add     esp, 8
  0040105E: fld     qword ptr ds:411120h
  00401064: sub     esp, 8
  00401067: fstp    [esp+2Ch+X]; X
  0040106A: call    _sin
  0040106F: fstp    st
  00401071: add     esp, 8
  00401074: fld     qword ptr ds:411120h
  0040107A: sub     esp, 8
  0040107D: fstp    [esp+2Ch+X]; X
  00401080: call    _sin
  00401085: fstp    st
  00401087: add     esp, 8
  0040108A: fld     qword ptr ds:411120h
  00401090: sub     esp, 8
  00401093: fstp    [esp+2Ch+X]; X
  00401096: call    _sin
  0040109B: fstp    st
  0040109D: add     esp, 8
  004010A0: fld     qword ptr ds:411120h
  004010A6: sub     esp, 8
  004010A9: fstp    [esp+2Ch+X]; X
  004010AC: call    _sin
  004010B1: fstp    st
  004010B3: add     esp, 8
  004010B6: fld     qword ptr ds:411120h
  004010BC: sub     esp, 8
  004010BF: fstp    [esp+2Ch+X]; X
  004010C2: call    _sin
  004010C7: fstp    st
  004010C9: add     esp, 8
  004010CC: fld     qword ptr ds:411120h
  004010D2: sub     esp, 8
  004010D5: fstp    [esp+2Ch+X]; X
  004010D8: call    _sin
  004010DD: fstp    st
  004010DF: add     esp, 8
  004010E2: fld     qword ptr ds:411120h
  004010E8: sub     esp, 8
  004010EB: fstp    [esp+2Ch+X]; X
  004010EE: call    _sin
  004010F3: fstp    st
  004010F5: add     esp, 8
  004010F8: fld     qword ptr ds:411120h
  004010FE: sub     esp, 8
  00401101: fstp    [esp+2Ch+X]; X
  00401104: call    _sin
  00401109: fstp    st
  0040110B: add     esp, 8
  0040110E: fld     qword ptr ds:411120h
  00401114: sub     esp, 8
  00401117: fstp    [esp+2Ch+X]; X
  0040111A: call    _sin
  0040111F: fstp    st
  00401121: add     esp, 8
  00401124: fld     qword ptr ds:411120h
  0040112A: sub     esp, 8
  0040112D: fstp    [esp+2Ch+X]; X
  00401130: call    _sin
  00401135: fstp    st
  00401137: add     esp, 8
  0040113A: fld     qword ptr ds:411120h
  00401140: sub     esp, 8
  00401143: fstp    [esp+2Ch+X]; X
  00401146: call    _sin
  0040114B: fstp    st
  0040114D: add     esp, 8
  00401150: fld     qword ptr ds:411120h
  00401156: sub     esp, 8
  00401159: fstp    [esp+2Ch+X]; X
  0040115C: call    _sin
  00401161: fstp    st
  00401163: add     esp, 8
  00401166: fld     qword ptr ds:411120h
  0040116C: sub     esp, 8
  0040116F: fstp    [esp+2Ch+X]; X
  00401172: call    _sin
  00401177: fstp    st
  00401179: add     esp, 8
  0040117C: fld     qword ptr ds:411120h
  00401182: sub     esp, 8
  00401185: fstp    [esp+2Ch+X]; X
  00401188: call    _sin
  0040118D: fstp    st
  0040118F: add     esp, 8
  00401192: fld     qword ptr ds:411120h
  00401198: sub     esp, 8
  0040119B: fstp    [esp+2Ch+X]; X
  0040119E: call    _sin
  004011A3: fstp    st
  004011A5: add     esp, 8
  004011A8: fld     qword ptr ds:411120h
  004011AE: sub     esp, 8
  004011B1: fstp    [esp+2Ch+X]; X
  004011B4: call    _sin
  004011B9: fstp    st
  004011BB: add     esp, 8
  004011BE: fld     qword ptr ds:411120h
  004011C4: sub     esp, 8
  004011C7: fstp    [esp+2Ch+X]; X
  004011CA: call    _sin
  004011CF: fstp    st
  004011D1: add     esp, 8
  004011D4: fld     qword ptr ds:411120h
  004011DA: sub     esp, 8
  004011DD: fstp    [esp+2Ch+X]; X
  004011E0: call    _sin
  004011E5: fstp    st
  004011E7: add     esp, 8
  004011EA: fld     qword ptr ds:411120h
  004011F0: sub     esp, 8
  004011F3: fstp    [esp+2Ch+X]; X
  004011F6: call    _sin
  004011FB: fstp    st
  004011FD: add     esp, 8
  00401200: fld     qword ptr ds:411120h
  00401206: sub     esp, 8
  00401209: fstp    [esp+2Ch+X]; X
  0040120C: call    _sin
  00401211: fstp    st
  00401213: add     esp, 8
  00401216: fld     qword ptr ds:411120h
  0040121C: sub     esp, 8
  0040121F: fstp    [esp+2Ch+X]; X
  00401222: call    _sin
  00401227: fstp    st
  00401229: add     esp, 8
  0040122C: fld     qword ptr ds:411120h
  00401232: sub     esp, 8
  00401235: fstp    [esp+2Ch+X]; X
  00401238: call    _sin
  0040123D: fstp    st
  0040123F: add     esp, 8
  00401242: fld     qword ptr ds:411120h
  00401248: sub     esp, 8
  0040124B: fstp    [esp+2Ch+X]; X
  0040124E: call    _sin
  00401253: fstp    st
  00401255: add     esp, 8
  00401258: fld     qword ptr ds:411120h
  0040125E: sub     esp, 8
  00401261: fstp    [esp+2Ch+X]; X
  00401264: call    _sin
  00401269: fstp    st
  0040126B: add     esp, 8
  0040126E: fld     qword ptr ds:411120h
  00401274: sub     esp, 8
  00401277: fstp    [esp+2Ch+X]; X
  0040127A: call    _sin
  0040127F: fstp    st
  00401281: add     esp, 8
  00401284: fld     qword ptr ds:411120h
  0040128A: sub     esp, 8
  0040128D: fstp    [esp+2Ch+X]; X
  00401290: call    _sin
  00401295: fstp    st
  00401297: add     esp, 8
  0040129A: fld     qword ptr ds:411120h
  004012A0: sub     esp, 8
  004012A3: fstp    [esp+2Ch+X]; X
  004012A6: call    _sin
  004012AB: fstp    st
  004012AD: add     esp, 8
  004012B0: fld     qword ptr ds:411120h
  004012B6: sub     esp, 8
  004012B9: fstp    [esp+2Ch+X]; X
  004012BC: call    _sin
  004012C1: fstp    st
  004012C3: add     esp, 8
  004012C6: fld     qword ptr ds:411120h
  004012CC: sub     esp, 8
  004012CF: fstp    [esp+2Ch+X]; X
  004012D2: call    _sin
  004012D7: fstp    st
  004012D9: add     esp, 8
  004012DC: lea     ecx, [ebp+var_21]
  004012DF: call    sub_401320
  004012E4: movzx   eax, word ptr ds:4139E4h
  004012EB: cmp     eax, 7E0h
  004012F0: jnz     short loc_4012F6
  004012F2: xor     eax, eax
  004012F4: jmp     short loc_40130D
  004012F6: mov     ecx, 413030h; this
  004012FB: call    ?name@type_info@@QBEPBDXZ; type_info::name(void)
  00401300: push    0; FileName
  00401302: call    j___wremove
  00401307: add     esp, 4
  0040130A: mov     eax, [ebp+var_18]
  0040130D: mov     esp, ebp
  0040130F: pop     ebp
  00401310: retn    10h

Function: sub_401320
  00401320: push    ebp
  00401321: mov     ebp, esp
  00401323: sub     esp, 1Ch
  00401326: mov     [ebp+var_1C], ecx
  00401329: mov     byte ptr ds:44E608h, 82h ; '‚'
  00401330: mov     byte ptr ds:44E609h, 97h ; '—'
  00401337: mov     byte ptr ds:44E644h, 2Fh ; '/'
  0040133E: mov     byte ptr ds:44E6E8h, 9Dh
  00401345: mov     byte ptr ds:44E6E9h, 8Ah ; 'Š'
  0040134C: cmp     dword ptr ds:47F808h, 0
  00401353: jnz     short loc_401367
  00401355: push    2710h; dwBytes
  0040135A: push    0; uFlags
  0040135C: call    dword ptr ds:411020h
  00401362: mov     ds:413B64h, eax
  00401367: mov     eax, ds:47F808h
  0040136C: sub     eax, 1
  0040136F: jnz     short loc_401387
  00401371: push    104h; Size
  00401376: push    0; Val
  00401378: mov     ecx, ds:413B64h
  0040137E: push    ecx; void *
  0040137F: call    _memset
  00401384: add     esp, 0Ch
  00401387: fld     qword ptr ds:411120h
  0040138D: sub     esp, 8
  00401390: fstp    [esp+24h+X]; X
  00401393: call    _sin
  00401398: fstp    st
  0040139A: add     esp, 8
  0040139D: mov     edx, ds:47F808h
  004013A3: sub     edx, 2
  004013A6: jnz     short loc_4013D7
  004013A8: mov     word ptr ds:4139E4h, 7E1h
  004013B1: mov     word ptr ds:4139E6h, 2
  004013BA: mov     byte ptr ds:41E02Ch, 7
  004013C1: fld     qword ptr ds:411120h
  004013C7: sub     esp, 8
  004013CA: fstp    [esp+24h+X]; X
  004013CD: call    _sin
  004013D2: fstp    st
  004013D4: add     esp, 8
  004013D7: mov     eax, ds:47F808h
  004013DC: sub     eax, 3
  004013DF: jnz     short loc_40141D
  004013E1: fld     qword ptr ds:411120h
  004013E7: sub     esp, 8
  004013EA: fstp    [esp+24h+X]; X
  004013ED: call    _sin
  004013F2: fstp    st
  004013F4: add     esp, 8
  004013F7: push    47F8C4h
  004013FC: call    dword ptr ds:41101Ch
  00401402: mov     ds:413B54h, eax
  00401407: fld     qword ptr ds:411120h
  0040140D: sub     esp, 8
  00401410: fstp    [esp+24h+X]; X
  00401413: call    _sin
  00401418: fstp    st
  0040141A: add     esp, 8
  0040141D: mov     ecx, ds:47F808h
  00401423: sub     ecx, 10Fh
  00401429: jnz     short loc_401443
  0040142B: mov     edx, ds:41DFCCh
  00401431: mov     eax, ds:41DFD4h
  00401436: lea     ecx, [eax+edx+0F8h]
  0040143D: mov     ds:41DFE8h, ecx
  00401443: fld     qword ptr ds:411120h
  00401449: sub     esp, 8
  0040144C: fstp    [esp+24h+X]; X
  0040144F: call    _sin
  00401454: fstp    st
  00401456: add     esp, 8
  00401459: mov     edx, ds:47F808h
  0040145F: sub     edx, 0FEh ; 'þ'
  00401465: jnz     short loc_4014CD
  00401467: mov     [ebp+var_14], 0
  0040146E: jmp     short loc_401479
  00401470: mov     eax, [ebp+var_14]
  00401473: add     eax, 1
  00401476: mov     [ebp+var_14], eax
  00401479: cmp     [ebp+var_14], 0C3118h
  00401480: jge     short loc_4014CD
  00401482: mov     eax, [ebp+var_14]
  00401485: cdq
  00401486: mov     ecx, 3
  0040148B: idiv    ecx
  0040148D: test    edx, edx
  0040148F: jz      short loc_4014AF
  00401491: mov     edx, ds:413A10h
  00401497: add     edx, [ebp+var_14]
  0040149A: movsx   eax, byte ptr [edx]
  0040149D: xor     eax, 0CDh
  004014A2: mov     ecx, ds:413A10h
  004014A8: add     ecx, [ebp+var_14]
  004014AB: mov     [ecx], al
  004014AD: jmp     short loc_4014CB
  004014AF: mov     edx, ds:413A10h
  004014B5: add     edx, [ebp+var_14]
  004014B8: movsx   eax, byte ptr [edx]
  004014BB: xor     eax, 0CFh
  004014C0: mov     ecx, ds:413A10h
  004014C6: add     ecx, [ebp+var_14]
  004014C9: mov     [ecx], al
  004014CB: jmp     short loc_401470
  004014CD: fld     qword ptr ds:411120h
  004014D3: sub     esp, 8
  004014D6: fstp    [esp+24h+X]; X
  004014D9: call    _sin
  004014DE: fstp    st
  004014E0: add     esp, 8
  004014E3: mov     edx, ds:47F808h
  004014E9: sub     edx, 4
  004014EC: jnz     short loc_40150E
  004014EE: movzx   eax, word ptr ds:4139E4h
  004014F5: cmp     eax, 7E1h
  004014FA: jnz     short loc_40150E
  004014FC: mov     cx, ds:4139E4h
  00401503: sub     cx, 1
  00401507: mov     ds:4139E4h, cx
  0040150E: fld     qword ptr ds:411120h
  00401514: sub     esp, 8
  00401517: fstp    [esp+24h+X]; X
  0040151A: call    _sin
  0040151F: fstp    st
  00401521: add     esp, 8
  00401524: mov     edx, ds:47F808h
  0040152A: sub     edx, 5
  0040152D: jnz     short loc_401551
  0040152F: movzx   eax, word ptr ds:4139E4h
  00401536: cmp     eax, 7E0h
  0040153B: jnz     short loc_401551
  0040153D: movzx   ecx, word ptr ds:4139E4h
  00401544: sub     ecx, 7D8h
  0040154A: mov     ds:4139E6h, cx
  00401551: fld     qword ptr ds:411120h
  00401557: sub     esp, 8
  0040155A: fstp    [esp+24h+X]; X
  0040155D: call    _sin
  00401562: fstp    st
  00401564: add     esp, 8
  00401567: mov     edx, ds:47F808h
  0040156D: sub     edx, 6
  00401570: jnz     short loc_401582
  00401572: mov     ax, ds:4139E6h
  00401578: sub     ax, 1
  0040157C: mov     ds:4139E6h, ax
  00401582: fld     qword ptr ds:411120h
  00401588: sub     esp, 8
  0040158B: fstp    [esp+24h+X]; X
  0040158E: call    _sin
  00401593: fstp    st
  00401595: add     esp, 8
  00401598: mov     ecx, ds:47F808h
  0040159E: sub     ecx, 7
  004015A1: jnz     short loc_4015B5
  004015A3: mov     dx, ds:4139E6h
  004015AA: sub     dx, 1
  004015AE: mov     ds:4139E6h, dx
  004015B5: fld     qword ptr ds:411120h
  004015BB: sub     esp, 8
  004015BE: fstp    [esp+24h+X]; X
  004015C1: call    _sin
  004015C6: fstp    st
  004015C8: add     esp, 8
  004015CB: mov     eax, ds:47F808h
  004015D0: sub     eax, 8
  004015D3: jnz     short loc_4015E7
  004015D5: push    3E8h; dwBytes
  004015DA: push    0; uFlags
  004015DC: call    dword ptr ds:411020h
  004015E2: mov     ds:41E034h, eax
  004015E7: fld     qword ptr ds:411120h
  004015ED: sub     esp, 8
  004015F0: fstp    [esp+24h+X]; X
  004015F3: call    _sin
  004015F8: fstp    st
  004015FA: add     esp, 8
  004015FD: mov     ecx, ds:47F808h
  00401603: sub     ecx, 9
  00401606: jnz     short loc_40161A
  00401608: push    3E8h; dwBytes
  0040160D: push    0; uFlags
  0040160F: call    dword ptr ds:411020h
  00401615: mov     ds:41E030h, eax
  0040161A: fld     qword ptr ds:411120h
  00401620: sub     esp, 8
  00401623: fstp    [esp+24h+X]; X
  00401626: call    _sin
  0040162B: fstp    st
  0040162D: add     esp, 8
  00401630: mov     edx, ds:47F808h
  00401636: sub     edx, 1Dh
  00401639: jnz     short loc_401653
  0040163B: mov     eax, ds:41E034h
  00401640: push    eax; lpProcName
  00401641: mov     ecx, ds:413B54h
  00401647: push    ecx; hModule
  00401648: call    dword ptr ds:411018h
  0040164E: mov     ds:41E010h, eax
  00401653: fld     qword ptr ds:411120h
  00401659: sub     esp, 8
  0040165C: fstp    [esp+24h+X]; X
  0040165F: call    _sin
  00401664: fstp    st
  00401666: add     esp, 8
  00401669: mov     edx, ds:47F808h
  0040166F: sub     edx, 0Ah
  00401672: jnz     short loc_401689
  00401674: movzx   eax, word ptr ds:4139E6h
  0040167B: xor     eax, 57h
  0040167E: xor     eax, 6
  00401681: mov     ecx, ds:41E034h
  00401687: mov     [ecx], al
  00401689: fld     qword ptr ds:411120h
  0040168F: sub     esp, 8
  00401692: fstp    [esp+24h+X]; X
  00401695: call    _sin
  0040169A: fstp    st
  0040169C: add     esp, 8
  0040169F: mov     edx, ds:47F808h
  004016A5: sub     edx, 0Bh
  004016A8: jnz     short loc_4016C0
  004016AA: movzx   eax, word ptr ds:4139E6h
  004016B1: xor     eax, 72h
  004016B4: xor     eax, 6
  004016B7: mov     ecx, ds:41E034h
  004016BD: mov     [ecx+1], al
  004016C0: fld     qword ptr ds:411120h
  004016C6: sub     esp, 8
  004016C9: fstp    [esp+24h+X]; X
  004016CC: call    _sin
  004016D1: fstp    st
  004016D3: add     esp, 8
  004016D6: mov     edx, ds:47F808h
  004016DC: sub     edx, 0Ch
  004016DF: jnz     short loc_4016F7
  004016E1: movzx   eax, word ptr ds:4139E6h
  004016E8: xor     eax, 69h
  004016EB: xor     eax, 6
  004016EE: mov     ecx, ds:41E034h
  004016F4: mov     [ecx+2], al
  004016F7: fld     qword ptr ds:411120h
  004016FD: sub     esp, 8
  00401700: fstp    [esp+24h+X]; X
  00401703: call    _sin
  00401708: fstp    st
  0040170A: add     esp, 8
  0040170D: mov     edx, ds:47F808h
  00401713: sub     edx, 0Dh
  00401716: jnz     short loc_40172E
  00401718: movzx   eax, word ptr ds:4139E6h
  0040171F: xor     eax, 74h
  00401722: xor     eax, 6
  00401725: mov     ecx, ds:41E034h
  0040172B: mov     [ecx+3], al
  0040172E: fld     qword ptr ds:411120h
  00401734: sub     esp, 8
  00401737: fstp    [esp+24h+X]; X
  0040173A: call    _sin
  0040173F: fstp    st
  00401741: add     esp, 8
  00401744: mov     edx, ds:47F808h
  0040174A: sub     edx, 0Eh
  0040174D: jnz     short loc_401765
  0040174F: movzx   eax, word ptr ds:4139E6h
  00401756: xor     eax, 65h
  00401759: xor     eax, 6
  0040175C: mov     ecx, ds:41E034h
  00401762: mov     [ecx+4], al
  00401765: fld     qword ptr ds:411120h
  0040176B: sub     esp, 8
  0040176E: fstp    [esp+24h+X]; X
  00401771: call    _sin
  00401776: fstp    st
  00401778: add     esp, 8
  0040177B: mov     edx, ds:47F808h
  00401781: sub     edx, 0Fh
  00401784: jnz     short loc_40179C
  00401786: movzx   eax, word ptr ds:4139E6h
  0040178D: xor     eax, 50h
  00401790: xor     eax, 6
  00401793: mov     ecx, ds:41E034h
  00401799: mov     [ecx+5], al
  0040179C: fld     qword ptr ds:411120h
  004017A2: sub     esp, 8
  004017A5: fstp    [esp+24h+X]; X
  004017A8: call    _sin
  004017AD: fstp    st
  004017AF: add     esp, 8
  004017B2: mov     edx, ds:47F808h
  004017B8: sub     edx, 10h
  004017BB: jnz     short loc_4017D3
  004017BD: movzx   eax, word ptr ds:4139E6h
  004017C4: xor     eax, 72h
  004017C7: xor     eax, 6
  004017CA: mov     ecx, ds:41E034h
  004017D0: mov     [ecx+6], al
  004017D3: fld     qword ptr ds:411120h
  004017D9: sub     esp, 8
  004017DC: fstp    [esp+24h+X]; X
  004017DF: call    _sin
  004017E4: fstp    st
  004017E6: add     esp, 8
  004017E9: mov     edx, ds:47F808h
  004017EF: sub     edx, 11h
  004017F2: jnz     short loc_40180A
  004017F4: movzx   eax, word ptr ds:4139E6h
  004017FB: xor     eax, 6Fh
  004017FE: xor     eax, 6
  00401801: mov     ecx, ds:41E034h
  00401807: mov     [ecx+7], al
  0040180A: fld     qword ptr ds:411120h
  00401810: sub     esp, 8
  00401813: fstp    [esp+24h+X]; X
  00401816: call    _sin
  0040181B: fstp    st
  0040181D: add     esp, 8
  00401820: mov     edx, ds:47F808h
  00401826: sub     edx, 12h
  00401829: jnz     short loc_401841
  0040182B: movzx   eax, word ptr ds:4139E6h
  00401832: xor     eax, 63h
  00401835: xor     eax, 6
  00401838: mov     ecx, ds:41E034h
  0040183E: mov     [ecx+8], al
  00401841: fld     qword ptr ds:411120h
  00401847: sub     esp, 8
  0040184A: fstp    [esp+24h+X]; X
  0040184D: call    _sin
  00401852: fstp    st
  00401854: add     esp, 8
  00401857: mov     edx, ds:47F808h
  0040185D: sub     edx, 13h
  00401860: jnz     short loc_401878
  00401862: movzx   eax, word ptr ds:4139E6h
  00401869: xor     eax, 65h
  0040186C: xor     eax, 6
  0040186F: mov     ecx, ds:41E034h
  00401875: mov     [ecx+9], al
  00401878: fld     qword ptr ds:411120h
  0040187E: sub     esp, 8
  00401881: fstp    [esp+24h+X]; X
  00401884: call    _sin
  00401889: fstp    st
  0040188B: add     esp, 8
  0040188E: mov     edx, ds:47F808h
  00401894: sub     edx, 14h
  00401897: jnz     short loc_4018AF
  00401899: movzx   eax, word ptr ds:4139E6h
  004018A0: xor     eax, 73h
  004018A3: xor     eax, 6
  004018A6: mov     ecx, ds:41E034h
  004018AC: mov     [ecx+0Ah], al
  004018AF: fld     qword ptr ds:411120h
  004018B5: sub     esp, 8
  004018B8: fstp    [esp+24h+X]; X
  004018BB: call    _sin
  004018C0: fstp    st
  004018C2: add     esp, 8
  004018C5: mov     edx, ds:47F808h
  004018CB: sub     edx, 15h
  004018CE: jnz     short loc_4018E6
  004018D0: movzx   eax, word ptr ds:4139E6h
  004018D7: xor     eax, 73h
  004018DA: xor     eax, 6
  004018DD: mov     ecx, ds:41E034h
  004018E3: mov     [ecx+0Bh], al
  004018E6: fld     qword ptr ds:411120h
  004018EC: sub     esp, 8
  004018EF: fstp    [esp+24h+X]; X
  004018F2: call    _sin
  004018F7: fstp    st
  004018F9: add     esp, 8
  004018FC: mov     edx, ds:47F808h
  00401902: sub     edx, 16h
  00401905: jnz     short loc_40191D
  00401907: movzx   eax, word ptr ds:4139E6h
  0040190E: xor     eax, 4Dh
  00401911: xor     eax, 6
  00401914: mov     ecx, ds:41E034h
  0040191A: mov     [ecx+0Ch], al
  0040191D: fld     qword ptr ds:411120h
  00401923: sub     esp, 8
  00401926: fstp    [esp+24h+X]; X
  00401929: call    _sin
  0040192E: fstp    st
  00401930: add     esp, 8
  00401933: mov     edx, ds:47F808h
  00401939: sub     edx, 17h
  0040193C: jnz     short loc_401954
  0040193E: movzx   eax, word ptr ds:4139E6h
  00401945: xor     eax, 65h
  00401948: xor     eax, 6
  0040194B: mov     ecx, ds:41E034h
  00401951: mov     [ecx+0Dh], al
  00401954: fld     qword ptr ds:411120h
  0040195A: sub     esp, 8
  0040195D: fstp    [esp+24h+X]; X
  00401960: call    _sin
  00401965: fstp    st
  00401967: add     esp, 8
  0040196A: mov     edx, ds:47F808h
  00401970: sub     edx, 18h
  00401973: jnz     short loc_40198B
  00401975: movzx   eax, word ptr ds:4139E6h
  0040197C: xor     eax, 6Dh
  0040197F: xor     eax, 6
  00401982: mov     ecx, ds:41E034h
  00401988: mov     [ecx+0Eh], al
  0040198B: fld     qword ptr ds:411120h
  00401991: sub     esp, 8
  00401994: fstp    [esp+24h+X]; X
  00401997: call    _sin
  0040199C: fstp    st
  0040199E: add     esp, 8
  004019A1: mov     edx, ds:47F808h
  004019A7: sub     edx, 19h
  004019AA: jnz     short loc_4019C2
  004019AC: movzx   eax, word ptr ds:4139E6h
  004019B3: xor     eax, 6Fh
  004019B6: xor     eax, 6
  004019B9: mov     ecx, ds:41E034h
  004019BF: mov     [ecx+0Fh], al
  004019C2: fld     qword ptr ds:411120h
  004019C8: sub     esp, 8
  004019CB: fstp    [esp+24h+X]; X
  004019CE: call    _sin
  004019D3: fstp    st
  004019D5: add     esp, 8
  004019D8: mov     edx, ds:47F808h
  004019DE: sub     edx, 1Ah
  004019E1: jnz     short loc_4019F9
  004019E3: movzx   eax, word ptr ds:4139E6h
  004019EA: xor     eax, 72h
  004019ED: xor     eax, 6
  004019F0: mov     ecx, ds:41E034h
  004019F6: mov     [ecx+10h], al
  004019F9: fld     qword ptr ds:411120h
  004019FF: sub     esp, 8
  00401A02: fstp    [esp+24h+X]; X
  00401A05: call    _sin
  00401A0A: fstp    st
  00401A0C: add     esp, 8
  00401A0F: mov     edx, ds:47F808h
  00401A15: sub     edx, 1Bh
  00401A18: jnz     short loc_401A30
  00401A1A: movzx   eax, word ptr ds:4139E6h
  00401A21: xor     eax, 79h
  00401A24: xor     eax, 6
  00401A27: mov     ecx, ds:41E034h
  00401A2D: mov     [ecx+11h], al
  00401A30: fld     qword ptr ds:411120h
  00401A36: sub     esp, 8
  00401A39: fstp    [esp+24h+X]; X
  00401A3C: call    _sin
  00401A41: fstp    st
  00401A43: add     esp, 8
  00401A46: mov     edx, ds:47F808h
  00401A4C: sub     edx, 1Ch
  00401A4F: jnz     short loc_401A64
  00401A51: movzx   eax, word ptr ds:4139E6h
  00401A58: xor     eax, 6
  00401A5B: mov     ecx, ds:41E034h
  00401A61: mov     [ecx+12h], al
  00401A64: fld     qword ptr ds:411120h
  00401A6A: sub     esp, 8
  00401A6D: fstp    [esp+24h+X]; X
  00401A70: call    _sin
  00401A75: fstp    st
  00401A77: add     esp, 8
  00401A7A: mov     edx, ds:47F808h
  00401A80: sub     edx, 1Eh
  00401A83: jnz     short loc_401A9A
  00401A85: movzx   eax, word ptr ds:4139E6h
  00401A8C: xor     eax, 43h
  00401A8F: xor     eax, 6
  00401A92: mov     ecx, ds:41E034h
  00401A98: mov     [ecx], al
  00401A9A: fld     qword ptr ds:411120h
  00401AA0: sub     esp, 8
  00401AA3: fstp    [esp+24h+X]; X
  00401AA6: call    _sin
  00401AAB: fstp    st
  00401AAD: add     esp, 8
  00401AB0: mov     edx, ds:47F808h
  00401AB6: sub     edx, 1Fh
  00401AB9: jnz     short loc_401AD1
  00401ABB: movzx   eax, word ptr ds:4139E6h
  00401AC2: xor     eax, 72h
  00401AC5: xor     eax, 6
  00401AC8: mov     ecx, ds:41E034h
  00401ACE: mov     [ecx+1], al
  00401AD1: fld     qword ptr ds:411120h
  00401AD7: sub     esp, 8
  00401ADA: fstp    [esp+24h+X]; X
  00401ADD: call    _sin
  00401AE2: fstp    st
  00401AE4: add     esp, 8
  00401AE7: mov     edx, ds:47F808h
  00401AED: sub     edx, 20h ; ' '
  00401AF0: jnz     short loc_401B08
  00401AF2: movzx   eax, word ptr ds:4139E6h
  00401AF9: xor     eax, 65h
  00401AFC: xor     eax, 6
  00401AFF: mov     ecx, ds:41E034h
  00401B05: mov     [ecx+2], al
  00401B08: fld     qword ptr ds:411120h
  00401B0E: sub     esp, 8
  00401B11: fstp    [esp+24h+X]; X
  00401B14: call    _sin
  00401B19: fstp    st
  00401B1B: add     esp, 8
  00401B1E: mov     edx, ds:47F808h
  00401B24: sub     edx, 21h ; '!'
  00401B27: jnz     short loc_401B3F
  00401B29: movzx   eax, word ptr ds:4139E6h
  00401B30: xor     eax, 61h
  00401B33: xor     eax, 6
  00401B36: mov     ecx, ds:41E034h
  00401B3C: mov     [ecx+3], al
  00401B3F: fld     qword ptr ds:411120h
  00401B45: sub     esp, 8
  00401B48: fstp    [esp+24h+X]; X
  00401B4B: call    _sin
  00401B50: fstp    st
  00401B52: add     esp, 8
  00401B55: mov     edx, ds:47F808h
  00401B5B: sub     edx, 22h ; '"'
  00401B5E: jnz     short loc_401B76
  00401B60: movzx   eax, word ptr ds:4139E6h
  00401B67: xor     eax, 74h
  00401B6A: xor     eax, 6
  00401B6D: mov     ecx, ds:41E034h
  00401B73: mov     [ecx+4], al
  00401B76: fld     qword ptr ds:411120h
  00401B7C: sub     esp, 8
  00401B7F: fstp    [esp+24h+X]; X
  00401B82: call    _sin
  00401B87: fstp    st
  00401B89: add     esp, 8
  00401B8C: mov     edx, ds:47F808h
  00401B92: sub     edx, 23h ; '#'
  00401B95: jnz     short loc_401BAD
  00401B97: movzx   eax, word ptr ds:4139E6h
  00401B9E: xor     eax, 65h
  00401BA1: xor     eax, 6
  00401BA4: mov     ecx, ds:41E034h
  00401BAA: mov     [ecx+5], al
  00401BAD: fld     qword ptr ds:411120h
  00401BB3: sub     esp, 8
  00401BB6: fstp    [esp+24h+X]; X
  00401BB9: call    _sin
  00401BBE: fstp    st
  00401BC0: add     esp, 8
  00401BC3: mov     edx, ds:47F808h
  00401BC9: sub     edx, 24h ; '$'
  00401BCC: jnz     short loc_401BE4
  00401BCE: movzx   eax, word ptr ds:4139E6h
  00401BD5: xor     eax, 50h
  00401BD8: xor     eax, 6
  00401BDB: mov     ecx, ds:41E034h
  00401BE1: mov     [ecx+6], al
  00401BE4: fld     qword ptr ds:411120h
  00401BEA: sub     esp, 8
  00401BED: fstp    [esp+24h+X]; X
  00401BF0: call    _sin
  00401BF5: fstp    st
  00401BF7: add     esp, 8
  00401BFA: mov     edx, ds:47F808h
  00401C00: sub     edx, 25h ; '%'
  00401C03: jnz     short loc_401C1B
  00401C05: movzx   eax, word ptr ds:4139E6h
  00401C0C: xor     eax, 72h
  00401C0F: xor     eax, 6
  00401C12: mov     ecx, ds:41E034h
  00401C18: mov     [ecx+7], al
  00401C1B: fld     qword ptr ds:411120h
  00401C21: sub     esp, 8
  00401C24: fstp    [esp+24h+X]; X
  00401C27: call    _sin
  00401C2C: fstp    st
  00401C2E: add     esp, 8
  00401C31: mov     edx, ds:47F808h
  00401C37: sub     edx, 26h ; '&'
  00401C3A: jnz     short loc_401C52
  00401C3C: movzx   eax, word ptr ds:4139E6h
  00401C43: xor     eax, 6Fh
  00401C46: xor     eax, 6
  00401C49: mov     ecx, ds:41E034h
  00401C4F: mov     [ecx+8], al
  00401C52: fld     qword ptr ds:411120h
  00401C58: sub     esp, 8
  00401C5B: fstp    [esp+24h+X]; X
  00401C5E: call    _sin
  00401C63: fstp    st
  00401C65: add     esp, 8
  00401C68: mov     edx, ds:47F808h
  00401C6E: sub     edx, 27h ; '''
  00401C71: jnz     short loc_401C89
  00401C73: movzx   eax, word ptr ds:4139E6h
  00401C7A: xor     eax, 63h
  00401C7D: xor     eax, 6
  00401C80: mov     ecx, ds:41E034h
  00401C86: mov     [ecx+9], al
  00401C89: fld     qword ptr ds:411120h
  00401C8F: sub     esp, 8
  00401C92: fstp    [esp+24h+X]; X
  00401C95: call    _sin
  00401C9A: fstp    st
  00401C9C: add     esp, 8
  00401C9F: mov     edx, ds:47F808h
  00401CA5: sub     edx, 28h ; '('
  00401CA8: jnz     short loc_401CC0
  00401CAA: movzx   eax, word ptr ds:4139E6h
  00401CB1: xor     eax, 65h
  00401CB4: xor     eax, 6
  00401CB7: mov     ecx, ds:41E034h
  00401CBD: mov     [ecx+0Ah], al
  00401CC0: fld     qword ptr ds:411120h
  00401CC6: sub     esp, 8
  00401CC9: fstp    [esp+24h+X]; X
  00401CCC: call    _sin
  00401CD1: fstp    st
  00401CD3: add     esp, 8
  00401CD6: mov     edx, ds:47F808h
  00401CDC: sub     edx, 29h ; ')'
  00401CDF: jnz     short loc_401CF7
  00401CE1: movzx   eax, word ptr ds:4139E6h
  00401CE8: xor     eax, 73h
  00401CEB: xor     eax, 6
  00401CEE: mov     ecx, ds:41E034h
  00401CF4: mov     [ecx+0Bh], al
  00401CF7: fld     qword ptr ds:411120h
  00401CFD: sub     esp, 8
  00401D00: fstp    [esp+24h+X]; X
  00401D03: call    _sin
  00401D08: fstp    st
  00401D0A: add     esp, 8
  00401D0D: mov     edx, ds:47F808h
  00401D13: sub     edx, 2Ah ; '*'
  00401D16: jnz     short loc_401D2E
  00401D18: movzx   eax, word ptr ds:4139E6h
  00401D1F: xor     eax, 73h
  00401D22: xor     eax, 6
  00401D25: mov     ecx, ds:41E034h
  00401D2B: mov     [ecx+0Ch], al
  00401D2E: fld     qword ptr ds:411120h
  00401D34: sub     esp, 8
  00401D37: fstp    [esp+24h+X]; X
  00401D3A: call    _sin
  00401D3F: fstp    st
  00401D41: add     esp, 8
  00401D44: mov     edx, ds:47F808h
  00401D4A: sub     edx, 2Bh ; '+'
  00401D4D: jnz     short loc_401D65
  00401D4F: movzx   eax, word ptr ds:4139E6h
  00401D56: xor     eax, 41h
  00401D59: xor     eax, 6
  00401D5C: mov     ecx, ds:41E034h
  00401D62: mov     [ecx+0Dh], al
  00401D65: fld     qword ptr ds:411120h
  00401D6B: sub     esp, 8
  00401D6E: fstp    [esp+24h+X]; X
  00401D71: call    _sin
  00401D76: fstp    st
  00401D78: add     esp, 8
  00401D7B: mov     edx, ds:47F808h
  00401D81: sub     edx, 2Ch ; ','
  00401D84: jnz     short loc_401D99
  00401D86: movzx   eax, word ptr ds:4139E6h
  00401D8D: xor     eax, 6
  00401D90: mov     ecx, ds:41E034h
  00401D96: mov     [ecx+0Eh], al
  00401D99: fld     qword ptr ds:411120h
  00401D9F: sub     esp, 8
  00401DA2: fstp    [esp+24h+X]; X
  00401DA5: call    _sin
  00401DAA: fstp    st
  00401DAC: add     esp, 8
  00401DAF: mov     edx, ds:47F808h
  00401DB5: sub     edx, 2Dh ; '-'
  00401DB8: jnz     short loc_401DD2
  00401DBA: mov     eax, ds:41E034h
  00401DBF: push    eax; lpProcName
  00401DC0: mov     ecx, ds:413B54h
  00401DC6: push    ecx; hModule
  00401DC7: call    dword ptr ds:411018h
  00401DCD: mov     ds:41E020h, eax
  00401DD2: fld     qword ptr ds:411120h
  00401DD8: sub     esp, 8
  00401DDB: fstp    [esp+24h+X]; X
  00401DDE: call    _sin
  00401DE3: fstp    st
  00401DE5: add     esp, 8
  00401DE8: mov     edx, ds:47F808h
  00401DEE: sub     edx, 2Eh ; '.'
  00401DF1: jnz     short loc_401E05
  00401DF3: movzx   eax, word ptr ds:4139E6h
  00401DFA: xor     eax, 50h
  00401DFD: mov     ecx, ds:41E030h
  00401E03: mov     [ecx], al
  00401E05: fld     qword ptr ds:411120h
  00401E0B: sub     esp, 8
  00401E0E: fstp    [esp+24h+X]; X
  00401E11: call    _sin
  00401E16: fstp    st
  00401E18: add     esp, 8
  00401E1B: mov     edx, ds:47F808h
  00401E21: sub     edx, 2Fh ; '/'
  00401E24: jnz     short loc_401E39
  00401E26: movzx   eax, word ptr ds:4139E6h
  00401E2D: xor     eax, 6Fh
  00401E30: mov     ecx, ds:41E030h
  00401E36: mov     [ecx+1], al
  00401E39: fld     qword ptr ds:411120h
  00401E3F: sub     esp, 8
  00401E42: fstp    [esp+24h+X]; X
  00401E45: call    _sin
  00401E4A: fstp    st
  00401E4C: add     esp, 8
  00401E4F: mov     edx, ds:47F808h
  00401E55: sub     edx, 30h ; '0'
  00401E58: jnz     short loc_401E6D
  00401E5A: movzx   eax, word ptr ds:4139E6h
  00401E61: xor     eax, 74h
  00401E64: mov     ecx, ds:41E030h
  00401E6A: mov     [ecx+2], al
  00401E6D: fld     qword ptr ds:411120h
  00401E73: sub     esp, 8
  00401E76: fstp    [esp+24h+X]; X
  00401E79: call    _sin
  00401E7E: fstp    st
  00401E80: add     esp, 8
  00401E83: mov     edx, ds:47F808h
  00401E89: sub     edx, 31h ; '1'
  00401E8C: jnz     short loc_401EA1
  00401E8E: movzx   eax, word ptr ds:4139E6h
  00401E95: xor     eax, 72h
  00401E98: mov     ecx, ds:41E030h
  00401E9E: mov     [ecx+3], al
  00401EA1: fld     qword ptr ds:411120h
  00401EA7: sub     esp, 8
  00401EAA: fstp    [esp+24h+X]; X
  00401EAD: call    _sin
  00401EB2: fstp    st
  00401EB4: add     esp, 8
  00401EB7: mov     edx, ds:47F808h
  00401EBD: sub     edx, 32h ; '2'
  00401EC0: jnz     short loc_401ED5
  00401EC2: movzx   eax, word ptr ds:4139E6h
  00401EC9: xor     eax, 73h
  00401ECC: mov     ecx, ds:41E030h
  00401ED2: mov     [ecx+4], al
  00401ED5: fld     qword ptr ds:411120h
  00401EDB: sub     esp, 8
  00401EDE: fstp    [esp+24h+X]; X
  00401EE1: call    _sin
  00401EE6: fstp    st
  00401EE8: add     esp, 8
  00401EEB: mov     edx, ds:47F808h
  00401EF1: sub     edx, 33h ; '3'
  00401EF4: jnz     short loc_401F09
  00401EF6: movzx   eax, word ptr ds:4139E6h
  00401EFD: xor     eax, 67h
  00401F00: mov     ecx, ds:41E030h
  00401F06: mov     [ecx+5], al
  00401F09: fld     qword ptr ds:411120h
  00401F0F: sub     esp, 8
  00401F12: fstp    [esp+24h+X]; X
  00401F15: call    _sin
  00401F1A: fstp    st
  00401F1C: add     esp, 8
  00401F1F: mov     edx, ds:47F808h
  00401F25: sub     edx, 34h ; '4'
  00401F28: jnz     short loc_401F3D
  00401F2A: movzx   eax, word ptr ds:4139E6h
  00401F31: xor     eax, 6Ah
  00401F34: mov     ecx, ds:41E030h
  00401F3A: mov     [ecx+6], al
  00401F3D: fld     qword ptr ds:411120h
  00401F43: sub     esp, 8
  00401F46: fstp    [esp+24h+X]; X
  00401F49: call    _sin
  00401F4E: fstp    st
  00401F50: add     esp, 8
  00401F53: mov     edx, ds:47F808h
  00401F59: sub     edx, 35h ; '5'
  00401F5C: jnz     short loc_401F71
  00401F5E: movzx   eax, word ptr ds:4139E6h
  00401F65: xor     eax, 56h
  00401F68: mov     ecx, ds:41E030h
  00401F6E: mov     [ecx+7], al
  00401F71: fld     qword ptr ds:411120h
  00401F77: sub     esp, 8
  00401F7A: fstp    [esp+24h+X]; X
  00401F7D: call    _sin
  00401F82: fstp    st
  00401F84: add     esp, 8
  00401F87: mov     edx, ds:47F808h
  00401F8D: sub     edx, 36h ; '6'
  00401F90: jnz     short loc_401FA5
  00401F92: movzx   eax, word ptr ds:4139E6h
  00401F99: xor     eax, 74h
  00401F9C: mov     ecx, ds:41E030h
  00401FA2: mov     [ecx+8], al
  00401FA5: fld     qword ptr ds:411120h
  00401FAB: sub     esp, 8
  00401FAE: fstp    [esp+24h+X]; X
  00401FB1: call    _sin
  00401FB6: fstp    st
  00401FB8: add     esp, 8
  00401FBB: mov     edx, ds:47F808h
  00401FC1: sub     edx, 37h ; '7'
  00401FC4: jnz     short loc_401FD9
  00401FC6: movzx   eax, word ptr ds:4139E6h
  00401FCD: xor     eax, 69h
  00401FD0: mov     ecx, ds:41E030h
  00401FD6: mov     [ecx+9], al
  00401FD9: fld     qword ptr ds:411120h
  00401FDF: sub     esp, 8
  00401FE2: fstp    [esp+24h+X]; X
  00401FE5: call    _sin
  00401FEA: fstp    st
  00401FEC: add     esp, 8
  00401FEF: mov     edx, ds:47F808h
  00401FF5: sub     edx, 38h ; '8'
  00401FF8: jnz     short loc_40200D
  00401FFA: movzx   eax, word ptr ds:4139E6h
  00402001: xor     eax, 72h
  00402004: mov     ecx, ds:41E030h
  0040200A: mov     [ecx+0Ah], al
  0040200D: fld     qword ptr ds:411120h
  00402013: sub     esp, 8
  00402016: fstp    [esp+24h+X]; X
  00402019: call    _sin
  0040201E: fstp    st
  00402020: add     esp, 8
  00402023: mov     edx, ds:47F808h
  00402029: sub     edx, 39h ; '9'
  0040202C: jnz     short loc_402041
  0040202E: movzx   eax, word ptr ds:4139E6h
  00402035: xor     eax, 63h
  00402038: mov     ecx, ds:41E030h
  0040203E: mov     [ecx+0Bh], al
  00402041: fld     qword ptr ds:411120h
  00402047: sub     esp, 8
  0040204A: fstp    [esp+24h+X]; X
  0040204D: call    _sin
  00402052: fstp    st
  00402054: add     esp, 8
  00402057: mov     edx, ds:47F808h
  0040205D: sub     edx, 3Ah ; ':'
  00402060: jnz     short loc_402075
  00402062: movzx   eax, word ptr ds:4139E6h
  00402069: xor     eax, 65h
  0040206C: mov     ecx, ds:41E030h
  00402072: mov     [ecx+0Ch], al
  00402075: fld     qword ptr ds:411120h
  0040207B: sub     esp, 8
  0040207E: fstp    [esp+24h+X]; X
  00402081: call    _sin
  00402086: fstp    st
  00402088: add     esp, 8
  0040208B: mov     edx, ds:47F808h
  00402091: sub     edx, 3Bh ; ';'
  00402094: jnz     short loc_4020A9
  00402096: movzx   eax, word ptr ds:4139E6h
  0040209D: xor     eax, 72h
  004020A0: mov     ecx, ds:41E030h
  004020A6: mov     [ecx+0Dh], al
  004020A9: fld     qword ptr ds:411120h
  004020AF: sub     esp, 8
  004020B2: fstp    [esp+24h+X]; X
  004020B5: call    _sin
  004020BA: fstp    st
  004020BC: add     esp, 8
  004020BF: mov     edx, ds:47F808h
  004020C5: sub     edx, 3Ch ; '<'
  004020C8: jnz     short loc_4020DD
  004020CA: movzx   eax, word ptr ds:4139E6h
  004020D1: xor     eax, 43h
  004020D4: mov     ecx, ds:41E030h
  004020DA: mov     [ecx+0Eh], al
  004020DD: fld     qword ptr ds:411120h
  004020E3: sub     esp, 8
  004020E6: fstp    [esp+24h+X]; X
  004020E9: call    _sin
  004020EE: fstp    st
  004020F0: add     esp, 8
  004020F3: mov     edx, ds:47F808h
  004020F9: sub     edx, 3Dh ; '='
  004020FC: jnz     short loc_402111
  004020FE: movzx   eax, word ptr ds:4139E6h
  00402105: xor     eax, 7Eh
  00402108: mov     ecx, ds:41E030h
  0040210E: mov     [ecx+0Fh], al
  00402111: fld     qword ptr ds:411120h
  00402117: sub     esp, 8
  0040211A: fstp    [esp+24h+X]; X
  0040211D: call    _sin
  00402122: fstp    st
  00402124: add     esp, 8
  00402127: mov     edx, ds:47F808h
  0040212D: sub     edx, 3Eh ; '>'
  00402130: jnz     short loc_402145
  00402132: movzx   eax, word ptr ds:4139E6h
  00402139: xor     eax, 40h
  0040213C: mov     ecx, ds:41E030h
  00402142: mov     [ecx+10h], al
  00402145: fld     qword ptr ds:411120h
  0040214B: sub     esp, 8
  0040214E: fstp    [esp+24h+X]; X
  00402151: call    _sin
  00402156: fstp    st
  00402158: add     esp, 8
  0040215B: mov     edx, ds:47F808h
  00402161: sub     edx, 3Fh ; '?'
  00402164: jnz     short loc_402179
  00402166: movzx   eax, word ptr ds:4139E6h
  0040216D: xor     eax, 6
  00402170: mov     ecx, ds:41E030h
  00402176: mov     [ecx+11h], al
  00402179: fld     qword ptr ds:411120h
  0040217F: sub     esp, 8
  00402182: fstp    [esp+24h+X]; X
  00402185: call    _sin
  0040218A: fstp    st
  0040218C: add     esp, 8
  0040218F: mov     edx, ds:47F808h
  00402195: sub     edx, 40h ; '@'
  00402198: jnz     short loc_4021B2
  0040219A: mov     eax, ds:41E030h
  0040219F: push    eax; lpProcName
  004021A0: mov     ecx, ds:413B54h
  004021A6: push    ecx; hModule
  004021A7: call    dword ptr ds:411018h
  004021AD: mov     ds:413A0Ch, eax
  004021B2: fld     qword ptr ds:411120h
  004021B8: sub     esp, 8
  004021BB: fstp    [esp+24h+X]; X
  004021BE: call    _sin
  004021C3: fstp    st
  004021C5: add     esp, 8
  004021C8: mov     edx, ds:47F808h
  004021CE: sub     edx, 41h ; 'A'
  004021D1: jnz     short loc_4021E5
  004021D3: movzx   eax, word ptr ds:4139E6h
  004021DA: xor     eax, 55h
  004021DD: mov     ecx, ds:41E030h
  004021E3: mov     [ecx], al
  004021E5: fld     qword ptr ds:411120h
  004021EB: sub     esp, 8
  004021EE: fstp    [esp+24h+X]; X
  004021F1: call    _sin
  004021F6: fstp    st
  004021F8: add     esp, 8
  004021FB: mov     edx, ds:47F808h
  00402201: sub     edx, 42h ; 'B'
  00402204: jnz     short loc_402219
  00402206: movzx   eax, word ptr ds:4139E6h
  0040220D: xor     eax, 63h
  00402210: mov     ecx, ds:41E030h
  00402216: mov     [ecx+1], al
  00402219: fld     qword ptr ds:411120h
  0040221F: sub     esp, 8
  00402222: fstp    [esp+24h+X]; X
  00402225: call    _sin
  0040222A: fstp    st
  0040222C: add     esp, 8
  0040222F: mov     edx, ds:47F808h
  00402235: sub     edx, 43h ; 'C'
  00402238: jnz     short loc_40224D
  0040223A: movzx   eax, word ptr ds:4139E6h
  00402241: xor     eax, 72h
  00402244: mov     ecx, ds:41E030h
  0040224A: mov     [ecx+2], al
  0040224D: fld     qword ptr ds:411120h
  00402253: sub     esp, 8
  00402256: fstp    [esp+24h+X]; X
  00402259: call    _sin
  0040225E: fstp    st
  00402260: add     esp, 8
  00402263: mov     edx, ds:47F808h
  00402269: sub     edx, 44h ; 'D'
  0040226C: jnz     short loc_402281
  0040226E: movzx   eax, word ptr ds:4139E6h
  00402275: xor     eax, 52h
  00402278: mov     ecx, ds:41E030h
  0040227E: mov     [ecx+3], al
  00402281: fld     qword ptr ds:411120h
  00402287: sub     esp, 8
  0040228A: fstp    [esp+24h+X]; X
  0040228D: call    _sin
  00402292: fstp    st
  00402294: add     esp, 8
  00402297: mov     edx, ds:47F808h
  0040229D: sub     edx, 45h ; 'E'
  004022A0: jnz     short loc_4022B5
  004022A2: movzx   eax, word ptr ds:4139E6h
  004022A9: xor     eax, 6Eh
  004022AC: mov     ecx, ds:41E030h
  004022B2: mov     [ecx+4], al
  004022B5: fld     qword ptr ds:411120h
  004022BB: sub     esp, 8
  004022BE: fstp    [esp+24h+X]; X
  004022C1: call    _sin
  004022C6: fstp    st
  004022C8: add     esp, 8
  004022CB: mov     edx, ds:47F808h
  004022D1: sub     edx, 46h ; 'F'
  004022D4: jnz     short loc_4022E9
  004022D6: movzx   eax, word ptr ds:4139E6h
  004022DD: xor     eax, 74h
  004022E0: mov     ecx, ds:41E030h
  004022E6: mov     [ecx+5], al
  004022E9: fld     qword ptr ds:411120h
  004022EF: sub     esp, 8
  004022F2: fstp    [esp+24h+X]; X
  004022F5: call    _sin
  004022FA: fstp    st
  004022FC: add     esp, 8
  004022FF: mov     edx, ds:47F808h
  00402305: sub     edx, 47h ; 'G'
  00402308: jnz     short loc_40231D
  0040230A: movzx   eax, word ptr ds:4139E6h
  00402311: xor     eax, 63h
  00402314: mov     ecx, ds:41E030h
  0040231A: mov     [ecx+6], al
  0040231D: fld     qword ptr ds:411120h
  00402323: sub     esp, 8
  00402326: fstp    [esp+24h+X]; X
  00402329: call    _sin
  0040232E: fstp    st
  00402330: add     esp, 8
  00402333: mov     edx, ds:47F808h
  00402339: sub     edx, 48h ; 'H'
  0040233C: jnz     short loc_402351
  0040233E: movzx   eax, word ptr ds:4139E6h
  00402345: xor     eax, 67h
  00402348: mov     ecx, ds:41E030h
  0040234E: mov     [ecx+7], al
  00402351: fld     qword ptr ds:411120h
  00402357: sub     esp, 8
  0040235A: fstp    [esp+24h+X]; X
  0040235D: call    _sin
  00402362: fstp    st
  00402364: add     esp, 8
  00402367: mov     edx, ds:47F808h
  0040236D: sub     edx, 49h ; 'I'
  00402370: jnz     short loc_402385
  00402372: movzx   eax, word ptr ds:4139E6h
  00402379: xor     eax, 62h
  0040237C: mov     ecx, ds:41E030h
  00402382: mov     [ecx+8], al
  00402385: fld     qword ptr ds:411120h
  0040238B: sub     esp, 8
  0040238E: fstp    [esp+24h+X]; X
  00402391: call    _sin
  00402396: fstp    st
  00402398: add     esp, 8
  0040239B: mov     edx, ds:47F808h
  004023A1: sub     edx, 4Ah ; 'J'
  004023A4: jnz     short loc_4023B9
  004023A6: movzx   eax, word ptr ds:4139E6h
  004023AD: xor     eax, 45h
  004023B0: mov     ecx, ds:41E030h
  004023B6: mov     [ecx+9], al
  004023B9: fld     qword ptr ds:411120h
  004023BF: sub     esp, 8
  004023C2: fstp    [esp+24h+X]; X
  004023C5: call    _sin
  004023CA: fstp    st
  004023CC: add     esp, 8
  004023CF: mov     edx, ds:47F808h
  004023D5: sub     edx, 4Bh ; 'K'
  004023D8: jnz     short loc_4023ED
  004023DA: movzx   eax, word ptr ds:4139E6h
  004023E1: xor     eax, 69h
  004023E4: mov     ecx, ds:41E030h
  004023EA: mov     [ecx+0Ah], al
  004023ED: fld     qword ptr ds:411120h
  004023F3: sub     esp, 8
  004023F6: fstp    [esp+24h+X]; X
  004023F9: call    _sin
  004023FE: fstp    st
  00402400: add     esp, 8
  00402403: mov     edx, ds:47F808h
  00402409: sub     edx, 4Ch ; 'L'
  0040240C: jnz     short loc_402421
  0040240E: movzx   eax, word ptr ds:4139E6h
  00402415: xor     eax, 68h
  00402418: mov     ecx, ds:41E030h
  0040241E: mov     [ecx+0Bh], al
  00402421: fld     qword ptr ds:411120h
  00402427: sub     esp, 8
  0040242A: fstp    [esp+24h+X]; X
  0040242D: call    _sin
  00402432: fstp    st
  00402434: add     esp, 8
  00402437: mov     edx, ds:47F808h
  0040243D: sub     edx, 4Dh ; 'M'
  00402440: jnz     short loc_402455
  00402442: movzx   eax, word ptr ds:4139E6h
  00402449: xor     eax, 72h
  0040244C: mov     ecx, ds:41E030h
  00402452: mov     [ecx+0Ch], al
  00402455: fld     qword ptr ds:411120h
  0040245B: sub     esp, 8
  0040245E: fstp    [esp+24h+X]; X
  00402461: call    _sin
  00402466: fstp    st
  00402468: add     esp, 8
  0040246B: mov     edx, ds:47F808h
  00402471: sub     edx, 4Eh ; 'N'
  00402474: jnz     short loc_402489
  00402476: movzx   eax, word ptr ds:4139E6h
  0040247D: xor     eax, 63h
  00402480: mov     ecx, ds:41E030h
  00402486: mov     [ecx+0Dh], al
  00402489: fld     qword ptr ds:411120h
  0040248F: sub     esp, 8
  00402492: fstp    [esp+24h+X]; X
  00402495: call    _sin
  0040249A: fstp    st
  0040249C: add     esp, 8
  0040249F: mov     edx, ds:47F808h
  004024A5: sub     edx, 4Fh ; 'O'
  004024A8: jnz     short loc_4024BD
  004024AA: movzx   eax, word ptr ds:4139E6h
  004024B1: xor     eax, 7Eh
  004024B4: mov     ecx, ds:41E030h
  004024BA: mov     [ecx+0Eh], al
  004024BD: fld     qword ptr ds:411120h
  004024C3: sub     esp, 8
  004024C6: fstp    [esp+24h+X]; X
  004024C9: call    _sin
  004024CE: fstp    st
  004024D0: add     esp, 8
  004024D3: mov     edx, ds:47F808h
  004024D9: sub     edx, 50h ; 'P'
  004024DC: jnz     short loc_4024F1
  004024DE: movzx   eax, word ptr ds:4139E6h
  004024E5: xor     eax, 72h
  004024E8: mov     ecx, ds:41E030h
  004024EE: mov     [ecx+0Fh], al
  004024F1: fld     qword ptr ds:411120h
  004024F7: sub     esp, 8
  004024FA: fstp    [esp+24h+X]; X
  004024FD: call    _sin
  00402502: fstp    st
  00402504: add     esp, 8
  00402507: mov     edx, ds:47F808h
  0040250D: sub     edx, 51h ; 'Q'
  00402510: jnz     short loc_402525
  00402512: movzx   eax, word ptr ds:4139E6h
  00402519: xor     eax, 6
  0040251C: mov     ecx, ds:41E030h
  00402522: mov     [ecx+10h], al
  00402525: fld     qword ptr ds:411120h
  0040252B: sub     esp, 8
  0040252E: fstp    [esp+24h+X]; X
  00402531: call    _sin
  00402536: fstp    st
  00402538: add     esp, 8
  0040253B: mov     edx, ds:47F808h
  00402541: sub     edx, 52h ; 'R'
  00402544: jnz     short loc_40255E
  00402546: mov     eax, ds:41E030h
  0040254B: push    eax; lpProcName
  0040254C: mov     ecx, ds:413B54h
  00402552: push    ecx; hModule
  00402553: call    dword ptr ds:411018h
  00402559: mov     ds:41E01Ch, eax
  0040255E: fld     qword ptr ds:411120h
  00402564: sub     esp, 8
  00402567: fstp    [esp+24h+X]; X
  0040256A: call    _sin
  0040256F: fstp    st
  00402571: add     esp, 8
  00402574: mov     edx, ds:47F808h
  0040257A: sub     edx, 53h ; 'S'
  0040257D: jnz     short loc_402591
  0040257F: movzx   eax, word ptr ds:4139E6h
  00402586: xor     eax, 41h
  00402589: mov     ecx, ds:41E030h
  0040258F: mov     [ecx], al
  00402591: fld     qword ptr ds:411120h
  00402597: sub     esp, 8
  0040259A: fstp    [esp+24h+X]; X
  0040259D: call    _sin
  004025A2: fstp    st
  004025A4: add     esp, 8
  004025A7: mov     edx, ds:47F808h
  004025AD: sub     edx, 54h ; 'T'
  004025B0: jnz     short loc_4025C5
  004025B2: movzx   eax, word ptr ds:4139E6h
  004025B9: xor     eax, 63h
  004025BC: mov     ecx, ds:41E030h
  004025C2: mov     [ecx+1], al
  004025C5: fld     qword ptr ds:411120h
  004025CB: sub     esp, 8
  004025CE: fstp    [esp+24h+X]; X
  004025D1: call    _sin
  004025D6: fstp    st
  004025D8: add     esp, 8
  004025DB: mov     edx, ds:47F808h
  004025E1: sub     edx, 55h ; 'U'
  004025E4: jnz     short loc_4025F9
  004025E6: movzx   eax, word ptr ds:4139E6h
  004025ED: xor     eax, 72h
  004025F0: mov     ecx, ds:41E030h
  004025F6: mov     [ecx+2], al
  004025F9: fld     qword ptr ds:411120h
  004025FF: sub     esp, 8
  00402602: fstp    [esp+24h+X]; X
  00402605: call    _sin
  0040260A: fstp    st
  0040260C: add     esp, 8
  0040260F: mov     edx, ds:47F808h
  00402615: sub     edx, 56h ; 'V'
  00402618: jnz     short loc_40262D
  0040261A: movzx   eax, word ptr ds:4139E6h
  00402621: xor     eax, 52h
  00402624: mov     ecx, ds:41E030h
  0040262A: mov     [ecx+3], al
  0040262D: fld     qword ptr ds:411120h
  00402633: sub     esp, 8
  00402636: fstp    [esp+24h+X]; X
  00402639: call    _sin
  0040263E: fstp    st
  00402640: add     esp, 8
  00402643: mov     edx, ds:47F808h
  00402649: sub     edx, 57h ; 'W'
  0040264C: jnz     short loc_402661
  0040264E: movzx   eax, word ptr ds:4139E6h
  00402655: xor     eax, 6Eh
  00402658: mov     ecx, ds:41E030h
  0040265E: mov     [ecx+4], al
  00402661: fld     qword ptr ds:411120h
  00402667: sub     esp, 8
  0040266A: fstp    [esp+24h+X]; X
  0040266D: call    _sin
  00402672: fstp    st
  00402674: add     esp, 8
  00402677: mov     edx, ds:47F808h
  0040267D: sub     edx, 58h ; 'X'
  00402680: jnz     short loc_402695
  00402682: movzx   eax, word ptr ds:4139E6h
  00402689: xor     eax, 74h
  0040268C: mov     ecx, ds:41E030h
  00402692: mov     [ecx+5], al
  00402695: fld     qword ptr ds:411120h
  0040269B: sub     esp, 8
  0040269E: fstp    [esp+24h+X]; X
  004026A1: call    _sin
  004026A6: fstp    st
  004026A8: add     esp, 8
  004026AB: mov     edx, ds:47F808h
  004026B1: sub     edx, 59h ; 'Y'
  004026B4: jnz     short loc_4026C9
  004026B6: movzx   eax, word ptr ds:4139E6h
  004026BD: xor     eax, 63h
  004026C0: mov     ecx, ds:41E030h
  004026C6: mov     [ecx+6], al
  004026C9: fld     qword ptr ds:411120h
  004026CF: sub     esp, 8
  004026D2: fstp    [esp+24h+X]; X
  004026D5: call    _sin
  004026DA: fstp    st
  004026DC: add     esp, 8
  004026DF: mov     edx, ds:47F808h
  004026E5: sub     edx, 5Ah ; 'Z'
  004026E8: jnz     short loc_4026FD
  004026EA: movzx   eax, word ptr ds:4139E6h
  004026F1: xor     eax, 67h
  004026F4: mov     ecx, ds:41E030h
  004026FA: mov     [ecx+7], al
  004026FD: fld     qword ptr ds:411120h
  00402703: sub     esp, 8
  00402706: fstp    [esp+24h+X]; X
  00402709: call    _sin
  0040270E: fstp    st
  00402710: add     esp, 8
  00402713: mov     edx, ds:47F808h
  00402719: sub     edx, 5Bh ; '['
  0040271C: jnz     short loc_402731
  0040271E: movzx   eax, word ptr ds:4139E6h
  00402725: xor     eax, 62h
  00402728: mov     ecx, ds:41E030h
  0040272E: mov     [ecx+8], al
  00402731: fld     qword ptr ds:411120h
  00402737: sub     esp, 8
  0040273A: fstp    [esp+24h+X]; X
  0040273D: call    _sin
  00402742: fstp    st
  00402744: add     esp, 8
  00402747: mov     edx, ds:47F808h
  0040274D: sub     edx, 5Ch ; '\'
  00402750: jnz     short loc_402765
  00402752: movzx   eax, word ptr ds:4139E6h
  00402759: xor     eax, 45h
  0040275C: mov     ecx, ds:41E030h
  00402762: mov     [ecx+9], al
  00402765: fld     qword ptr ds:411120h
  0040276B: sub     esp, 8
  0040276E: fstp    [esp+24h+X]; X
  00402771: call    _sin
  00402776: fstp    st
  00402778: add     esp, 8
  0040277B: mov     edx, ds:47F808h
  00402781: sub     edx, 5Dh ; ']'
  00402784: jnz     short loc_402799
  00402786: movzx   eax, word ptr ds:4139E6h
  0040278D: xor     eax, 69h
  00402790: mov     ecx, ds:41E030h
  00402796: mov     [ecx+0Ah], al
  00402799: fld     qword ptr ds:411120h
  0040279F: sub     esp, 8
  004027A2: fstp    [esp+24h+X]; X
  004027A5: call    _sin
  004027AA: fstp    st
  004027AC: add     esp, 8
  004027AF: mov     edx, ds:47F808h
  004027B5: sub     edx, 5Eh ; '^'
  004027B8: jnz     short loc_4027CD
  004027BA: movzx   eax, word ptr ds:4139E6h
  004027C1: xor     eax, 68h
  004027C4: mov     ecx, ds:41E030h
  004027CA: mov     [ecx+0Bh], al
  004027CD: fld     qword ptr ds:411120h
  004027D3: sub     esp, 8
  004027D6: fstp    [esp+24h+X]; X
  004027D9: call    _sin
  004027DE: fstp    st
  004027E0: add     esp, 8
  004027E3: mov     edx, ds:47F808h
  004027E9: sub     edx, 5Fh ; '_'
  004027EC: jnz     short loc_402801
  004027EE: movzx   eax, word ptr ds:4139E6h
  004027F5: xor     eax, 72h
  004027F8: mov     ecx, ds:41E030h
  004027FE: mov     [ecx+0Ch], al
  00402801: fld     qword ptr ds:411120h
  00402807: sub     esp, 8
  0040280A: fstp    [esp+24h+X]; X
  0040280D: call    _sin
  00402812: fstp    st
  00402814: add     esp, 8
  00402817: mov     edx, ds:47F808h
  0040281D: sub     edx, 60h ; '`'
  00402820: jnz     short loc_402835
  00402822: movzx   eax, word ptr ds:4139E6h
  00402829: xor     eax, 63h
  0040282C: mov     ecx, ds:41E030h
  00402832: mov     [ecx+0Dh], al
  00402835: fld     qword ptr ds:411120h
  0040283B: sub     esp, 8
  0040283E: fstp    [esp+24h+X]; X
  00402841: call    _sin
  00402846: fstp    st
  00402848: add     esp, 8
  0040284B: mov     edx, ds:47F808h
  00402851: sub     edx, 61h ; 'a'
  00402854: jnz     short loc_402869
  00402856: movzx   eax, word ptr ds:4139E6h
  0040285D: xor     eax, 7Eh
  00402860: mov     ecx, ds:41E030h
  00402866: mov     [ecx+0Eh], al
  00402869: fld     qword ptr ds:411120h
  0040286F: sub     esp, 8
  00402872: fstp    [esp+24h+X]; X
  00402875: call    _sin
  0040287A: fstp    st
  0040287C: add     esp, 8
  0040287F: mov     edx, ds:47F808h
  00402885: sub     edx, 62h ; 'b'
  00402888: jnz     short loc_40289D
  0040288A: movzx   eax, word ptr ds:4139E6h
  00402891: xor     eax, 72h
  00402894: mov     ecx, ds:41E030h
  0040289A: mov     [ecx+0Fh], al
  0040289D: fld     qword ptr ds:411120h
  004028A3: sub     esp, 8
  004028A6: fstp    [esp+24h+X]; X
  004028A9: call    _sin
  004028AE: fstp    st
  004028B0: add     esp, 8
  004028B3: mov     edx, ds:47F808h
  004028B9: sub     edx, 63h ; 'c'
  004028BC: jnz     short loc_4028D1
  004028BE: movzx   eax, word ptr ds:4139E6h
  004028C5: xor     eax, 6
  004028C8: mov     ecx, ds:41E030h
  004028CE: mov     [ecx+10h], al
  004028D1: fld     qword ptr ds:411120h
  004028D7: sub     esp, 8
  004028DA: fstp    [esp+24h+X]; X
  004028DD: call    _sin
  004028E2: fstp    st
  004028E4: add     esp, 8
  004028E7: mov     edx, ds:47F808h
  004028ED: sub     edx, 64h ; 'd'
  004028F0: jnz     short loc_402919
  004028F2: movzx   eax, word ptr ds:4139E4h
  004028F9: cmp     eax, 7E0h
  004028FE: jnz     short loc_402919
  00402900: mov     ecx, ds:41E030h
  00402906: push    ecx; lpProcName
  00402907: mov     edx, ds:413B54h
  0040290D: push    edx; hModule
  0040290E: call    dword ptr ds:411018h
  00402914: mov     ds:41E018h, eax
  00402919: fld     qword ptr ds:411120h
  0040291F: sub     esp, 8
  00402922: fstp    [esp+24h+X]; X
  00402925: call    _sin
  0040292A: fstp    st
  0040292C: add     esp, 8
  0040292F: mov     eax, ds:47F808h
  00402934: sub     eax, 65h ; 'e'
  00402937: jnz     short loc_40294B
  00402939: movzx   ecx, word ptr ds:4139E6h
  00402940: xor     ecx, 50h
  00402943: mov     edx, ds:41E030h
  00402949: mov     [edx], cl
  0040294B: fld     qword ptr ds:411120h
  00402951: sub     esp, 8
  00402954: fstp    [esp+24h+X]; X
  00402957: call    _sin
  0040295C: fstp    st
  0040295E: add     esp, 8
  00402961: mov     eax, ds:47F808h
  00402966: sub     eax, 66h ; 'f'
  00402969: jnz     short loc_40297E
  0040296B: movzx   ecx, word ptr ds:4139E6h
  00402972: xor     ecx, 6Fh
  00402975: mov     edx, ds:41E030h
  0040297B: mov     [edx+1], cl
  0040297E: fld     qword ptr ds:411120h
  00402984: sub     esp, 8
  00402987: fstp    [esp+24h+X]; X
  0040298A: call    _sin
  0040298F: fstp    st
  00402991: add     esp, 8
  00402994: mov     eax, ds:47F808h
  00402999: sub     eax, 67h ; 'g'
  0040299C: jnz     short loc_4029B1
  0040299E: movzx   ecx, word ptr ds:4139E6h
  004029A5: xor     ecx, 74h
  004029A8: mov     edx, ds:41E030h
  004029AE: mov     [edx+2], cl
  004029B1: fld     qword ptr ds:411120h
  004029B7: sub     esp, 8
  004029BA: fstp    [esp+24h+X]; X
  004029BD: call    _sin
  004029C2: fstp    st
  004029C4: add     esp, 8
  004029C7: mov     eax, ds:47F808h
  004029CC: sub     eax, 68h ; 'h'
  004029CF: jnz     short loc_4029E4
  004029D1: movzx   ecx, word ptr ds:4139E6h
  004029D8: xor     ecx, 72h
  004029DB: mov     edx, ds:41E030h
  004029E1: mov     [edx+3], cl
  004029E4: fld     qword ptr ds:411120h
  004029EA: sub     esp, 8
  004029ED: fstp    [esp+24h+X]; X
  004029F0: call    _sin
  004029F5: fstp    st
  004029F7: add     esp, 8
  004029FA: mov     eax, ds:47F808h
  004029FF: sub     eax, 69h ; 'i'
  00402A02: jnz     short loc_402A17
  00402A04: movzx   ecx, word ptr ds:4139E6h
  00402A0B: xor     ecx, 73h
  00402A0E: mov     edx, ds:41E030h
  00402A14: mov     [edx+4], cl
  00402A17: fld     qword ptr ds:411120h
  00402A1D: sub     esp, 8
  00402A20: fstp    [esp+24h+X]; X
  00402A23: call    _sin
  00402A28: fstp    st
  00402A2A: add     esp, 8
  00402A2D: mov     eax, ds:47F808h
  00402A32: sub     eax, 6Ah ; 'j'
  00402A35: jnz     short loc_402A4A
  00402A37: movzx   ecx, word ptr ds:4139E6h
  00402A3E: xor     ecx, 67h
  00402A41: mov     edx, ds:41E030h
  00402A47: mov     [edx+5], cl
  00402A4A: fld     qword ptr ds:411120h
  00402A50: sub     esp, 8
  00402A53: fstp    [esp+24h+X]; X
  00402A56: call    _sin
  00402A5B: fstp    st
  00402A5D: add     esp, 8
  00402A60: mov     eax, ds:47F808h
  00402A65: sub     eax, 6Bh ; 'k'
  00402A68: jnz     short loc_402A7D
  00402A6A: movzx   ecx, word ptr ds:4139E6h
  00402A71: xor     ecx, 6Ah
  00402A74: mov     edx, ds:41E030h
  00402A7A: mov     [edx+6], cl
  00402A7D: fld     qword ptr ds:411120h
  00402A83: sub     esp, 8
  00402A86: fstp    [esp+24h+X]; X
  00402A89: call    _sin
  00402A8E: fstp    st
  00402A90: add     esp, 8
  00402A93: mov     eax, ds:47F808h
  00402A98: sub     eax, 6Ch ; 'l'
  00402A9B: jnz     short loc_402AB0
  00402A9D: movzx   ecx, word ptr ds:4139E6h
  00402AA4: xor     ecx, 47h
  00402AA7: mov     edx, ds:41E030h
  00402AAD: mov     [edx+7], cl
  00402AB0: fld     qword ptr ds:411120h
  00402AB6: sub     esp, 8
  00402AB9: fstp    [esp+24h+X]; X
  00402ABC: call    _sin
  00402AC1: fstp    st
  00402AC3: add     esp, 8
  00402AC6: mov     eax, ds:47F808h
  00402ACB: sub     eax, 6Dh ; 'm'
  00402ACE: jnz     short loc_402AE3
  00402AD0: movzx   ecx, word ptr ds:4139E6h
  00402AD7: xor     ecx, 6Ah
  00402ADA: mov     edx, ds:41E030h
  00402AE0: mov     [edx+8], cl
  00402AE3: fld     qword ptr ds:411120h
  00402AE9: sub     esp, 8
  00402AEC: fstp    [esp+24h+X]; X
  00402AEF: call    _sin
  00402AF4: fstp    st
  00402AF6: add     esp, 8
  00402AF9: mov     eax, ds:47F808h
  00402AFE: sub     eax, 6Eh ; 'n'
  00402B01: jnz     short loc_402B16
  00402B03: movzx   ecx, word ptr ds:4139E6h
  00402B0A: xor     ecx, 6Ah
  00402B0D: mov     edx, ds:41E030h
  00402B13: mov     [edx+9], cl
  00402B16: fld     qword ptr ds:411120h
  00402B1C: sub     esp, 8
  00402B1F: fstp    [esp+24h+X]; X
  00402B22: call    _sin
  00402B27: fstp    st
  00402B29: add     esp, 8
  00402B2C: mov     eax, ds:47F808h
  00402B31: sub     eax, 6Fh ; 'o'
  00402B34: jnz     short loc_402B49
  00402B36: movzx   ecx, word ptr ds:4139E6h
  00402B3D: xor     ecx, 69h
  00402B40: mov     edx, ds:41E030h
  00402B46: mov     [edx+0Ah], cl
  00402B49: fld     qword ptr ds:411120h
  00402B4F: sub     esp, 8
  00402B52: fstp    [esp+24h+X]; X
  00402B55: call    _sin
  00402B5A: fstp    st
  00402B5C: add     esp, 8
  00402B5F: mov     eax, ds:47F808h
  00402B64: sub     eax, 70h ; 'p'
  00402B67: jnz     short loc_402B7C
  00402B69: movzx   ecx, word ptr ds:4139E6h
  00402B70: xor     ecx, 65h
  00402B73: mov     edx, ds:41E030h
  00402B79: mov     [edx+0Bh], cl
  00402B7C: fld     qword ptr ds:411120h
  00402B82: sub     esp, 8
  00402B85: fstp    [esp+24h+X]; X
  00402B88: call    _sin
  00402B8D: fstp    st
  00402B8F: add     esp, 8
  00402B92: mov     eax, ds:47F808h
  00402B97: sub     eax, 71h ; 'q'
  00402B9A: jnz     short loc_402BAF
  00402B9C: movzx   ecx, word ptr ds:4139E6h
  00402BA3: xor     ecx, 43h
  00402BA6: mov     edx, ds:41E030h
  00402BAC: mov     [edx+0Ch], cl
  00402BAF: fld     qword ptr ds:411120h
  00402BB5: sub     esp, 8
  00402BB8: fstp    [esp+24h+X]; X
  00402BBB: call    _sin
  00402BC0: fstp    st
  00402BC2: add     esp, 8
  00402BC5: mov     eax, ds:47F808h
  00402BCA: sub     eax, 72h ; 'r'
  00402BCD: jnz     short loc_402BE2
  00402BCF: movzx   ecx, word ptr ds:4139E6h
  00402BD6: xor     ecx, 7Eh
  00402BD9: mov     edx, ds:41E030h
  00402BDF: mov     [edx+0Dh], cl
  00402BE2: fld     qword ptr ds:411120h
  00402BE8: sub     esp, 8
  00402BEB: fstp    [esp+24h+X]; X
  00402BEE: call    _sin
  00402BF3: fstp    st
  00402BF5: add     esp, 8
  00402BF8: mov     eax, ds:47F808h
  00402BFD: sub     eax, 73h ; 's'
  00402C00: jnz     short loc_402C15
  00402C02: movzx   ecx, word ptr ds:4139E6h
  00402C09: xor     ecx, 6
  00402C0C: mov     edx, ds:41E030h
  00402C12: mov     [edx+0Eh], cl
  00402C15: fld     qword ptr ds:411120h
  00402C1B: sub     esp, 8
  00402C1E: fstp    [esp+24h+X]; X
  00402C21: call    _sin
  00402C26: fstp    st
  00402C28: add     esp, 8
  00402C2B: mov     eax, ds:47F808h
  00402C30: sub     eax, 74h ; 't'
  00402C33: jnz     short loc_402C5C
  00402C35: movzx   ecx, word ptr ds:4139E4h
  00402C3C: cmp     ecx, 7E0h
  00402C42: jnz     short loc_402C5C
  00402C44: mov     edx, ds:41E030h
  00402C4A: push    edx; lpProcName
  00402C4B: mov     eax, ds:413B54h
  00402C50: push    eax; hModule
  00402C51: call    dword ptr ds:411018h
  00402C57: mov     ds:413A08h, eax
  00402C5C: fld     qword ptr ds:411120h
  00402C62: sub     esp, 8
  00402C65: fstp    [esp+24h+X]; X
  00402C68: call    _sin
  00402C6D: fstp    st
  00402C6F: add     esp, 8
  00402C72: mov     ecx, ds:47F808h
  00402C78: sub     ecx, 75h ; 'u'
  00402C7B: jnz     short loc_402C86
  00402C7D: mov     edx, ds:41E030h
  00402C83: mov     byte ptr [edx], 47h ; 'G'
  00402C86: fld     qword ptr ds:411120h
  00402C8C: sub     esp, 8
  00402C8F: fstp    [esp+24h+X]; X
  00402C92: call    _sin
  00402C97: fstp    st
  00402C99: add     esp, 8
  00402C9C: mov     eax, ds:47F808h
  00402CA1: sub     eax, 76h ; 'v'
  00402CA4: jnz     short loc_402CB0
  00402CA6: mov     ecx, ds:41E030h
  00402CAC: mov     byte ptr [ecx+1], 65h ; 'e'
  00402CB0: fld     qword ptr ds:411120h
  00402CB6: sub     esp, 8
  00402CB9: fstp    [esp+24h+X]; X
  00402CBC: call    _sin
  00402CC1: fstp    st
  00402CC3: add     esp, 8
  00402CC6: mov     edx, ds:47F808h
  00402CCC: sub     edx, 77h ; 'w'
  00402CCF: jnz     short loc_402CDA
  00402CD1: mov     eax, ds:41E030h
  00402CD6: mov     byte ptr [eax+2], 74h ; 't'
  00402CDA: fld     qword ptr ds:411120h
  00402CE0: sub     esp, 8
  00402CE3: fstp    [esp+24h+X]; X
  00402CE6: call    _sin
  00402CEB: fstp    st
  00402CED: add     esp, 8
  00402CF0: mov     ecx, ds:47F808h
  00402CF6: sub     ecx, 78h ; 'x'
  00402CF9: jnz     short loc_402D05
  00402CFB: mov     edx, ds:41E030h
  00402D01: mov     byte ptr [edx+3], 43h ; 'C'
  00402D05: fld     qword ptr ds:411120h
  00402D0B: sub     esp, 8
  00402D0E: fstp    [esp+24h+X]; X
  00402D11: call    _sin
  00402D16: fstp    st
  00402D18: add     esp, 8
  00402D1B: mov     eax, ds:47F808h
  00402D20: sub     eax, 79h ; 'y'
  00402D23: jnz     short loc_402D2F
  00402D25: mov     ecx, ds:41E030h
  00402D2B: mov     byte ptr [ecx+4], 6Fh ; 'o'
  00402D2F: fld     qword ptr ds:411120h
  00402D35: sub     esp, 8
  00402D38: fstp    [esp+24h+X]; X
  00402D3B: call    _sin
  00402D40: fstp    st
  00402D42: add     esp, 8
  00402D45: mov     edx, ds:47F808h
  00402D4B: sub     edx, 7Ah ; 'z'
  00402D4E: jnz     short loc_402D59
  00402D50: mov     eax, ds:41E030h
  00402D55: mov     byte ptr [eax+5], 6Dh ; 'm'
  00402D59: fld     qword ptr ds:411120h
  00402D5F: sub     esp, 8
  00402D62: fstp    [esp+24h+X]; X
  00402D65: call    _sin
  00402D6A: fstp    st
  00402D6C: add     esp, 8
  00402D6F: mov     ecx, ds:47F808h
  00402D75: sub     ecx, 7Bh ; '{'
  00402D78: jnz     short loc_402D84
  00402D7A: mov     edx, ds:41E030h
  00402D80: mov     byte ptr [edx+6], 6Dh ; 'm'
  00402D84: fld     qword ptr ds:411120h
  00402D8A: sub     esp, 8
  00402D8D: fstp    [esp+24h+X]; X
  00402D90: call    _sin
  00402D95: fstp    st
  00402D97: add     esp, 8
  00402D9A: mov     eax, ds:47F808h
  00402D9F: sub     eax, 7Ch ; '|'
  00402DA2: jnz     short loc_402DAE
  00402DA4: mov     ecx, ds:41E030h
  00402DAA: mov     byte ptr [ecx+7], 61h ; 'a'
  00402DAE: fld     qword ptr ds:411120h
  00402DB4: sub     esp, 8
  00402DB7: fstp    [esp+24h+X]; X
  00402DBA: call    _sin
  00402DBF: fstp    st
  00402DC1: add     esp, 8
  00402DC4: mov     edx, ds:47F808h
  00402DCA: sub     edx, 7Dh ; '}'
  00402DCD: jnz     short loc_402DD8
  00402DCF: mov     eax, ds:41E030h
  00402DD4: mov     byte ptr [eax+8], 6Eh ; 'n'
  00402DD8: fld     qword ptr ds:411120h
  00402DDE: sub     esp, 8
  00402DE1: fstp    [esp+24h+X]; X
  00402DE4: call    _sin
  00402DE9: fstp    st
  00402DEB: add     esp, 8
  00402DEE: mov     ecx, ds:47F808h
  00402DF4: sub     ecx, 7Eh ; '~'
  00402DF7: jnz     short loc_402E03
  00402DF9: mov     edx, ds:41E030h
  00402DFF: mov     byte ptr [edx+9], 64h ; 'd'
  00402E03: fld     qword ptr ds:411120h
  00402E09: sub     esp, 8
  00402E0C: fstp    [esp+24h+X]; X
  00402E0F: call    _sin
  00402E14: fstp    st
  00402E16: add     esp, 8
  00402E19: mov     eax, ds:47F808h
  00402E1E: sub     eax, 7Fh
  00402E21: jnz     short loc_402E2D
  00402E23: mov     ecx, ds:41E030h
  00402E29: mov     byte ptr [ecx+0Ah], 4Ch ; 'L'
  00402E2D: fld     qword ptr ds:411120h
  00402E33: sub     esp, 8
  00402E36: fstp    [esp+24h+X]; X
  00402E39: call    _sin
  00402E3E: fstp    st
  00402E40: add     esp, 8
  00402E43: mov     edx, ds:47F808h
  00402E49: sub     edx, 80h ; '€'
  00402E4F: jnz     short loc_402E5A
  00402E51: mov     eax, ds:41E030h
  00402E56: mov     byte ptr [eax+0Bh], 69h ; 'i'
  00402E5A: fld     qword ptr ds:411120h
  00402E60: sub     esp, 8
  00402E63: fstp    [esp+24h+X]; X
  00402E66: call    _sin
  00402E6B: fstp    st
  00402E6D: add     esp, 8
  00402E70: mov     ecx, ds:47F808h
  00402E76: sub     ecx, 81h
  00402E7C: jnz     short loc_402E88
  00402E7E: mov     edx, ds:41E030h
  00402E84: mov     byte ptr [edx+0Ch], 6Eh ; 'n'
  00402E88: fld     qword ptr ds:411120h
  00402E8E: sub     esp, 8
  00402E91: fstp    [esp+24h+X]; X
  00402E94: call    _sin
  00402E99: fstp    st
  00402E9B: add     esp, 8
  00402E9E: mov     eax, ds:47F808h
  00402EA3: sub     eax, 82h ; '‚'
  00402EA8: jnz     short loc_402EB4
  00402EAA: mov     ecx, ds:41E030h
  00402EB0: mov     byte ptr [ecx+0Dh], 65h ; 'e'
  00402EB4: fld     qword ptr ds:411120h
  00402EBA: sub     esp, 8
  00402EBD: fstp    [esp+24h+X]; X
  00402EC0: call    _sin
  00402EC5: fstp    st
  00402EC7: add     esp, 8
  00402ECA: mov     edx, ds:47F808h
  00402ED0: sub     edx, 83h ; 'ƒ'
  00402ED6: jnz     short loc_402EE1
  00402ED8: mov     eax, ds:41E030h
  00402EDD: mov     byte ptr [eax+0Eh], 41h ; 'A'
  00402EE1: fld     qword ptr ds:411120h
  00402EE7: sub     esp, 8
  00402EEA: fstp    [esp+24h+X]; X
  00402EED: call    _sin
  00402EF2: fstp    st
  00402EF4: add     esp, 8
  00402EF7: mov     ecx, ds:47F808h
  00402EFD: sub     ecx, 84h ; '„'
  00402F03: jnz     short loc_402F0F
  00402F05: mov     edx, ds:41E030h
  00402F0B: mov     byte ptr [edx+0Fh], 0
  00402F0F: fld     qword ptr ds:411120h
  00402F15: sub     esp, 8
  00402F18: fstp    [esp+24h+X]; X
  00402F1B: call    _sin
  00402F20: fstp    st
  00402F22: add     esp, 8
  00402F25: mov     eax, ds:47F808h
  00402F2A: sub     eax, 85h ; '…'
  00402F2F: jnz     short loc_402F58
  00402F31: movzx   ecx, word ptr ds:4139E4h
  00402F38: cmp     ecx, 7E0h
  00402F3E: jnz     short loc_402F58
  00402F40: mov     edx, ds:41E030h
  00402F46: push    edx; lpProcName
  00402F47: mov     eax, ds:413B54h
  00402F4C: push    eax; hModule
  00402F4D: call    dword ptr ds:411018h
  00402F53: mov     ds:41E00Ch, eax
  00402F58: fld     qword ptr ds:411120h
  00402F5E: sub     esp, 8
  00402F61: fstp    [esp+24h+X]; X
  00402F64: call    _sin
  00402F69: fstp    st
  00402F6B: add     esp, 8
  00402F6E: mov     ecx, ds:47F808h
  00402F74: sub     ecx, 86h ; '†'
  00402F7A: jnz     short loc_402F85
  00402F7C: mov     edx, ds:41E030h
  00402F82: mov     byte ptr [edx], 5Fh ; '_'
  00402F85: fld     qword ptr ds:411120h
  00402F8B: sub     esp, 8
  00402F8E: fstp    [esp+24h+X]; X
  00402F91: call    _sin
  00402F96: fstp    st
  00402F98: add     esp, 8
  00402F9B: mov     eax, ds:47F808h
  00402FA0: sub     eax, 87h ; '‡'
  00402FA5: jnz     short loc_402FB1
  00402FA7: mov     ecx, ds:41E030h
  00402FAD: mov     byte ptr [ecx+1], 6Ch ; 'l'
  00402FB1: fld     qword ptr ds:411120h
  00402FB7: sub     esp, 8
  00402FBA: fstp    [esp+24h+X]; X
  00402FBD: call    _sin
  00402FC2: fstp    st
  00402FC4: add     esp, 8
  00402FC7: mov     edx, ds:47F808h
  00402FCD: sub     edx, 88h ; 'ˆ'
  00402FD3: jnz     short loc_402FDE
  00402FD5: mov     eax, ds:41E030h
  00402FDA: mov     byte ptr [eax+2], 72h ; 'r'
  00402FDE: fld     qword ptr ds:411120h
  00402FE4: sub     esp, 8
  00402FE7: fstp    [esp+24h+X]; X
  00402FEA: call    _sin
  00402FEF: fstp    st
  00402FF1: add     esp, 8
  00402FF4: mov     ecx, ds:47F808h
  00402FFA: sub     ecx, 89h ; '‰'
  00403000: jnz     short loc_40300C
  00403002: mov     edx, ds:41E030h
  00403008: mov     byte ptr [edx+3], 65h ; 'e'
  0040300C: fld     qword ptr ds:411120h
  00403012: sub     esp, 8
  00403015: fstp    [esp+24h+X]; X
  00403018: call    _sin
  0040301D: fstp    st
  0040301F: add     esp, 8
  00403022: mov     eax, ds:47F808h
  00403027: sub     eax, 8Ah ; 'Š'
  0040302C: jnz     short loc_403038
  0040302E: mov     ecx, ds:41E030h
  00403034: mov     byte ptr [ecx+4], 61h ; 'a'
  00403038: fld     qword ptr ds:411120h
  0040303E: sub     esp, 8
  00403041: fstp    [esp+24h+X]; X
  00403044: call    _sin
  00403049: fstp    st
  0040304B: add     esp, 8
  0040304E: mov     edx, ds:47F808h
  00403054: sub     edx, 8Bh ; '‹'
  0040305A: jnz     short loc_403065
  0040305C: mov     eax, ds:41E030h
  00403061: mov     byte ptr [eax+5], 64h ; 'd'
  00403065: fld     qword ptr ds:411120h
  0040306B: sub     esp, 8
  0040306E: fstp    [esp+24h+X]; X
  00403071: call    _sin
  00403076: fstp    st
  00403078: add     esp, 8
  0040307B: mov     ecx, ds:47F808h
  00403081: sub     ecx, 8Ch ; 'Œ'
  00403087: jnz     short loc_403093
  00403089: mov     edx, ds:41E030h
  0040308F: mov     byte ptr [edx+6], 0
  00403093: fld     qword ptr ds:411120h
  00403099: sub     esp, 8
  0040309C: fstp    [esp+24h+X]; X
  0040309F: call    _sin
  004030A4: fstp    st
  004030A6: add     esp, 8
  004030A9: mov     eax, ds:47F808h
  004030AE: sub     eax, 8Dh
  004030B3: jnz     short loc_4030DC
  004030B5: movzx   ecx, word ptr ds:4139E4h
  004030BC: cmp     ecx, 7E0h
  004030C2: jnz     short loc_4030DC
  004030C4: mov     edx, ds:41E030h
  004030CA: push    edx; lpProcName
  004030CB: mov     eax, ds:413B54h
  004030D0: push    eax; hModule
  004030D1: call    dword ptr ds:411018h
  004030D7: mov     ds:413A04h, eax
  004030DC: fld     qword ptr ds:411120h
  004030E2: sub     esp, 8
  004030E5: fstp    [esp+24h+X]; X
  004030E8: call    _sin
  004030ED: fstp    st
  004030EF: add     esp, 8
  004030F2: mov     ecx, ds:47F808h
  004030F8: sub     ecx, 8Eh ; 'Ž'
  004030FE: jnz     short loc_403109
  00403100: mov     edx, ds:41E030h
  00403106: mov     byte ptr [edx], 5Fh ; '_'
  00403109: fld     qword ptr ds:411120h
  0040310F: sub     esp, 8
  00403112: fstp    [esp+24h+X]; X
  00403115: call    _sin
  0040311A: fstp    st
  0040311C: add     esp, 8
  0040311F: mov     eax, ds:47F808h
  00403124: sub     eax, 8Fh
  00403129: jnz     short loc_403135
  0040312B: mov     ecx, ds:41E030h
  00403131: mov     byte ptr [ecx+1], 6Ch ; 'l'
  00403135: fld     qword ptr ds:411120h
  0040313B: sub     esp, 8
  0040313E: fstp    [esp+24h+X]; X
  00403141: call    _sin
  00403146: fstp    st
  00403148: add     esp, 8
  0040314B: mov     edx, ds:47F808h
  00403151: sub     edx, 90h
  00403157: jnz     short loc_403162
  00403159: mov     eax, ds:41E030h
  0040315E: mov     byte ptr [eax+2], 6Fh ; 'o'
  00403162: fld     qword ptr ds:411120h
  00403168: sub     esp, 8
  0040316B: fstp    [esp+24h+X]; X
  0040316E: call    _sin
  00403173: fstp    st
  00403175: add     esp, 8
  00403178: mov     ecx, ds:47F808h
  0040317E: sub     ecx, 91h ; '‘'
  00403184: jnz     short loc_403190
  00403186: mov     edx, ds:41E030h
  0040318C: mov     byte ptr [edx+3], 70h ; 'p'
  00403190: fld     qword ptr ds:411120h
  00403196: sub     esp, 8
  00403199: fstp    [esp+24h+X]; X
  0040319C: call    _sin
  004031A1: fstp    st
  004031A3: add     esp, 8
  004031A6: mov     eax, ds:47F808h
  004031AB: sub     eax, 92h ; '’'
  004031B0: jnz     short loc_4031BC
  004031B2: mov     ecx, ds:41E030h
  004031B8: mov     byte ptr [ecx+4], 65h ; 'e'
  004031BC: fld     qword ptr ds:411120h
  004031C2: sub     esp, 8
  004031C5: fstp    [esp+24h+X]; X
  004031C8: call    _sin
  004031CD: fstp    st
  004031CF: add     esp, 8
  004031D2: mov     edx, ds:47F808h
  004031D8: sub     edx, 93h ; '“'
  004031DE: jnz     short loc_4031E9
  004031E0: mov     eax, ds:41E030h
  004031E5: mov     byte ptr [eax+5], 6Eh ; 'n'
  004031E9: fld     qword ptr ds:411120h
  004031EF: sub     esp, 8
  004031F2: fstp    [esp+24h+X]; X
  004031F5: call    _sin
  004031FA: fstp    st
  004031FC: add     esp, 8
  004031FF: mov     ecx, ds:47F808h
  00403205: sub     ecx, 94h ; '”'
  0040320B: jnz     short loc_403217
  0040320D: mov     edx, ds:41E030h
  00403213: mov     byte ptr [edx+6], 0
  00403217: fld     qword ptr ds:411120h
  0040321D: sub     esp, 8
  00403220: fstp    [esp+24h+X]; X
  00403223: call    _sin
  00403228: fstp    st
  0040322A: add     esp, 8
  0040322D: mov     eax, ds:47F808h
  00403232: sub     eax, 95h ; '•'
  00403237: jnz     short loc_403260
  00403239: movzx   ecx, word ptr ds:4139E4h
  00403240: cmp     ecx, 7E0h
  00403246: jnz     short loc_403260
  00403248: mov     edx, ds:41E030h
  0040324E: push    edx; lpProcName
  0040324F: mov     eax, ds:413B54h
  00403254: push    eax; hModule
  00403255: call    dword ptr ds:411018h
  0040325B: mov     ds:41E014h, eax
  00403260: fld     qword ptr ds:411120h
  00403266: sub     esp, 8
  00403269: fstp    [esp+24h+X]; X
  0040326C: call    _sin
  00403271: fstp    st
  00403273: add     esp, 8
  00403276: mov     ecx, ds:47F808h
  0040327C: sub     ecx, 96h ; '–'
  00403282: jnz     short loc_403295
  00403284: movzx   edx, word ptr ds:4139E6h
  0040328B: xor     edx, 41h
  0040328E: mov     eax, ds:41E030h
  00403293: mov     [eax], dl
  00403295: fld     qword ptr ds:411120h
  0040329B: sub     esp, 8
  0040329E: fstp    [esp+24h+X]; X
  004032A1: call    _sin
  004032A6: fstp    st
  004032A8: add     esp, 8
  004032AB: mov     ecx, ds:47F808h
  004032B1: sub     ecx, 97h ; '—'
  004032B7: jnz     short loc_4032CB
  004032B9: movzx   edx, word ptr ds:4139E6h
  004032C0: xor     edx, 63h
  004032C3: mov     eax, ds:41E030h
  004032C8: mov     [eax+1], dl
  004032CB: fld     qword ptr ds:411120h
  004032D1: sub     esp, 8
  004032D4: fstp    [esp+24h+X]; X
  004032D7: call    _sin
  004032DC: fstp    st
  004032DE: add     esp, 8
  004032E1: mov     ecx, ds:47F808h
  004032E7: sub     ecx, 98h ; '˜'
  004032ED: jnz     short loc_403301
  004032EF: movzx   edx, word ptr ds:4139E6h
  004032F6: xor     edx, 72h
  004032F9: mov     eax, ds:41E030h
  004032FE: mov     [eax+2], dl
  00403301: fld     qword ptr ds:411120h
  00403307: sub     esp, 8
  0040330A: fstp    [esp+24h+X]; X
  0040330D: call    _sin
  00403312: fstp    st
  00403314: add     esp, 8
  00403317: mov     ecx, ds:47F808h
  0040331D: sub     ecx, 99h ; '™'
  00403323: jnz     short loc_403337
  00403325: movzx   edx, word ptr ds:4139E6h
  0040332C: xor     edx, 4Bh
  0040332F: mov     eax, ds:41E030h
  00403334: mov     [eax+3], dl
  00403337: fld     qword ptr ds:411120h
  0040333D: sub     esp, 8
  00403340: fstp    [esp+24h+X]; X
  00403343: call    _sin
  00403348: fstp    st
  0040334A: add     esp, 8
  0040334D: mov     ecx, ds:47F808h
  00403353: sub     ecx, 9Ah ; 'š'
  00403359: jnz     short loc_40336D
  0040335B: movzx   edx, word ptr ds:4139E6h
  00403362: xor     edx, 69h
  00403365: mov     eax, ds:41E030h
  0040336A: mov     [eax+4], dl
  0040336D: fld     qword ptr ds:411120h
  00403373: sub     esp, 8
  00403376: fstp    [esp+24h+X]; X
  00403379: call    _sin
  0040337E: fstp    st
  00403380: add     esp, 8
  00403383: mov     ecx, ds:47F808h
  00403389: sub     ecx, 9Bh ; '›'
  0040338F: jnz     short loc_4033A3
  00403391: movzx   edx, word ptr ds:4139E6h
  00403398: xor     edx, 62h
  0040339B: mov     eax, ds:41E030h
  004033A0: mov     [eax+5], dl
  004033A3: fld     qword ptr ds:411120h
  004033A9: sub     esp, 8
  004033AC: fstp    [esp+24h+X]; X
  004033AF: call    _sin
  004033B4: fstp    st
  004033B6: add     esp, 8
  004033B9: mov     ecx, ds:47F808h
  004033BF: sub     ecx, 9Ch ; 'œ'
  004033C5: jnz     short loc_4033D9
  004033C7: movzx   edx, word ptr ds:4139E6h
  004033CE: xor     edx, 73h
  004033D1: mov     eax, ds:41E030h
  004033D6: mov     [eax+6], dl
  004033D9: fld     qword ptr ds:411120h
  004033DF: sub     esp, 8
  004033E2: fstp    [esp+24h+X]; X
  004033E5: call    _sin
  004033EA: fstp    st
  004033EC: add     esp, 8
  004033EF: mov     ecx, ds:47F808h
  004033F5: sub     ecx, 9Dh
  004033FB: jnz     short loc_40340F
  004033FD: movzx   edx, word ptr ds:4139E6h
  00403404: xor     edx, 6Ah
  00403407: mov     eax, ds:41E030h
  0040340C: mov     [eax+7], dl
  0040340F: fld     qword ptr ds:411120h
  00403415: sub     esp, 8
  00403418: fstp    [esp+24h+X]; X
  0040341B: call    _sin
  00403420: fstp    st
  00403422: add     esp, 8
  00403425: mov     ecx, ds:47F808h
  0040342B: sub     ecx, 11Bh
  00403431: jnz     short loc_403445
  00403433: push    413B70h
  00403438: mov     edx, ds:413E88h
  0040343E: push    edx
  0040343F: call    dword ptr ds:41E018h
  00403445: fld     qword ptr ds:411120h
  0040344B: sub     esp, 8
  0040344E: fstp    [esp+24h+X]; X
  00403451: call    _sin
  00403456: fstp    st
  00403458: add     esp, 8
  0040345B: mov     eax, ds:47F808h
  00403460: sub     eax, 110h
  00403465: jnz     short loc_403491
  00403467: movzx   ecx, word ptr ds:4139E6h
  0040346E: cmp     ecx, 6
  00403471: jnz     short loc_403491
  00403473: movzx   edx, word ptr ds:41DE9Eh
  0040347A: imul    edx, 28h ; '('
  0040347D: push    edx; Size
  0040347E: mov     eax, ds:41DFE8h
  00403483: push    eax; Src
  00403484: push    413E98h; void *
  00403489: call    _memcpy
  0040348E: add     esp, 0Ch
  00403491: fld     qword ptr ds:411120h
  00403497: sub     esp, 8
  0040349A: fstp    [esp+24h+X]; X
  0040349D: call    _sin
  004034A2: fstp    st
  004034A4: add     esp, 8
  004034A7: mov     ecx, ds:47F808h
  004034AD: sub     ecx, 9Eh ; 'ž'
  004034B3: jnz     short loc_4034BF
  004034B5: mov     edx, ds:41E030h
  004034BB: mov     byte ptr [edx+8], 65h ; 'e'
  004034BF: fld     qword ptr ds:411120h
  004034C5: sub     esp, 8
  004034C8: fstp    [esp+24h+X]; X
  004034CB: call    _sin
  004034D0: fstp    st
  004034D2: add     esp, 8
  004034D5: mov     eax, ds:47F808h
  004034DA: sub     eax, 9Fh ; 'Ÿ'
  004034DF: jnz     short loc_4034EB
  004034E1: mov     ecx, ds:41E030h
  004034E7: mov     byte ptr [ecx+9], 46h ; 'F'
  004034EB: fld     qword ptr ds:411120h
  004034F1: sub     esp, 8
  004034F4: fstp    [esp+24h+X]; X
  004034F7: call    _sin
  004034FC: fstp    st
  004034FE: add     esp, 8
  00403501: mov     edx, ds:47F808h
  00403507: sub     edx, 0A0h ; ' '
  0040350D: jnz     short loc_403518
  0040350F: mov     eax, ds:41E030h
  00403514: mov     byte ptr [eax+0Ah], 69h ; 'i'
  00403518: fld     qword ptr ds:411120h
  0040351E: sub     esp, 8
  00403521: fstp    [esp+24h+X]; X
  00403524: call    _sin
  00403529: fstp    st
  0040352B: add     esp, 8
  0040352E: mov     ecx, ds:47F808h
  00403534: sub     ecx, 0A1h ; '¡'
  0040353A: jnz     short loc_403546
  0040353C: mov     edx, ds:41E030h
  00403542: mov     byte ptr [edx+0Bh], 6Ch ; 'l'
  00403546: fld     qword ptr ds:411120h
  0040354C: sub     esp, 8
  0040354F: fstp    [esp+24h+X]; X
  00403552: call    _sin
  00403557: fstp    st
  00403559: add     esp, 8
  0040355C: mov     eax, ds:47F808h
  00403561: sub     eax, 0A2h ; '¢'
  00403566: jnz     short loc_403572
  00403568: mov     ecx, ds:41E030h
  0040356E: mov     byte ptr [ecx+0Ch], 65h ; 'e'
  00403572: fld     qword ptr ds:411120h
  00403578: sub     esp, 8
  0040357B: fstp    [esp+24h+X]; X
  0040357E: call    _sin
  00403583: fstp    st
  00403585: add     esp, 8
  00403588: mov     edx, ds:47F808h
  0040358E: sub     edx, 0A3h ; '£'
  00403594: jnz     short loc_40359F
  00403596: mov     eax, ds:41E030h
  0040359B: mov     byte ptr [eax+0Dh], 4Eh ; 'N'
  0040359F: fld     qword ptr ds:411120h
  004035A5: sub     esp, 8
  004035A8: fstp    [esp+24h+X]; X
  004035AB: call    _sin
  004035B0: fstp    st
  004035B2: add     esp, 8
  004035B5: mov     ecx, ds:47F808h
  004035BB: sub     ecx, 0A4h ; '¤'
  004035C1: jnz     short loc_4035CD
  004035C3: mov     edx, ds:41E030h
  004035C9: mov     byte ptr [edx+0Eh], 61h ; 'a'
  004035CD: fld     qword ptr ds:411120h
  004035D3: sub     esp, 8
  004035D6: fstp    [esp+24h+X]; X
  004035D9: call    _sin
  004035DE: fstp    st
  004035E0: add     esp, 8
  004035E3: mov     eax, ds:47F808h
  004035E8: sub     eax, 0A5h ; '¥'
  004035ED: jnz     short loc_4035F9
  004035EF: mov     ecx, ds:41E030h
  004035F5: mov     byte ptr [ecx+0Fh], 6Dh ; 'm'
  004035F9: fld     qword ptr ds:411120h
  004035FF: sub     esp, 8
  00403602: fstp    [esp+24h+X]; X
  00403605: call    _sin
  0040360A: fstp    st
  0040360C: add     esp, 8
  0040360F: mov     edx, ds:47F808h
  00403615: sub     edx, 0A6h ; '¦'
  0040361B: jnz     short loc_403626
  0040361D: mov     eax, ds:41E030h
  00403622: mov     byte ptr [eax+10h], 65h ; 'e'
  00403626: fld     qword ptr ds:411120h
  0040362C: sub     esp, 8
  0040362F: fstp    [esp+24h+X]; X
  00403632: call    _sin
  00403637: fstp    st
  00403639: add     esp, 8
  0040363C: mov     ecx, ds:47F808h
  00403642: sub     ecx, 0A7h ; '§'
  00403648: jnz     short loc_403654
  0040364A: mov     edx, ds:41E030h
  00403650: mov     byte ptr [edx+11h], 41h ; 'A'
  00403654: fld     qword ptr ds:411120h
  0040365A: sub     esp, 8
  0040365D: fstp    [esp+24h+X]; X
  00403660: call    _sin
  00403665: fstp    st
  00403667: add     esp, 8
  0040366A: mov     eax, ds:47F808h
  0040366F: sub     eax, 0A8h ; '¨'
  00403674: jnz     short loc_403680
  00403676: mov     ecx, ds:41E030h
  0040367C: mov     byte ptr [ecx+12h], 0
  00403680: fld     qword ptr ds:411120h
  00403686: sub     esp, 8
  00403689: fstp    [esp+24h+X]; X
  0040368C: call    _sin
  00403691: fstp    st
  00403693: add     esp, 8
  00403696: mov     edx, ds:47F808h
  0040369C: sub     edx, 0A9h ; '©'
  004036A2: jnz     short loc_4036CB
  004036A4: movzx   eax, word ptr ds:4139E4h
  004036AB: cmp     eax, 7E0h
  004036B0: jnz     short loc_4036CB
  004036B2: mov     ecx, ds:41E030h
  004036B8: push    ecx; lpProcName
  004036B9: mov     edx, ds:413B54h
  004036BF: push    edx; hModule
  004036C0: call    dword ptr ds:411018h
  004036C6: mov     ds:41E004h, eax
  004036CB: fld     qword ptr ds:411120h
  004036D1: sub     esp, 8
  004036D4: fstp    [esp+24h+X]; X
  004036D7: call    _sin
  004036DC: fstp    st
  004036DE: add     esp, 8
  004036E1: mov     eax, ds:47F808h
  004036E6: sub     eax, 0AAh ; 'ª'
  004036EB: jnz     short loc_403701
  004036ED: push    104h
  004036F2: mov     ecx, ds:413B64h
  004036F8: push    ecx
  004036F9: push    0
  004036FB: call    dword ptr ds:41E004h
  00403701: fld     qword ptr ds:411120h
  00403707: sub     esp, 8
  0040370A: fstp    [esp+24h+X]; X
  0040370D: call    _sin
  00403712: fstp    st
  00403714: add     esp, 8
  00403717: mov     edx, ds:47F808h
  0040371D: sub     edx, 11Ah
  00403723: jnz     short loc_403747
  00403725: movzx   eax, word ptr ds:4139E6h
  0040372C: xor     eax, 10007h
  00403731: xor     eax, 6
  00403734: movzx   ecx, word ptr ds:4139E4h
  0040373B: xor     eax, ecx
  0040373D: xor     eax, 7E1h
  00403742: mov     ds:413B70h, eax
  00403747: fld     qword ptr ds:411120h
  0040374D: sub     esp, 8
  00403750: fstp    [esp+24h+X]; X
  00403753: call    _sin
  00403758: fstp    st
  0040375A: add     esp, 8
  0040375D: mov     edx, ds:47F808h
  00403763: sub     edx, 0ABh ; '«'
  00403769: jnz     short loc_40377D
  0040376B: movzx   eax, word ptr ds:4139E6h
  00403772: xor     eax, 48h
  00403775: mov     ecx, ds:41E030h
  0040377B: mov     [ecx], al
  0040377D: fld     qword ptr ds:411120h
  00403783: sub     esp, 8
  00403786: fstp    [esp+24h+X]; X
  00403789: call    _sin
  0040378E: fstp    st
  00403790: add     esp, 8
  00403793: mov     edx, ds:47F808h
  00403799: sub     edx, 0ACh ; '¬'
  0040379F: jnz     short loc_4037B4
  004037A1: movzx   eax, word ptr ds:4139E6h
  004037A8: xor     eax, 72h
  004037AB: mov     ecx, ds:41E030h
  004037B1: mov     [ecx+1], al
  004037B4: fld     qword ptr ds:411120h
  004037BA: sub     esp, 8
  004037BD: fstp    [esp+24h+X]; X
  004037C0: call    _sin
  004037C5: fstp    st
  004037C7: add     esp, 8
  004037CA: mov     edx, ds:47F808h
  004037D0: sub     edx, 0ADh ; '­'
  004037D6: jnz     short loc_4037EB
  004037D8: movzx   eax, word ptr ds:4139E6h
  004037DF: xor     eax, 53h
  004037E2: mov     ecx, ds:41E030h
  004037E8: mov     [ecx+2], al
  004037EB: fld     qword ptr ds:411120h
  004037F1: sub     esp, 8
  004037F4: fstp    [esp+24h+X]; X
  004037F7: call    _sin
  004037FC: fstp    st
  004037FE: add     esp, 8
  00403801: mov     edx, ds:47F808h
  00403807: sub     edx, 0AEh ; '®'
  0040380D: jnz     short loc_403822
  0040380F: movzx   eax, word ptr ds:4139E6h
  00403816: xor     eax, 68h
  00403819: mov     ecx, ds:41E030h
  0040381F: mov     [ecx+3], al
  00403822: fld     qword ptr ds:411120h
  00403828: sub     esp, 8
  0040382B: fstp    [esp+24h+X]; X
  0040382E: call    _sin
  00403833: fstp    st
  00403835: add     esp, 8
  00403838: mov     edx, ds:47F808h
  0040383E: sub     edx, 0AFh ; '¯'
  00403844: jnz     short loc_403859
  00403846: movzx   eax, word ptr ds:4139E6h
  0040384D: xor     eax, 6Bh
  00403850: mov     ecx, ds:41E030h
  00403856: mov     [ecx+4], al
  00403859: fld     qword ptr ds:411120h
  0040385F: sub     esp, 8
  00403862: fstp    [esp+24h+X]; X
  00403865: call    _sin
  0040386A: fstp    st
  0040386C: add     esp, 8
  0040386F: mov     edx, ds:47F808h
  00403875: sub     edx, 0B0h ; '°'
  0040387B: jnz     short loc_403890
  0040387D: movzx   eax, word ptr ds:4139E6h
  00403884: xor     eax, 67h
  00403887: mov     ecx, ds:41E030h
  0040388D: mov     [ecx+5], al
  00403890: fld     qword ptr ds:411120h
  00403896: sub     esp, 8
  00403899: fstp    [esp+24h+X]; X
  0040389C: call    _sin
  004038A1: fstp    st
  004038A3: add     esp, 8
  004038A6: mov     edx, ds:47F808h
  004038AC: sub     edx, 0B1h ; '±'
  004038B2: jnz     short loc_4038C7
  004038B4: movzx   eax, word ptr ds:4139E6h
  004038BB: xor     eax, 76h
  004038BE: mov     ecx, ds:41E030h
  004038C4: mov     [ecx+6], al
  004038C7: fld     qword ptr ds:411120h
  004038CD: sub     esp, 8
  004038D0: fstp    [esp+24h+X]; X
  004038D3: call    _sin
  004038D8: fstp    st
  004038DA: add     esp, 8
  004038DD: mov     edx, ds:47F808h
  004038E3: sub     edx, 0B2h ; '²'
  004038E9: jnz     short loc_4038F4
  004038EB: mov     eax, ds:41E030h
  004038F0: mov     byte ptr [eax+7], 56h ; 'V'
  004038F4: fld     qword ptr ds:411120h
  004038FA: sub     esp, 8
  004038FD: fstp    [esp+24h+X]; X
  00403900: call    _sin
  00403905: fstp    st
  00403907: add     esp, 8
  0040390A: mov     ecx, ds:47F808h
  00403910: sub     ecx, 0B3h ; '³'
  00403916: jnz     short loc_403922
  00403918: mov     edx, ds:41E030h
  0040391E: mov     byte ptr [edx+8], 69h ; 'i'
  00403922: fld     qword ptr ds:411120h
  00403928: sub     esp, 8
  0040392B: fstp    [esp+24h+X]; X
  0040392E: call    _sin
  00403933: fstp    st
  00403935: add     esp, 8
  00403938: mov     eax, ds:47F808h
  0040393D: sub     eax, 0B4h ; '´'
  00403942: jnz     short loc_40394E
  00403944: mov     ecx, ds:41E030h
  0040394A: mov     byte ptr [ecx+9], 65h ; 'e'
  0040394E: fld     qword ptr ds:411120h
  00403954: sub     esp, 8
  00403957: fstp    [esp+24h+X]; X
  0040395A: call    _sin
  0040395F: fstp    st
  00403961: add     esp, 8
  00403964: mov     edx, ds:47F808h
  0040396A: sub     edx, 0B5h ; 'µ'
  00403970: jnz     short loc_40397B
  00403972: mov     eax, ds:41E030h
  00403977: mov     byte ptr [eax+0Ah], 77h ; 'w'
  0040397B: fld     qword ptr ds:411120h
  00403981: sub     esp, 8
  00403984: fstp    [esp+24h+X]; X
  00403987: call    _sin
  0040398C: fstp    st
  0040398E: add     esp, 8
  00403991: mov     ecx, ds:47F808h
  00403997: sub     ecx, 0B6h ; '¶'
  0040399D: jnz     short loc_4039A9
  0040399F: mov     edx, ds:41E030h
  004039A5: mov     byte ptr [edx+0Bh], 4Fh ; 'O'
  004039A9: fld     qword ptr ds:411120h
  004039AF: sub     esp, 8
  004039B2: fstp    [esp+24h+X]; X
  004039B5: call    _sin
  004039BA: fstp    st
  004039BC: add     esp, 8
  004039BF: mov     eax, ds:47F808h
  004039C4: sub     eax, 0B7h ; '·'
  004039C9: jnz     short loc_4039D5
  004039CB: mov     ecx, ds:41E030h
  004039D1: mov     byte ptr [ecx+0Ch], 66h ; 'f'
  004039D5: fld     qword ptr ds:411120h
  004039DB: sub     esp, 8
  004039DE: fstp    [esp+24h+X]; X
  004039E1: call    _sin
  004039E6: fstp    st
  004039E8: add     esp, 8
  004039EB: mov     edx, ds:47F808h
  004039F1: sub     edx, 0B8h ; '¸'
  004039F7: jnz     short loc_403A02
  004039F9: mov     eax, ds:41E030h
  004039FE: mov     byte ptr [eax+0Dh], 53h ; 'S'
  00403A02: fld     qword ptr ds:411120h
  00403A08: sub     esp, 8
  00403A0B: fstp    [esp+24h+X]; X
  00403A0E: call    _sin
  00403A13: fstp    st
  00403A15: add     esp, 8
  00403A18: mov     ecx, ds:47F808h
  00403A1E: sub     ecx, 0B9h ; '¹'
  00403A24: jnz     short loc_403A30
  00403A26: mov     edx, ds:41E030h
  00403A2C: mov     byte ptr [edx+0Eh], 65h ; 'e'
  00403A30: fld     qword ptr ds:411120h
  00403A36: sub     esp, 8
  00403A39: fstp    [esp+24h+X]; X
  00403A3C: call    _sin
  00403A41: fstp    st
  00403A43: add     esp, 8
  00403A46: mov     eax, ds:47F808h
  00403A4B: sub     eax, 0BAh ; 'º'
  00403A50: jnz     short loc_403A5C
  00403A52: mov     ecx, ds:41E030h
  00403A58: mov     byte ptr [ecx+0Fh], 63h ; 'c'
  00403A5C: fld     qword ptr ds:411120h
  00403A62: sub     esp, 8
  00403A65: fstp    [esp+24h+X]; X
  00403A68: call    _sin
  00403A6D: fstp    st
  00403A6F: add     esp, 8
  00403A72: mov     edx, ds:47F808h
  00403A78: sub     edx, 0BBh ; '»'
  00403A7E: jnz     short loc_403A89
  00403A80: mov     eax, ds:41E030h
  00403A85: mov     byte ptr [eax+10h], 74h ; 't'
  00403A89: fld     qword ptr ds:411120h
  00403A8F: sub     esp, 8
  00403A92: fstp    [esp+24h+X]; X
  00403A95: call    _sin
  00403A9A: fstp    st
  00403A9C: add     esp, 8
  00403A9F: mov     ecx, ds:47F808h
  00403AA5: sub     ecx, 0BCh ; '¼'
  00403AAB: jnz     short loc_403AB7
  00403AAD: mov     edx, ds:41E030h
  00403AB3: mov     byte ptr [edx+11h], 69h ; 'i'
  00403AB7: fld     qword ptr ds:411120h
  00403ABD: sub     esp, 8
  00403AC0: fstp    [esp+24h+X]; X
  00403AC3: call    _sin
  00403AC8: fstp    st
  00403ACA: add     esp, 8
  00403ACD: mov     eax, ds:47F808h
  00403AD2: sub     eax, 0BDh ; '½'
  00403AD7: jnz     short loc_403AE3
  00403AD9: mov     ecx, ds:41E030h
  00403ADF: mov     byte ptr [ecx+12h], 6Fh ; 'o'
  00403AE3: fld     qword ptr ds:411120h
  00403AE9: sub     esp, 8
  00403AEC: fstp    [esp+24h+X]; X
  00403AEF: call    _sin
  00403AF4: fstp    st
  00403AF6: add     esp, 8
  00403AF9: mov     edx, ds:47F808h
  00403AFF: sub     edx, 0BEh ; '¾'
  00403B05: jnz     short loc_403B10
  00403B07: mov     eax, ds:41E030h
  00403B0C: mov     byte ptr [eax+13h], 6Eh ; 'n'
  00403B10: fld     qword ptr ds:411120h
  00403B16: sub     esp, 8
  00403B19: fstp    [esp+24h+X]; X
  00403B1C: call    _sin
  00403B21: fstp    st
  00403B23: add     esp, 8
  00403B26: mov     ecx, ds:47F808h
  00403B2C: sub     ecx, 0BFh ; '¿'
  00403B32: jnz     short loc_403B3E
  00403B34: mov     edx, ds:41E030h
  00403B3A: mov     byte ptr [edx+14h], 0
  00403B3E: fld     qword ptr ds:411120h
  00403B44: sub     esp, 8
  00403B47: fstp    [esp+24h+X]; X
  00403B4A: call    _sin
  00403B4F: fstp    st
  00403B51: add     esp, 8
  00403B54: mov     eax, ds:47F808h
  00403B59: sub     eax, 0C0h ; 'À'
  00403B5E: jnz     short loc_403B69
  00403B60: mov     ecx, ds:41E034h
  00403B66: mov     byte ptr [ecx], 6Eh ; 'n'
  00403B69: fld     qword ptr ds:411120h
  00403B6F: sub     esp, 8
  00403B72: fstp    [esp+24h+X]; X
  00403B75: call    _sin
  00403B7A: fstp    st
  00403B7C: add     esp, 8
  00403B7F: mov     edx, ds:47F808h
  00403B85: sub     edx, 0C1h ; 'Á'
  00403B8B: jnz     short loc_403B96
  00403B8D: mov     eax, ds:41E034h
  00403B92: mov     byte ptr [eax+1], 74h ; 't'
  00403B96: fld     qword ptr ds:411120h
  00403B9C: sub     esp, 8
  00403B9F: fstp    [esp+24h+X]; X
  00403BA2: call    _sin
  00403BA7: fstp    st
  00403BA9: add     esp, 8
  00403BAC: mov     ecx, ds:47F808h
  00403BB2: sub     ecx, 0C2h ; 'Â'
  00403BB8: jnz     short loc_403BC4
  00403BBA: mov     edx, ds:41E034h
  00403BC0: mov     byte ptr [edx+2], 64h ; 'd'
  00403BC4: fld     qword ptr ds:411120h
  00403BCA: sub     esp, 8
  00403BCD: fstp    [esp+24h+X]; X
  00403BD0: call    _sin
  00403BD5: fstp    st
  00403BD7: add     esp, 8
  00403BDA: mov     eax, ds:47F808h
  00403BDF: sub     eax, 0C3h ; 'Ã'
  00403BE4: jnz     short loc_403BF0
  00403BE6: mov     ecx, ds:41E034h
  00403BEC: mov     byte ptr [ecx+3], 6Ch ; 'l'
  00403BF0: fld     qword ptr ds:411120h
  00403BF6: sub     esp, 8
  00403BF9: fstp    [esp+24h+X]; X
  00403BFC: call    _sin
  00403C01: fstp    st
  00403C03: add     esp, 8
  00403C06: mov     edx, ds:47F808h
  00403C0C: sub     edx, 0C4h ; 'Ä'
  00403C12: jnz     short loc_403C1D
  00403C14: mov     eax, ds:41E034h
  00403C19: mov     byte ptr [eax+4], 6Ch ; 'l'
  00403C1D: fld     qword ptr ds:411120h
  00403C23: sub     esp, 8
  00403C26: fstp    [esp+24h+X]; X
  00403C29: call    _sin
  00403C2E: fstp    st
  00403C30: add     esp, 8
  00403C33: mov     ecx, ds:47F808h
  00403C39: sub     ecx, 0C5h ; 'Å'
  00403C3F: jnz     short loc_403C4B
  00403C41: mov     edx, ds:41E034h
  00403C47: mov     byte ptr [edx+5], 2Eh ; '.'
  00403C4B: fld     qword ptr ds:411120h
  00403C51: sub     esp, 8
  00403C54: fstp    [esp+24h+X]; X
  00403C57: call    _sin
  00403C5C: fstp    st
  00403C5E: add     esp, 8
  00403C61: mov     eax, ds:47F808h
  00403C66: sub     eax, 0C6h ; 'Æ'
  00403C6B: jnz     short loc_403C77
  00403C6D: mov     ecx, ds:41E034h
  00403C73: mov     byte ptr [ecx+6], 64h ; 'd'
  00403C77: fld     qword ptr ds:411120h
  00403C7D: sub     esp, 8
  00403C80: fstp    [esp+24h+X]; X
  00403C83: call    _sin
  00403C88: fstp    st
  00403C8A: add     esp, 8
  00403C8D: mov     edx, ds:47F808h
  00403C93: sub     edx, 0C7h ; 'Ç'
  00403C99: jnz     short loc_403CA4
  00403C9B: mov     eax, ds:41E034h
  00403CA0: mov     byte ptr [eax+7], 6Ch ; 'l'
  00403CA4: fld     qword ptr ds:411120h
  00403CAA: sub     esp, 8
  00403CAD: fstp    [esp+24h+X]; X
  00403CB0: call    _sin
  00403CB5: fstp    st
  00403CB7: add     esp, 8
  00403CBA: mov     ecx, ds:47F808h
  00403CC0: sub     ecx, 0C8h ; 'È'
  00403CC6: jnz     short loc_403CD2
  00403CC8: mov     edx, ds:41E034h
  00403CCE: mov     byte ptr [edx+8], 6Ch ; 'l'
  00403CD2: fld     qword ptr ds:411120h
  00403CD8: sub     esp, 8
  00403CDB: fstp    [esp+24h+X]; X
  00403CDE: call    _sin
  00403CE3: fstp    st
  00403CE5: add     esp, 8
  00403CE8: mov     eax, ds:47F808h
  00403CED: sub     eax, 0C9h ; 'É'
  00403CF2: jnz     short loc_403CFE
  00403CF4: mov     ecx, ds:41E034h
  00403CFA: mov     byte ptr [ecx+9], 0
  00403CFE: fld     qword ptr ds:411120h
  00403D04: sub     esp, 8
  00403D07: fstp    [esp+24h+X]; X
  00403D0A: call    _sin
  00403D0F: fstp    st
  00403D11: add     esp, 8
  00403D14: mov     edx, ds:47F808h
  00403D1A: sub     edx, 0CAh ; 'Ê'
  00403D20: jnz     short loc_403D41
  00403D22: mov     eax, ds:41E030h
  00403D27: push    eax; lpProcName
  00403D28: mov     ecx, ds:41E034h
  00403D2E: push    ecx; lpLibFileName
  00403D2F: call    dword ptr ds:411014h
  00403D35: push    eax; hModule
  00403D36: call    dword ptr ds:411018h
  00403D3C: mov     ds:41E028h, eax
  00403D41: fld     qword ptr ds:411120h
  00403D47: sub     esp, 8
  00403D4A: fstp    [esp+24h+X]; X
  00403D4D: call    _sin
  00403D52: fstp    st
  00403D54: add     esp, 8
  00403D57: mov     edx, ds:47F808h
  00403D5D: sub     edx, 0CBh ; 'Ë'
  00403D63: jnz     short loc_403D6E
  00403D65: mov     eax, ds:41E030h
  00403D6A: mov     byte ptr [eax+4], 75h ; 'u'
  00403D6E: fld     qword ptr ds:411120h
  00403D74: sub     esp, 8
  00403D77: fstp    [esp+24h+X]; X
  00403D7A: call    _sin
  00403D7F: fstp    st
  00403D81: add     esp, 8
  00403D84: mov     ecx, ds:47F808h
  00403D8A: sub     ecx, 0CCh ; 'Ì'
  00403D90: jnz     short loc_403D9C
  00403D92: mov     edx, ds:41E030h
  00403D98: mov     byte ptr [edx+5], 72h ; 'r'
  00403D9C: fld     qword ptr ds:411120h
  00403DA2: sub     esp, 8
  00403DA5: fstp    [esp+24h+X]; X
  00403DA8: call    _sin
  00403DAD: fstp    st
  00403DAF: add     esp, 8
  00403DB2: mov     eax, ds:47F808h
  00403DB7: sub     eax, 0CDh ; 'Í'
  00403DBC: jnz     short loc_403DC8
  00403DBE: mov     ecx, ds:41E030h
  00403DC4: mov     byte ptr [ecx+6], 72h ; 'r'
  00403DC8: fld     qword ptr ds:411120h
  00403DCE: sub     esp, 8
  00403DD1: fstp    [esp+24h+X]; X
  00403DD4: call    _sin
  00403DD9: fstp    st
  00403DDB: add     esp, 8
  00403DDE: mov     edx, ds:47F808h
  00403DE4: sub     edx, 0CEh ; 'Î'
  00403DEA: jnz     short loc_403DF5
  00403DEC: mov     eax, ds:41E030h
  00403DF1: mov     byte ptr [eax+7], 65h ; 'e'
  00403DF5: fld     qword ptr ds:411120h
  00403DFB: sub     esp, 8
  00403DFE: fstp    [esp+24h+X]; X
  00403E01: call    _sin
  00403E06: fstp    st
  00403E08: add     esp, 8
  00403E0B: mov     ecx, ds:47F808h
  00403E11: sub     ecx, 0CFh ; 'Ï'
  00403E17: jnz     short loc_403E23
  00403E19: mov     edx, ds:41E030h
  00403E1F: mov     byte ptr [edx+8], 6Eh ; 'n'
  00403E23: fld     qword ptr ds:411120h
  00403E29: sub     esp, 8
  00403E2C: fstp    [esp+24h+X]; X
  00403E2F: call    _sin
  00403E34: fstp    st
  00403E36: add     esp, 8
  00403E39: mov     eax, ds:47F808h
  00403E3E: sub     eax, 0D0h ; 'Ð'
  00403E43: jnz     short loc_403E4F
  00403E45: mov     ecx, ds:41E030h
  00403E4B: mov     byte ptr [ecx+9], 74h ; 't'
  00403E4F: fld     qword ptr ds:411120h
  00403E55: sub     esp, 8
  00403E58: fstp    [esp+24h+X]; X
  00403E5B: call    _sin
  00403E60: fstp    st
  00403E62: add     esp, 8
  00403E65: mov     edx, ds:47F808h
  00403E6B: sub     edx, 0D1h ; 'Ñ'
  00403E71: jnz     short loc_403E7C
  00403E73: mov     eax, ds:41E030h
  00403E78: mov     byte ptr [eax+0Ah], 50h ; 'P'
  00403E7C: fld     qword ptr ds:411120h
  00403E82: sub     esp, 8
  00403E85: fstp    [esp+24h+X]; X
  00403E88: call    _sin
  00403E8D: fstp    st
  00403E8F: add     esp, 8
  00403E92: mov     ecx, ds:47F808h
  00403E98: sub     ecx, 0D2h ; 'Ò'
  00403E9E: jnz     short loc_403EAA
  00403EA0: mov     edx, ds:41E030h
  00403EA6: mov     byte ptr [edx+0Bh], 72h ; 'r'
  00403EAA: fld     qword ptr ds:411120h
  00403EB0: sub     esp, 8
  00403EB3: fstp    [esp+24h+X]; X
  00403EB6: call    _sin
  00403EBB: fstp    st
  00403EBD: add     esp, 8
  00403EC0: mov     eax, ds:47F808h
  00403EC5: sub     eax, 0D3h ; 'Ó'
  00403ECA: jnz     short loc_403ED6
  00403ECC: mov     ecx, ds:41E030h
  00403ED2: mov     byte ptr [ecx+0Ch], 6Fh ; 'o'
  00403ED6: fld     qword ptr ds:411120h
  00403EDC: sub     esp, 8
  00403EDF: fstp    [esp+24h+X]; X
  00403EE2: call    _sin
  00403EE7: fstp    st
  00403EE9: add     esp, 8
  00403EEC: mov     edx, ds:47F808h
  00403EF2: sub     edx, 0D4h ; 'Ô'
  00403EF8: jnz     short loc_403F03
  00403EFA: mov     eax, ds:41E030h
  00403EFF: mov     byte ptr [eax+0Dh], 63h ; 'c'
  00403F03: fld     qword ptr ds:411120h
  00403F09: sub     esp, 8
  00403F0C: fstp    [esp+24h+X]; X
  00403F0F: call    _sin
  00403F14: fstp    st
  00403F16: add     esp, 8
  00403F19: mov     ecx, ds:47F808h
  00403F1F: sub     ecx, 0D5h ; 'Õ'
  00403F25: jnz     short loc_403F31
  00403F27: mov     edx, ds:41E030h
  00403F2D: mov     byte ptr [edx+0Eh], 65h ; 'e'
  00403F31: fld     qword ptr ds:411120h
  00403F37: sub     esp, 8
  00403F3A: fstp    [esp+24h+X]; X
  00403F3D: call    _sin
  00403F42: fstp    st
  00403F44: add     esp, 8
  00403F47: mov     eax, ds:47F808h
  00403F4C: sub     eax, 0D6h ; 'Ö'
  00403F51: jnz     short loc_403F5D
  00403F53: mov     ecx, ds:41E030h
  00403F59: mov     byte ptr [ecx+0Fh], 73h ; 's'
  00403F5D: fld     qword ptr ds:411120h
  00403F63: sub     esp, 8
  00403F66: fstp    [esp+24h+X]; X
  00403F69: call    _sin
  00403F6E: fstp    st
  00403F70: add     esp, 8
  00403F73: mov     edx, ds:47F808h
  00403F79: sub     edx, 0D7h ; '×'
  00403F7F: jnz     short loc_403F8A
  00403F81: mov     eax, ds:41E030h
  00403F86: mov     byte ptr [eax+10h], 73h ; 's'
  00403F8A: fld     qword ptr ds:411120h
  00403F90: sub     esp, 8
  00403F93: fstp    [esp+24h+X]; X
  00403F96: call    _sin
  00403F9B: fstp    st
  00403F9D: add     esp, 8
  00403FA0: mov     ecx, ds:47F808h
  00403FA6: sub     ecx, 0D8h ; 'Ø'
  00403FAC: jnz     short loc_403FB8
  00403FAE: mov     edx, ds:41E030h
  00403FB4: mov     byte ptr [edx+11h], 0
  00403FB8: fld     qword ptr ds:411120h
  00403FBE: sub     esp, 8
  00403FC1: fstp    [esp+24h+X]; X
  00403FC4: call    _sin
  00403FC9: fstp    st
  00403FCB: add     esp, 8
  00403FCE: mov     eax, ds:47F808h
  00403FD3: sub     eax, 0D9h ; 'Ù'
  00403FD8: jnz     short loc_403FEC
  00403FDA: movzx   ecx, word ptr ds:4139E6h
  00403FE1: xor     ecx, 41h
  00403FE4: mov     edx, ds:41E030h
  00403FEA: mov     [edx], cl
  00403FEC: fld     qword ptr ds:411120h
  00403FF2: sub     esp, 8
  00403FF5: fstp    [esp+24h+X]; X
  00403FF8: call    _sin
  00403FFD: fstp    st
  00403FFF: add     esp, 8
  00404002: mov     eax, ds:47F808h
  00404007: sub     eax, 0DAh ; 'Ú'
  0040400C: jnz     short loc_404021
  0040400E: movzx   ecx, word ptr ds:4139E6h
  00404015: xor     ecx, 63h
  00404018: mov     edx, ds:41E030h
  0040401E: mov     [edx+1], cl
  00404021: fld     qword ptr ds:411120h
  00404027: sub     esp, 8
  0040402A: fstp    [esp+24h+X]; X
  0040402D: call    _sin
  00404032: fstp    st
  00404034: add     esp, 8
  00404037: mov     eax, ds:47F808h
  0040403C: sub     eax, 0DBh ; 'Û'
  00404041: jnz     short loc_404056
  00404043: movzx   ecx, word ptr ds:4139E6h
  0040404A: xor     ecx, 72h
  0040404D: mov     edx, ds:41E030h
  00404053: mov     [edx+2], cl
  00404056: fld     qword ptr ds:411120h
  0040405C: sub     esp, 8
  0040405F: fstp    [esp+24h+X]; X
  00404062: call    _sin
  00404067: fstp    st
  00404069: add     esp, 8
  0040406C: mov     eax, ds:47F808h
  00404071: sub     eax, 0DCh ; 'Ü'
  00404076: jnz     short loc_40408B
  00404078: movzx   ecx, word ptr ds:4139E6h
  0040407F: xor     ecx, 45h
  00404082: mov     edx, ds:41E030h
  00404088: mov     [edx+3], cl
  0040408B: fld     qword ptr ds:411120h
  00404091: sub     esp, 8
  00404094: fstp    [esp+24h+X]; X
  00404097: call    _sin
  0040409C: fstp    st
  0040409E: add     esp, 8
  004040A1: mov     eax, ds:47F808h
  004040A6: sub     eax, 0DDh ; 'Ý'
  004040AB: jnz     short loc_4040C6
  004040AD: mov     ecx, ds:41E030h
  004040B3: push    ecx; lpProcName
  004040B4: mov     edx, ds:413B54h
  004040BA: push    edx; hModule
  004040BB: call    dword ptr ds:411018h
  004040C1: mov     ds:413A00h, eax
  004040C6: fld     qword ptr ds:411120h
  004040CC: sub     esp, 8
  004040CF: fstp    [esp+24h+X]; X
  004040D2: call    _sin
  004040D7: fstp    st
  004040D9: add     esp, 8
  004040DC: mov     eax, ds:47F808h
  004040E1: sub     eax, 0DEh ; 'Þ'
  004040E6: jnz     short loc_4040FA
  004040E8: movzx   ecx, word ptr ds:4139E6h
  004040EF: xor     ecx, 50h
  004040F2: mov     edx, ds:41E030h
  004040F8: mov     [edx], cl
  004040FA: fld     qword ptr ds:411120h
  00404100: sub     esp, 8
  00404103: fstp    [esp+24h+X]; X
  00404106: call    _sin
  0040410B: fstp    st
  0040410D: add     esp, 8
  00404110: mov     eax, ds:47F808h
  00404115: sub     eax, 0DFh ; 'ß'
  0040411A: jnz     short loc_40412F
  0040411C: movzx   ecx, word ptr ds:4139E6h
  00404123: xor     ecx, 6Fh
  00404126: mov     edx, ds:41E030h
  0040412C: mov     [edx+1], cl
  0040412F: fld     qword ptr ds:411120h
  00404135: sub     esp, 8
  00404138: fstp    [esp+24h+X]; X
  0040413B: call    _sin
  00404140: fstp    st
  00404142: add     esp, 8
  00404145: mov     eax, ds:47F808h
  0040414A: sub     eax, 0E0h ; 'à'
  0040414F: jnz     short loc_404164
  00404151: movzx   ecx, word ptr ds:4139E6h
  00404158: xor     ecx, 74h
  0040415B: mov     edx, ds:41E030h
  00404161: mov     [edx+2], cl
  00404164: fld     qword ptr ds:411120h
  0040416A: sub     esp, 8
  0040416D: fstp    [esp+24h+X]; X
  00404170: call    _sin
  00404175: fstp    st
  00404177: add     esp, 8
  0040417A: mov     eax, ds:47F808h
  0040417F: sub     eax, 0E1h ; 'á'
  00404184: jnz     short loc_404199
  00404186: movzx   ecx, word ptr ds:4139E6h
  0040418D: xor     ecx, 72h
  00404190: mov     edx, ds:41E030h
  00404196: mov     [edx+3], cl
  00404199: fld     qword ptr ds:411120h
  0040419F: sub     esp, 8
  004041A2: fstp    [esp+24h+X]; X
  004041A5: call    _sin
  004041AA: fstp    st
  004041AC: add     esp, 8
  004041AF: mov     eax, ds:47F808h
  004041B4: sub     eax, 0E2h ; 'â'
  004041B9: jnz     short loc_4041CE
  004041BB: movzx   ecx, word ptr ds:4139E6h
  004041C2: xor     ecx, 73h
  004041C5: mov     edx, ds:41E030h
  004041CB: mov     [edx+4], cl
  004041CE: fld     qword ptr ds:411120h
  004041D4: sub     esp, 8
  004041D7: fstp    [esp+24h+X]; X
  004041DA: call    _sin
  004041DF: fstp    st
  004041E1: add     esp, 8
  004041E4: mov     eax, ds:47F808h
  004041E9: sub     eax, 0E3h ; 'ã'
  004041EE: jnz     short loc_404203
  004041F0: movzx   ecx, word ptr ds:4139E6h
  004041F7: xor     ecx, 67h
  004041FA: mov     edx, ds:41E030h
  00404200: mov     [edx+5], cl
  00404203: fld     qword ptr ds:411120h
  00404209: sub     esp, 8
  0040420C: fstp    [esp+24h+X]; X
  0040420F: call    _sin
  00404214: fstp    st
  00404216: add     esp, 8
  00404219: mov     eax, ds:47F808h
  0040421E: sub     eax, 0E4h ; 'ä'
  00404223: jnz     short loc_404238
  00404225: movzx   ecx, word ptr ds:4139E6h
  0040422C: xor     ecx, 6Ah
  0040422F: mov     edx, ds:41E030h
  00404235: mov     [edx+6], cl
  00404238: fld     qword ptr ds:411120h
  0040423E: sub     esp, 8
  00404241: fstp    [esp+24h+X]; X
  00404244: call    _sin
  00404249: fstp    st
  0040424B: add     esp, 8
  0040424E: mov     eax, ds:47F808h
  00404253: sub     eax, 0E5h ; 'å'
  00404258: jnz     short loc_404264
  0040425A: mov     ecx, ds:41E030h
  00404260: mov     byte ptr [ecx+7], 41h ; 'A'
  00404264: fld     qword ptr ds:411120h
  0040426A: sub     esp, 8
  0040426D: fstp    [esp+24h+X]; X
  00404270: call    _sin
  00404275: fstp    st
  00404277: add     esp, 8
  0040427A: mov     edx, ds:47F808h
  00404280: sub     edx, 0E6h ; 'æ'
  00404286: jnz     short loc_404291
  00404288: mov     eax, ds:41E030h
  0040428D: mov     byte ptr [eax+8], 6Ch ; 'l'
  00404291: fld     qword ptr ds:411120h
  00404297: sub     esp, 8
  0040429A: fstp    [esp+24h+X]; X
  0040429D: call    _sin
  004042A2: fstp    st
  004042A4: add     esp, 8
  004042A7: mov     ecx, ds:47F808h
  004042AD: sub     ecx, 0E7h ; 'ç'
  004042B3: jnz     short loc_4042BF
  004042B5: mov     edx, ds:41E030h
  004042BB: mov     byte ptr [edx+9], 6Ch ; 'l'
  004042BF: fld     qword ptr ds:411120h
  004042C5: sub     esp, 8
  004042C8: fstp    [esp+24h+X]; X
  004042CB: call    _sin
  004042D0: fstp    st
  004042D2: add     esp, 8
  004042D5: mov     eax, ds:47F808h
  004042DA: sub     eax, 0E8h ; 'è'
  004042DF: jnz     short loc_4042EB
  004042E1: mov     ecx, ds:41E030h
  004042E7: mov     byte ptr [ecx+0Ah], 6Fh ; 'o'
  004042EB: fld     qword ptr ds:411120h
  004042F1: sub     esp, 8
  004042F4: fstp    [esp+24h+X]; X
  004042F7: call    _sin
  004042FC: fstp    st
  004042FE: add     esp, 8
  00404301: mov     edx, ds:47F808h
  00404307: sub     edx, 0E9h ; 'é'
  0040430D: jnz     short loc_404318
  0040430F: mov     eax, ds:41E030h
  00404314: mov     byte ptr [eax+0Bh], 63h ; 'c'
  00404318: fld     qword ptr ds:411120h
  0040431E: sub     esp, 8
  00404321: fstp    [esp+24h+X]; X
  00404324: call    _sin
  00404329: fstp    st
  0040432B: add     esp, 8
  0040432E: mov     ecx, ds:47F808h
  00404334: sub     ecx, 0EAh ; 'ê'
  0040433A: jnz     short loc_404346
  0040433C: mov     edx, ds:41E030h
  00404342: mov     byte ptr [edx+0Ch], 45h ; 'E'
  00404346: fld     qword ptr ds:411120h
  0040434C: sub     esp, 8
  0040434F: fstp    [esp+24h+X]; X
  00404352: call    _sin
  00404357: fstp    st
  00404359: add     esp, 8
  0040435C: mov     eax, ds:47F808h
  00404361: sub     eax, 0EBh ; 'ë'
  00404366: jnz     short loc_404372
  00404368: mov     ecx, ds:41E030h
  0040436E: mov     byte ptr [ecx+0Dh], 78h ; 'x'
  00404372: fld     qword ptr ds:411120h
  00404378: sub     esp, 8
  0040437B: fstp    [esp+24h+X]; X
  0040437E: call    _sin
  00404383: fstp    st
  00404385: add     esp, 8
  00404388: mov     edx, ds:47F808h
  0040438E: sub     edx, 0ECh ; 'ì'
  00404394: jnz     short loc_40439F
  00404396: mov     eax, ds:41E030h
  0040439B: mov     byte ptr [eax+0Eh], 0
  0040439F: fld     qword ptr ds:411120h
  004043A5: sub     esp, 8
  004043A8: fstp    [esp+24h+X]; X
  004043AB: call    _sin
  004043B0: fstp    st
  004043B2: add     esp, 8
  004043B5: mov     ecx, ds:47F808h
  004043BB: sub     ecx, 0EDh ; 'í'
  004043C1: jnz     short loc_4043DB
  004043C3: mov     edx, ds:41E030h
  004043C9: push    edx; lpProcName
  004043CA: mov     eax, ds:413B54h
  004043CF: push    eax; hModule
  004043D0: call    dword ptr ds:411018h
  004043D6: mov     ds:413A08h, eax
  004043DB: fld     qword ptr ds:411120h
  004043E1: sub     esp, 8
  004043E4: fstp    [esp+24h+X]; X
  004043E7: call    _sin
  004043EC: fstp    st
  004043EE: add     esp, 8
  004043F1: mov     ecx, ds:47F808h
  004043F7: sub     ecx, 0EEh ; 'î'
  004043FD: jnz     short loc_40443A
  004043FF: movzx   edx, word ptr ds:4139E6h
  00404406: sub     edx, 5
  00404409: cmp     edx, 1
  0040440C: jnz     short loc_40443A
  0040440E: movzx   eax, word ptr ds:4139E6h
  00404415: xor     eax, 40h
  00404418: xor     eax, 6
  0040441B: push    eax
  0040441C: push    3000h
  00404421: push    989680h
  00404426: push    0
  00404428: call    dword ptr ds:413A00h
  0040442E: push    eax
  0040442F: call    dword ptr ds:413A08h
  00404435: mov     ds:413A10h, eax
  0040443A: fld     qword ptr ds:411120h
  00404440: sub     esp, 8
  00404443: fstp    [esp+24h+X]; X
  00404446: call    _sin
  0040444B: fstp    st
  0040444D: add     esp, 8
  00404450: mov     ecx, ds:47F808h
  00404456: sub     ecx, 0EFh ; 'ï'
  0040445C: jnz     short loc_40446F
  0040445E: movzx   edx, word ptr ds:4139E6h
  00404465: xor     edx, 54h
  00404468: mov     eax, ds:41E030h
  0040446D: mov     [eax], dl
  0040446F: fld     qword ptr ds:411120h
  00404475: sub     esp, 8
  00404478: fstp    [esp+24h+X]; X
  0040447B: call    _sin
  00404480: fstp    st
  00404482: add     esp, 8
  00404485: mov     ecx, ds:47F808h
  0040448B: sub     ecx, 0F0h ; 'ð'
  00404491: jnz     short loc_4044A5
  00404493: movzx   edx, word ptr ds:4139E6h
  0040449A: xor     edx, 63h
  0040449D: mov     eax, ds:41E030h
  004044A2: mov     [eax+1], dl
  004044A5: fld     qword ptr ds:411120h
  004044AB: sub     esp, 8
  004044AE: fstp    [esp+24h+X]; X
  004044B1: call    _sin
  004044B6: fstp    st
  004044B8: add     esp, 8
  004044BB: mov     ecx, ds:47F808h
  004044C1: sub     ecx, 0F1h ; 'ñ'
  004044C7: jnz     short loc_4044DB
  004044C9: movzx   edx, word ptr ds:4139E6h
  004044D0: xor     edx, 75h
  004044D3: mov     eax, ds:41E030h
  004044D8: mov     [eax+2], dl
  004044DB: fld     qword ptr ds:411120h
  004044E1: sub     esp, 8
  004044E4: fstp    [esp+24h+X]; X
  004044E7: call    _sin
  004044EC: fstp    st
  004044EE: add     esp, 8
  004044F1: mov     ecx, ds:47F808h
  004044F7: sub     ecx, 0F2h ; 'ò'
  004044FD: jnz     short loc_404511
  004044FF: movzx   edx, word ptr ds:4139E6h
  00404506: xor     edx, 52h
  00404509: mov     eax, ds:41E030h
  0040450E: mov     [eax+6], dl
  00404511: fld     qword ptr ds:411120h
  00404517: sub     esp, 8
  0040451A: fstp    [esp+24h+X]; X
  0040451D: call    _sin
  00404522: fstp    st
  00404524: add     esp, 8
  00404527: mov     ecx, ds:47F808h
  0040452D: sub     ecx, 0F3h ; 'ó'
  00404533: jnz     short loc_40453F
  00404535: mov     edx, ds:41E030h
  0040453B: mov     byte ptr [edx+7], 68h ; 'h'
  0040453F: fld     qword ptr ds:411120h
  00404545: sub     esp, 8
  00404548: fstp    [esp+24h+X]; X
  0040454B: call    _sin
  00404550: fstp    st
  00404552: add     esp, 8
  00404555: mov     eax, ds:47F808h
  0040455A: sub     eax, 0F4h ; 'ô'
  0040455F: jnz     short loc_40456B
  00404561: mov     ecx, ds:41E030h
  00404567: mov     byte ptr [ecx+8], 72h ; 'r'
  0040456B: fld     qword ptr ds:411120h
  00404571: sub     esp, 8
  00404574: fstp    [esp+24h+X]; X
  00404577: call    _sin
  0040457C: fstp    st
  0040457E: add     esp, 8
  00404581: mov     edx, ds:47F808h
  00404587: sub     edx, 0F5h ; 'õ'
  0040458D: jnz     short loc_404598
  0040458F: mov     eax, ds:41E030h
  00404594: mov     byte ptr [eax+9], 65h ; 'e'
  00404598: fld     qword ptr ds:411120h
  0040459E: sub     esp, 8
  004045A1: fstp    [esp+24h+X]; X
  004045A4: call    _sin
  004045A9: fstp    st
  004045AB: add     esp, 8
  004045AE: mov     ecx, ds:47F808h
  004045B4: sub     ecx, 0F6h ; 'ö'
  004045BA: jnz     short loc_4045C6
  004045BC: mov     edx, ds:41E030h
  004045C2: mov     byte ptr [edx+0Ah], 61h ; 'a'
  004045C6: fld     qword ptr ds:411120h
  004045CC: sub     esp, 8
  004045CF: fstp    [esp+24h+X]; X
  004045D2: call    _sin
  004045D7: fstp    st
  004045D9: add     esp, 8
  004045DC: mov     eax, ds:47F808h
  004045E1: sub     eax, 0F7h ; '÷'
  004045E6: jnz     short loc_4045F2
  004045E8: mov     ecx, ds:41E030h
  004045EE: mov     byte ptr [ecx+0Bh], 64h ; 'd'
  004045F2: fld     qword ptr ds:411120h
  004045F8: sub     esp, 8
  004045FB: fstp    [esp+24h+X]; X
  004045FE: call    _sin
  00404603: fstp    st
  00404605: add     esp, 8
  00404608: mov     edx, ds:47F808h
  0040460E: sub     edx, 0F8h ; 'ø'
  00404614: jnz     short loc_40461F
  00404616: mov     eax, ds:41E030h
  0040461B: mov     byte ptr [eax+0Ch], 0
  0040461F: fld     qword ptr ds:411120h
  00404625: sub     esp, 8
  00404628: fstp    [esp+24h+X]; X
  0040462B: call    _sin
  00404630: fstp    st
  00404632: add     esp, 8
  00404635: mov     ecx, ds:47F808h
  0040463B: sub     ecx, 0F9h ; 'ù'
  00404641: jnz     short loc_40464D
  00404643: mov     edx, ds:41E030h
  00404649: mov     byte ptr [edx+3], 75h ; 'u'
  0040464D: fld     qword ptr ds:411120h
  00404653: sub     esp, 8
  00404656: fstp    [esp+24h+X]; X
  00404659: call    _sin
  0040465E: fstp    st
  00404660: add     esp, 8
  00404663: mov     eax, ds:47F808h
  00404668: sub     eax, 0FAh ; 'ú'
  0040466D: jnz     short loc_404679
  0040466F: mov     ecx, ds:41E030h
  00404675: mov     byte ptr [ecx+4], 6Dh ; 'm'
  00404679: fld     qword ptr ds:411120h
  0040467F: sub     esp, 8
  00404682: fstp    [esp+24h+X]; X
  00404685: call    _sin
  0040468A: fstp    st
  0040468C: add     esp, 8
  0040468F: mov     edx, ds:47F808h
  00404695: sub     edx, 0FBh ; 'û'
  0040469B: jnz     short loc_4046A6
  0040469D: mov     eax, ds:41E030h
  004046A2: mov     byte ptr [eax+5], 65h ; 'e'
  004046A6: fld     qword ptr ds:411120h
  004046AC: sub     esp, 8
  004046AF: fstp    [esp+24h+X]; X
  004046B2: call    _sin
  004046B7: fstp    st
  004046B9: add     esp, 8
  004046BC: mov     ecx, ds:47F808h
  004046C2: sub     ecx, 0FCh ; 'ü'
  004046C8: jnz     short loc_4046EE
  004046CA: movzx   edx, word ptr ds:4139E6h
  004046D1: cmp     edx, 6
  004046D4: jnz     short loc_4046EE
  004046D6: mov     eax, ds:41E030h
  004046DB: push    eax; lpProcName
  004046DC: mov     ecx, ds:413B54h
  004046E2: push    ecx; hModule
  004046E3: call    dword ptr ds:411018h
  004046E9: mov     ds:41E024h, eax
  004046EE: fld     qword ptr ds:411120h
  004046F4: sub     esp, 8
  004046F7: fstp    [esp+24h+X]; X
  004046FA: call    _sin
  004046FF: fstp    st
  00404701: add     esp, 8
  00404704: mov     edx, ds:47F808h
  0040470A: sub     edx, 0FDh ; 'ý'
  00404710: jnz     short loc_40476B
  00404712: movzx   eax, word ptr ds:4139E4h
  00404719: cmp     eax, 7E0h
  0040471E: jnz     short loc_40476B
  00404720: mov     [ebp+var_18], 0
  00404727: jmp     short loc_404732
  00404729: mov     ecx, [ebp+var_18]
  0040472C: add     ecx, 1
  0040472F: mov     [ebp+var_18], ecx
  00404732: cmp     [ebp+var_18], 31200h
  00404739: jge     short loc_40476B
  0040473B: movzx   edx, word ptr ds:4139E4h
  00404742: xor     edx, [ebp+var_18]
  00404745: xor     edx, 7E0h
  0040474B: movzx   eax, word ptr ds:4139E4h
  00404752: xor     eax, [ebp+var_18]
  00404755: xor     eax, 7E0h
  0040475A: mov     ecx, ds:413A10h
  00404760: mov     dl, [edx+44E608h]
  00404766: mov     [ecx+eax], dl
  00404769: jmp     short loc_404729
  0040476B: mov     eax, ds:47F808h
  00404770: sub     eax, 0FFh
  00404775: jnz     short loc_404783
  00404777: mov     ecx, ds:413A10h
  0040477D: mov     ds:41DFD4h, ecx
  00404783: fld     qword ptr ds:411120h
  00404789: sub     esp, 8
  0040478C: fstp    [esp+24h+X]; X
  0040478F: call    _sin
  00404794: fstp    st
  00404796: add     esp, 8
  00404799: mov     edx, ds:47F808h
  0040479F: sub     edx, 100h
  004047A5: jnz     short loc_4047C7
  004047A7: movzx   eax, word ptr ds:4139E6h
  004047AE: cmp     eax, 6
  004047B1: jnz     short loc_4047C7
  004047B3: push    0
  004047B5: mov     ecx, ds:413B64h
  004047BB: push    ecx
  004047BC: call    dword ptr ds:41E014h
  004047C2: mov     ds:4139D8h, eax
  004047C7: fld     qword ptr ds:411120h
  004047CD: sub     esp, 8
  004047D0: fstp    [esp+24h+X]; X
  004047D3: call    _sin
  004047D8: fstp    st
  004047DA: add     esp, 8
  004047DD: mov     edx, ds:47F808h
  004047E3: sub     edx, 101h
  004047E9: jnz     short loc_404809
  004047EB: movzx   eax, word ptr ds:4139E6h
  004047F2: cmp     eax, 6
  004047F5: jnz     short loc_404809
  004047F7: push    989680h; dwBytes
  004047FC: push    0; uFlags
  004047FE: call    dword ptr ds:411020h
  00404804: mov     ds:413B50h, eax
  00404809: fld     qword ptr ds:411120h
  0040480F: sub     esp, 8
  00404812: fstp    [esp+24h+X]; X
  00404815: call    _sin
  0040481A: fstp    st
  0040481C: add     esp, 8
  0040481F: mov     ecx, ds:47F808h
  00404825: sub     ecx, 102h
  0040482B: jnz     short loc_40484E
  0040482D: movzx   edx, word ptr ds:4139E6h
  00404834: cmp     edx, 6
  00404837: jnz     short loc_40484E
  00404839: push    0F4240h; Size
  0040483E: push    0; Val
  00404840: mov     eax, ds:413B50h
  00404845: push    eax; void *
  00404846: call    _memset
  0040484B: add     esp, 0Ch
  0040484E: fld     qword ptr ds:411120h
  00404854: sub     esp, 8
  00404857: fstp    [esp+24h+X]; X
  0040485A: call    _sin
  0040485F: fstp    st
  00404861: add     esp, 8
  00404864: mov     ecx, ds:47F808h
  0040486A: sub     ecx, 103h
  00404870: jnz     short loc_40488A
  00404872: push    0F4240h
  00404877: mov     edx, ds:413B50h
  0040487D: push    edx
  0040487E: mov     eax, ds:4139D8h
  00404883: push    eax
  00404884: call    dword ptr ds:413A04h
  0040488A: fld     qword ptr ds:411120h
  00404890: sub     esp, 8
  00404893: fstp    [esp+24h+X]; X
  00404896: call    _sin
  0040489B: fstp    st
  0040489D: add     esp, 8
  004048A0: mov     ecx, ds:47F808h
  004048A6: sub     ecx, 104h
  004048AC: jnz     short loc_4048CF
  004048AE: movzx   edx, word ptr ds:4139E6h
  004048B5: cmp     edx, 6
  004048B8: jnz     short loc_4048CF
  004048BA: push    40h ; '@'; Size
  004048BC: mov     eax, ds:413B50h
  004048C1: push    eax; Src
  004048C2: push    413B10h; void *
  004048C7: call    _memcpy
  004048CC: add     esp, 0Ch
  004048CF: fld     qword ptr ds:411120h
  004048D5: sub     esp, 8
  004048D8: fstp    [esp+24h+X]; X
  004048DB: call    _sin
  004048E0: fstp    st
  004048E2: add     esp, 8
  004048E5: mov     ecx, ds:47F808h
  004048EB: sub     ecx, 105h
  004048F1: jnz     short loc_40491A
  004048F3: movzx   edx, word ptr ds:4139E6h
  004048FA: cmp     edx, 6
  004048FD: jnz     short loc_40491A
  004048FF: push    40h ; '@'; Size
  00404901: mov     eax, ds:413B50h
  00404906: add     eax, ds:413B4Ch
  0040490C: push    eax; Src
  0040490D: push    413A18h; void *
  00404912: call    _memcpy
  00404917: add     esp, 0Ch
  0040491A: fld     qword ptr ds:411120h
  00404920: sub     esp, 8
  00404923: fstp    [esp+24h+X]; X
  00404926: call    _sin
  0040492B: fstp    st
  0040492D: add     esp, 8
  00404930: mov     ecx, ds:47F808h
  00404936: sub     ecx, 106h
  0040493C: jnz     short loc_40494A
  0040493E: mov     edx, ds:413A4Ch
  00404944: mov     ds:413B5Ch, edx
  0040494A: fld     qword ptr ds:411120h
  00404950: sub     esp, 8
  00404953: fstp    [esp+24h+X]; X
  00404956: call    _sin
  0040495B: fstp    st
  0040495D: add     esp, 8
  00404960: mov     eax, ds:47F808h
  00404965: sub     eax, 107h
  0040496A: jnz     short loc_404978
  0040496C: mov     ecx, ds:413A68h
  00404972: mov     ds:413B58h, ecx
  00404978: fld     qword ptr ds:411120h
  0040497E: sub     esp, 8
  00404981: fstp    [esp+24h+X]; X
  00404984: call    _sin
  00404989: fstp    st
  0040498B: add     esp, 8
  0040498E: mov     edx, ds:47F808h
  00404994: sub     edx, 108h
  0040499A: jnz     short loc_4049BE
  0040499C: movzx   eax, word ptr ds:4139E6h
  004049A3: cmp     eax, 6
  004049A6: jnz     short loc_4049BE
  004049A8: push    40h ; '@'; Size
  004049AA: mov     ecx, ds:41DFD4h
  004049B0: push    ecx; Src
  004049B1: push    41DF90h; void *
  004049B6: call    _memcpy
  004049BB: add     esp, 0Ch
  004049BE: fld     qword ptr ds:411120h
  004049C4: sub     esp, 8
  004049C7: fstp    [esp+24h+X]; X
  004049CA: call    _sin
  004049CF: fstp    st
  004049D1: add     esp, 8
  004049D4: mov     edx, ds:47F808h
  004049DA: sub     edx, 109h
  004049E0: jnz     short loc_404A0D
  004049E2: movzx   eax, word ptr ds:4139E6h
  004049E9: cmp     eax, 6
  004049EC: jnz     short loc_404A0D
  004049EE: push    0F8h ; 'ø'; Size
  004049F3: mov     ecx, ds:41DFD4h
  004049F9: add     ecx, ds:41DFCCh
  004049FF: push    ecx; Src
  00404A00: push    41DE98h; void *
  00404A05: call    _memcpy
  00404A0A: add     esp, 0Ch
  00404A0D: fld     qword ptr ds:411120h
  00404A13: sub     esp, 8
  00404A16: fstp    [esp+24h+X]; X
  00404A19: call    _sin
  00404A1E: fstp    st
  00404A20: add     esp, 8
  00404A23: mov     edx, ds:47F808h
  00404A29: sub     edx, 10Ah
  00404A2F: jnz     short loc_404A3B
  00404A31: mov     eax, ds:41DEE8h
  00404A36: mov     ds:41DFF4h, eax
  00404A3B: fld     qword ptr ds:411120h
  00404A41: sub     esp, 8
  00404A44: fstp    [esp+24h+X]; X
  00404A47: call    _sin
  00404A4C: fstp    st
  00404A4E: add     esp, 8
  00404A51: mov     ecx, ds:47F808h
  00404A57: sub     ecx, 10Bh
  00404A5D: jnz     short loc_404A6B
  00404A5F: mov     edx, ds:41DEECh
  00404A65: mov     ds:41DFF8h, edx
  00404A6B: fld     qword ptr ds:411120h
  00404A71: sub     esp, 8
  00404A74: fstp    [esp+24h+X]; X
  00404A77: call    _sin
  00404A7C: fstp    st
  00404A7E: add     esp, 8
  00404A81: mov     eax, ds:47F808h
  00404A86: sub     eax, 10Ch
  00404A8B: jnz     short loc_404AAE
  00404A8D: movzx   ecx, word ptr ds:4139E4h
  00404A94: cmp     ecx, 7E0h
  00404A9A: jnz     short loc_404AAE
  00404A9C: push    0F4240h; dwBytes
  00404AA1: push    0; uFlags
  00404AA3: call    dword ptr ds:411020h
  00404AA9: mov     ds:41DFD8h, eax
  00404AAE: fld     qword ptr ds:411120h
  00404AB4: sub     esp, 8
  00404AB7: fstp    [esp+24h+X]; X
  00404ABA: call    _sin
  00404ABF: fstp    st
  00404AC1: add     esp, 8
  00404AC4: mov     edx, ds:47F808h
  00404ACA: sub     edx, 10Dh
  00404AD0: jnz     short loc_404AE9
  00404AD2: mov     eax, ds:41DFF4h
  00404AD7: push    eax; Size
  00404AD8: push    0; Val
  00404ADA: mov     ecx, ds:41DFD8h
  00404AE0: push    ecx; void *
  00404AE1: call    _memset
  00404AE6: add     esp, 0Ch
  00404AE9: fld     qword ptr ds:411120h
  00404AEF: sub     esp, 8
  00404AF2: fstp    [esp+24h+X]; X
  00404AF5: call    _sin
  00404AFA: fstp    st
  00404AFC: add     esp, 8
  00404AFF: mov     edx, ds:47F808h
  00404B05: sub     edx, 10Eh
  00404B0B: jnz     short loc_404B17
  00404B0D: mov     eax, ds:41DFD8h
  00404B12: mov     ds:41DFD0h, eax
  00404B17: fld     qword ptr ds:411120h
  00404B1D: sub     esp, 8
  00404B20: fstp    [esp+24h+X]; X
  00404B23: call    _sin
  00404B28: fstp    st
  00404B2A: add     esp, 8
  00404B2D: mov     ecx, ds:47F808h
  00404B33: sub     ecx, 111h
  00404B39: jnz     short loc_404B63
  00404B3B: movzx   edx, word ptr ds:4139E6h
  00404B42: cmp     edx, 6
  00404B45: jnz     short loc_404B63
  00404B47: mov     eax, ds:41DFF8h
  00404B4C: push    eax; Size
  00404B4D: mov     ecx, ds:41DFD4h
  00404B53: push    ecx; Src
  00404B54: mov     edx, ds:41DFD0h
  00404B5A: push    edx; void *
  00404B5B: call    _memcpy
  00404B60: add     esp, 0Ch
  00404B63: fld     qword ptr ds:411120h
  00404B69: sub     esp, 8
  00404B6C: fstp    [esp+24h+X]; X
  00404B6F: call    _sin
  00404B74: fstp    st
  00404B76: add     esp, 8
  00404B79: mov     eax, ds:47F808h
  00404B7E: sub     eax, 112h
  00404B83: jnz     short loc_404BE2
  00404B85: movzx   ecx, word ptr ds:4139E6h
  00404B8C: cmp     ecx, 6
  00404B8F: jnz     short loc_404BE2
  00404B91: mov     eax, ds:41DEECh
  00404B96: xor     edx, edx
  00404B98: div     dword ptr ds:41DED0h
  00404B9E: test    edx, edx
  00404BA0: jnz     short loc_404BB0
  00404BA2: mov     edx, ds:41DEECh
  00404BA8: mov     ds:41DFE0h, edx
  00404BAE: jmp     short loc_404BE2
  00404BB0: mov     eax, ds:41DEECh
  00404BB5: xor     edx, edx
  00404BB7: div     dword ptr ds:41DED0h
  00404BBD: mov     ds:41DFE0h, eax
  00404BC2: mov     eax, ds:41DFE0h
  00404BC7: add     eax, 1
  00404BCA: mov     ds:41DFE0h, eax
  00404BCF: mov     ecx, ds:41DFE0h
  00404BD5: imul    ecx, ds:41DED0h
  00404BDC: mov     ds:41DFE0h, ecx
  00404BE2: fld     qword ptr ds:411120h
  00404BE8: sub     esp, 8
  00404BEB: fstp    [esp+24h+X]; X
  00404BEE: call    _sin
  00404BF3: fstp    st
  00404BF5: add     esp, 8
  00404BF8: mov     edx, ds:47F808h
  00404BFE: sub     edx, 113h
  00404C04: jnz     short loc_404C24
  00404C06: movzx   eax, word ptr ds:4139E6h
  00404C0D: cmp     eax, 6
  00404C10: jnz     short loc_404C24
  00404C12: mov     ecx, ds:41DFD0h
  00404C18: add     ecx, ds:41DFE0h
  00404C1E: mov     ds:41DFD0h, ecx
  00404C24: fld     qword ptr ds:411120h
  00404C2A: sub     esp, 8
  00404C2D: fstp    [esp+24h+X]; X
  00404C30: call    _sin
  00404C35: fstp    st
  00404C37: add     esp, 8
  00404C3A: mov     edx, ds:47F808h
  00404C40: sub     edx, 114h
  00404C46: jnz     loc_404D57
  00404C4C: mov     dword ptr ds:41DFF0h, 0
  00404C56: jmp     short loc_404C65
  00404C58: mov     eax, ds:41DFF0h
  00404C5D: add     eax, 1
  00404C60: mov     ds:41DFF0h, eax
  00404C65: movzx   ecx, word ptr ds:41DE9Eh
  00404C6C: cmp     ds:41DFF0h, ecx
  00404C72: jge     loc_404D50
  00404C78: mov     dword ptr ds:41DFE0h, 0
  00404C82: mov     edx, ds:41DFF0h
  00404C88: imul    edx, 28h ; '('
  00404C8B: mov     eax, [edx+413EA8h]
  00404C91: mov     ds:41DFECh, eax
  00404C96: movzx   ecx, word ptr ds:4139E6h
  00404C9D: cmp     ecx, 6
  00404CA0: jnz     short loc_404CCD
  00404CA2: mov     edx, ds:41DFECh
  00404CA8: push    edx; Size
  00404CA9: mov     eax, ds:41DFF0h
  00404CAE: imul    eax, 28h ; '('
  00404CB1: mov     ecx, ds:41DFD4h
  00404CB7: add     ecx, [eax+413EACh]
  00404CBD: push    ecx; Src
  00404CBE: mov     edx, ds:41DFD0h
  00404CC4: push    edx; void *
  00404CC5: call    _memcpy
  00404CCA: add     esp, 0Ch
  00404CCD: mov     eax, ds:41DFF0h
  00404CD2: imul    eax, 28h ; '('
  00404CD5: mov     eax, [eax+413EA0h]
  00404CDB: xor     edx, edx
  00404CDD: div     dword ptr ds:41DED0h
  00404CE3: test    edx, edx
  00404CE5: jnz     short loc_404CFE
  00404CE7: mov     ecx, ds:41DFF0h
  00404CED: imul    ecx, 28h ; '('
  00404CF0: mov     edx, [ecx+413EA0h]
  00404CF6: mov     ds:41DFE0h, edx
  00404CFC: jmp     short loc_404D3B
  00404CFE: mov     eax, ds:41DFF0h
  00404D03: imul    eax, 28h ; '('
  00404D06: mov     eax, [eax+413EA0h]
  00404D0C: xor     edx, edx
  00404D0E: div     dword ptr ds:41DED0h
  00404D14: mov     ds:41DFE0h, eax
  00404D19: mov     ecx, ds:41DFE0h
  00404D1F: add     ecx, 1
  00404D22: mov     ds:41DFE0h, ecx
  00404D28: mov     edx, ds:41DFE0h
  00404D2E: imul    edx, ds:41DED0h
  00404D35: mov     ds:41DFE0h, edx
  00404D3B: mov     eax, ds:41DFD0h
  00404D40: add     eax, ds:41DFE0h
  00404D46: mov     ds:41DFD0h, eax
  00404D4B: jmp     loc_404C58
  00404D50: mov     byte ptr ds:41E02Ch, 40h ; '@'
  00404D57: fld     qword ptr ds:411120h
  00404D5D: sub     esp, 8
  00404D60: fstp    [esp+24h+X]; X
  00404D63: call    _sin
  00404D68: fstp    st
  00404D6A: add     esp, 8
  00404D6D: mov     ecx, ds:47F808h
  00404D73: sub     ecx, 115h
  00404D79: jnz     short loc_404D8C
  00404D7B: push    44h ; 'D'; Size
  00404D7D: push    0; Val
  00404D7F: push    413E40h; void *
  00404D84: call    _memset
  00404D89: add     esp, 0Ch
  00404D8C: fld     qword ptr ds:411120h
  00404D92: sub     esp, 8
  00404D95: fstp    [esp+24h+X]; X
  00404D98: call    _sin
  00404D9D: fstp    st
  00404D9F: add     esp, 8
  00404DA2: mov     edx, ds:47F808h
  00404DA8: sub     edx, 116h
  00404DAE: jnz     short loc_404DC1
  00404DB0: push    10h; Size
  00404DB2: push    0; Val
  00404DB4: push    413E84h; void *
  00404DB9: call    _memset
  00404DBE: add     esp, 0Ch
  00404DC1: fld     qword ptr ds:411120h
  00404DC7: sub     esp, 8
  00404DCA: fstp    [esp+24h+X]; X
  00404DCD: call    _sin
  00404DD2: fstp    st
  00404DD4: add     esp, 8
  00404DD7: mov     eax, ds:47F808h
  00404DDC: sub     eax, 117h
  00404DE1: jnz     short loc_404DF7
  00404DE3: push    2CCh; Size
  00404DE8: push    0; Val
  00404DEA: push    413B70h; void *
  00404DEF: call    _memset
  00404DF4: add     esp, 0Ch
  00404DF7: fld     qword ptr ds:411120h
  00404DFD: sub     esp, 8
  00404E00: fstp    [esp+24h+X]; X
  00404E03: call    _sin
  00404E08: fstp    st
  00404E0A: add     esp, 8
  00404E0D: mov     ecx, ds:47F808h
  00404E13: sub     ecx, 118h
  00404E19: jnz     short loc_404E25
  00404E1B: mov     dword ptr ds:413E40h, 44h ; 'D'
  00404E25: fld     qword ptr ds:411120h
  00404E2B: sub     esp, 8
  00404E2E: fstp    [esp+24h+X]; X
  00404E31: call    _sin
  00404E36: fstp    st
  00404E38: add     esp, 8
  00404E3B: mov     edx, ds:47F808h
  00404E41: sub     edx, 119h
  00404E47: jnz     short loc_404E7A
  00404E49: movzx   eax, word ptr ds:4139E6h
  00404E50: cmp     eax, 6
  00404E53: jnz     short loc_404E7A
  00404E55: push    413E84h
  00404E5A: push    413E40h
  00404E5F: push    0
  00404E61: push    0
  00404E63: push    4
  00404E65: push    0
  00404E67: push    0
  00404E69: push    0
  00404E6B: call    dword ptr ds:41E00Ch
  00404E71: push    eax
  00404E72: push    0
  00404E74: call    dword ptr ds:41E020h
  00404E7A: fld     qword ptr ds:411120h
  00404E80: sub     esp, 8
  00404E83: fstp    [esp+24h+X]; X
  00404E86: call    _sin
  00404E8B: fstp    st
  00404E8D: add     esp, 8
  00404E90: mov     ecx, ds:47F808h
  00404E96: sub     ecx, 11Ch
  00404E9C: jnz     loc_404FAD
  00404EA2: mov     edx, ds:413B5Ch
  00404EA8: cmp     edx, ds:41DECCh
  00404EAE: jnz     short loc_404F21
  00404EB0: mov     eax, ds:41DFF4h
  00404EB5: cmp     eax, ds:413B58h
  00404EBB: jg      short loc_404F21
  00404EBD: fld     qword ptr ds:411120h
  00404EC3: sub     esp, 8
  00404EC6: fstp    [esp+24h+X]; X
  00404EC9: call    _sin
  00404ECE: fstp    st
  00404ED0: add     esp, 8
  00404ED3: movzx   ecx, word ptr ds:4139E6h
  00404EDA: cmp     ecx, 6
  00404EDD: jnz     short loc_404F06
  00404EDF: push    41DFE4h
  00404EE4: movzx   edx, byte ptr ds:41E02Ch
  00404EEB: push    edx
  00404EEC: mov     eax, ds:41DFF4h
  00404EF1: push    eax
  00404EF2: mov     ecx, ds:41DECCh
  00404EF8: push    ecx
  00404EF9: mov     edx, ds:413E84h
  00404EFF: push    edx
  00404F00: call    dword ptr ds:413A0Ch
  00404F06: fld     qword ptr ds:411120h
  00404F0C: sub     esp, 8
  00404F0F: fstp    [esp+24h+X]; X
  00404F12: call    _sin
  00404F17: fstp    st
  00404F19: add     esp, 8
  00404F1C: jmp     loc_404FAD
  00404F21: fld     qword ptr ds:411120h
  00404F27: sub     esp, 8
  00404F2A: fstp    [esp+24h+X]; X
  00404F2D: call    _sin
  00404F32: fstp    st
  00404F34: add     esp, 8
  00404F37: mov     eax, ds:413B5Ch
  00404F3C: push    eax
  00404F3D: mov     ecx, ds:413E84h
  00404F43: push    ecx
  00404F44: call    dword ptr ds:41E028h
  00404F4A: test    eax, eax
  00404F4C: jnz     short loc_404FAD
  00404F4E: fld     qword ptr ds:411120h
  00404F54: sub     esp, 8
  00404F57: fstp    [esp+24h+X]; X
  00404F5A: call    _sin
  00404F5F: fstp    st
  00404F61: add     esp, 8
  00404F64: movzx   edx, word ptr ds:4139E6h
  00404F6B: cmp     edx, 6
  00404F6E: jnz     short loc_404F97
  00404F70: movzx   eax, byte ptr ds:41E02Ch
  00404F77: push    eax
  00404F78: push    3000h
  00404F7D: mov     ecx, ds:41DFF4h
  00404F83: push    ecx
  00404F84: mov     edx, ds:41DECCh
  00404F8A: push    edx
  00404F8B: mov     eax, ds:413E84h
  00404F90: push    eax
  00404F91: call    dword ptr ds:413A08h
  00404F97: fld     qword ptr ds:411120h
  00404F9D: sub     esp, 8
  00404FA0: fstp    [esp+24h+X]; X
  00404FA3: call    _sin
  00404FA8: fstp    st
  00404FAA: add     esp, 8
  00404FAD: mov     ecx, ds:47F808h
  00404FB3: sub     ecx, 11Dh
  00404FB9: jnz     loc_4050D0
  00404FBF: movzx   edx, word ptr ds:4139E6h
  00404FC6: cmp     edx, 6
  00404FC9: jnz     short loc_404FF0
  00404FCB: push    41DFFCh
  00404FD0: mov     eax, ds:41DFF4h
  00404FD5: push    eax
  00404FD6: mov     ecx, ds:41DFD8h
  00404FDC: push    ecx
  00404FDD: mov     edx, ds:41DECCh
  00404FE3: push    edx
  00404FE4: mov     eax, ds:413E84h
  00404FE9: push    eax
  00404FEA: call    dword ptr ds:41E010h
  00404FF0: fld     qword ptr ds:411120h
  00404FF6: sub     esp, 8
  00404FF9: fstp    [esp+24h+X]; X
  00404FFC: call    _sin
  00405001: fstp    st
  00405003: add     esp, 8
  00405006: movzx   ecx, word ptr ds:4139E6h
  0040500D: cmp     ecx, 6
  00405010: jnz     short loc_405034
  00405012: push    41DFFCh
  00405017: push    4
  00405019: push    41DECCh
  0040501E: mov     edx, ds:413C14h
  00405024: add     edx, 8
  00405027: push    edx
  00405028: mov     eax, ds:413E84h
  0040502D: push    eax
  0040502E: call    dword ptr ds:41E010h
  00405034: fld     qword ptr ds:411120h
  0040503A: sub     esp, 8
  0040503D: fstp    [esp+24h+X]; X
  00405040: call    _sin
  00405045: fstp    st
  00405047: add     esp, 8
  0040504A: mov     ecx, ds:41DECCh
  00405050: add     ecx, ds:41DEC0h
  00405056: mov     ds:413C20h, ecx
  0040505C: movzx   edx, word ptr ds:4139E6h
  00405063: cmp     edx, 6
  00405066: jnz     short loc_405079
  00405068: push    413B70h
  0040506D: mov     eax, ds:413E88h
  00405072: push    eax
  00405073: call    dword ptr ds:41E01Ch
  00405079: mov     ecx, ds:413B5Ch
  0040507F: cmp     ecx, ds:41DECCh
  00405085: jnz     short loc_4050B7
  00405087: mov     edx, ds:41DFF4h
  0040508D: cmp     edx, ds:413B58h
  00405093: jg      short loc_4050B7
  00405095: push    0
  00405097: mov     eax, ds:41DFE4h
  0040509C: push    eax
  0040509D: mov     ecx, ds:41DFF4h
  004050A3: push    ecx
  004050A4: mov     edx, ds:41DECCh
  004050AA: push    edx
  004050AB: mov     eax, ds:413E84h
  004050B0: push    eax
  004050B1: call    dword ptr ds:413A0Ch
  004050B7: movzx   ecx, word ptr ds:4139E6h
  004050BE: cmp     ecx, 6
  004050C1: jnz     short loc_4050D0
  004050C3: mov     edx, ds:413E88h
  004050C9: push    edx
  004050CA: call    dword ptr ds:41E024h
  004050D0: mov     eax, ds:47F808h
  004050D5: sub     eax, 11Eh
  004050DA: jnz     short loc_4050DE
  004050DC: jmp     short loc_405107
  004050DE: lea     ecx, [ebp+SystemTime]
  004050E1: push    ecx; lpSystemTime
  004050E2: call    dword ptr ds:411010h
  004050E8: mov     edx, ds:47F808h
  004050EE: add     edx, 1
  004050F1: mov     ds:47F808h, edx
  004050F7: movzx   eax, [ebp+SystemTime.wYear]
  004050FB: cmp     eax, 7E1h
  00405100: jnz     short loc_405107
  00405102: jmp     loc_40134C
  00405107: mov     eax, [ebp+var_1C]
  0040510A: mov     esp, ebp
  0040510C: pop     ebp
  0040510D: retn

Function: sub_405110
  00405110: push    ebp
  00405111: mov     ebp, esp
  00405113: push    ecx
  00405114: mov     [ebp+var_4], ecx
  00405117: push    18h; Size
  00405119: push    0; Val
  0040511B: mov     eax, [ebp+var_4]
  0040511E: push    eax; void *
  0040511F: call    _memset
  00405124: add     esp, 0Ch
  00405127: mov     eax, [ebp+var_4]
  0040512A: mov     esp, ebp
  0040512C: pop     ebp
  0040512D: retn

Function: sub_405130
  00405130: push    ebp
  00405131: mov     ebp, esp
  00405133: push    0FFFFFFFFh
  00405135: push    411128h
  0040513A: push    405904h
  0040513F: mov     eax, large fs:0
  00405145: push    eax
  00405146: mov     large fs:0, esp
  0040514D: add     esp, 0FFFFFFECh
  00405150: push    ebx
  00405151: push    esi
  00405152: push    edi
  00405153: mov     [ebp+ms_exc.old_esp], esp
  00405156: mov     [ebp+lpCriticalSection], ecx
  00405159: mov     [ebp+var_1C], 0
  00405160: mov     [ebp+ms_exc.registration.TryLevel], 0
  00405167: mov     eax, [ebp+lpCriticalSection]
  0040516A: push    eax; lpCriticalSection
  0040516B: call    dword ptr ds:411024h
  00405171: mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  00405178: jmp     short loc_4051AD
  0040517A: mov     ecx, [ebp+ms_exc.exc_ptr]
  0040517D: mov     edx, [ecx]
  0040517F: mov     eax, [edx]
  00405181: mov     [ebp+var_20], eax
  00405184: mov     eax, 1
  00405189: retn
  0040518A: mov     esp, [ebp+ms_exc.old_esp]
  0040518D: cmp     [ebp+var_20], 0C0000017h
  00405194: jnz     short loc_40519F
  00405196: mov     [ebp+var_1C], 8007000Eh
  0040519D: jmp     short loc_4051A6
  0040519F: mov     [ebp+var_1C], 80004005h
  004051A6: mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  004051AD: mov     eax, [ebp+var_1C]
  004051B0: mov     ecx, [ebp+ms_exc.registration.Next]
  004051B3: mov     large fs:0, ecx
  004051BA: pop     edi
  004051BB: pop     esi
  004051BC: pop     ebx
  004051BD: mov     esp, ebp
  004051BF: pop     ebp
  004051C0: retn

Function: ??1type_info@@UAE@XZ
  004051C1: mov     dword ptr [ecx], 411138h
  004051C7: mov     ecx, [ecx+4]
  004051CA: test    ecx, ecx
  004051CC: jz      short locret_51D5
  004051CE: push    ecx; Block
  004051CF: call    _free
  004051D4: pop     ecx
  004051D5: retn

Function: ??_Gtype_info@@UAEPAXI@Z
  004051D6: push    esi
  004051D7: mov     esi, ecx
  004051D9: call    ??1type_info@@UAE@XZ; type_info::~type_info(void)
  004051DE: test    [esp+4+arg_0], 1
  004051E3: jz      short loc_4051EC
  004051E5: push    esi; Block
  004051E6: call    j__free
  004051EB: pop     ecx
  004051EC: mov     eax, esi
  004051EE: pop     esi
  004051EF: retn    4

Function: __wremove
  004051F2: push    [esp+lpFileName]; lpFileName
  004051F6: call    dword ptr ds:411038h
  004051FC: test    eax, eax
  004051FE: jnz     short loc_405208
  00405200: call    dword ptr ds:411034h
  00405206: jmp     short loc_40520A
  00405208: xor     eax, eax
  0040520A: test    eax, eax
  0040520C: jz      short loc_405219
  0040520E: push    eax
  0040520F: call    __dosmaperr
  00405214: pop     ecx
  00405215: or      eax, 0FFFFFFFFh
  00405218: retn
  00405219: xor     eax, eax
  0040521B: retn

Function: j___wremove
  0040521C: jmp     __wremove

Function: ?name@type_info@@QBEPBDXZ
  00405221: push    esi
  00405222: push    edi
  00405223: mov     edi, ecx
  00405225: cmp     dword ptr [edi+4], 0
  00405229: jnz     short loc_40528B
  0040522B: push    2800h; __int16
  00405230: push    405A05h; int
  00405235: push    40AAB4h; int
  0040523A: push    0; int
  0040523C: lea     eax, [edi+9]
  0040523F: push    eax; char *
  00405240: push    0; char *
  00405242: call    ___unDName
  00405247: mov     esi, eax
  00405249: add     esp, 18h
  0040524C: test    esi, esi
  0040524E: jz      short loc_40528E
  00405250: push    esi; Str
  00405251: call    _strlen
  00405256: dec     eax
  00405257: pop     ecx
  00405258: add     eax, esi
  0040525A: jmp     short loc_405260
  0040525C: mov     byte ptr [eax], 0
  0040525F: dec     eax
  00405260: cmp     byte ptr [eax], 20h ; ' '
  00405263: jz      short loc_40525C
  00405265: push    esi; Str
  00405266: call    _strlen
  0040526B: inc     eax
  0040526C: push    eax; Size
  0040526D: call    _malloc
  00405272: test    eax, eax
  00405274: pop     ecx
  00405275: pop     ecx
  00405276: mov     [edi+4], eax
  00405279: jz      short loc_405284
  0040527B: push    esi; Source
  0040527C: push    eax; Destination
  0040527D: call    _strcpy
  00405282: pop     ecx
  00405283: pop     ecx
  00405284: push    esi; Block
  00405285: call    _free
  0040528A: pop     ecx
  0040528B: mov     eax, [edi+4]
  0040528E: pop     edi
  0040528F: pop     esi
  00405290: retn

Function: __CIsin
  004052A0: sub     esp, 0Ch
  004052A3: fst     [esp+0Ch+var_C]
  004052A6: call    __checkTOS_withFB
  004052AB: call    start_0
  004052B0: add     esp, 0Ch
  004052B3: retn

Function: _sin
  004052B4: lea     edx, [esp+X]
  004052B8: call    __fload_withFB
  004052BD: push    edx
  004052BE: fstcw   [esp+4+var_4]
  004052C2: jz      short inf_or_nan
  004052C4: cmp     [esp+4+var_4], 27Fh
  004052CA: jz      short CW_is_set_to_default
  004052CC: fldcw   word ptr ds:411AD8h
  004052D2: fsin
  004052D4: fstsw   ax
  004052D7: sahf
  004052D8: jp      short reduce_arg
  004052DA: cmp     dword ptr ds:41E038h, 0
  004052E1: jnz     __fast_exit
  004052E7: mov     edx, 1Eh
  004052EC: lea     ecx, ds:413060h
  004052F2: jmp     __math_exit
  004052F7: fld     tbyte ptr ds:411ADAh
  004052FD: fxch    st(1)
  004052FF: fprem1
  00405301: fstsw   ax
  00405304: sahf
  00405305: jp      short redux_loop
  00405307: fstp    st(1)
  00405309: fsin
  0040530B: jmp     short exit
  0040530D: call    __convertTOStoQNaN
  00405312: jmp     short _Error_handling
  00405314: test    eax, 0FFFFFh
  00405319: jnz     short not_infinity
  0040531B: cmp     dword ptr [esp+4+X], 0
  00405320: jnz     short not_infinity
  00405322: fstp    st
  00405324: fld     tbyte ptr ds:413210h
  0040532A: mov     eax, 1
  0040532F: cmp     dword ptr ds:41E038h, 0
  00405336: jnz     __fast_exit
  0040533C: mov     edx, 1Eh
  00405341: lea     ecx, ds:413060h
  00405347: call    __startOneArgErrorHandling
  0040534C: pop     edx
  0040534D: retn
  0040AD3E: cmp     [esp+4+var_4], 27Fh
  0040AD44: jz      short fast_exit_CW_is_restored
  0040AD46: fldcw   [esp+4+var_4]
  0040AD49: pop     edx
  0040AD4A: retn
  0040AD4B: mov     ax, [esp+4+var_4]
  0040AD4F: cmp     ax, 27Fh
  0040AD53: jz      short CW_is_restored
  0040AD55: and     ax, 20h
  0040AD59: jz      short restore_CW
  0040AD5B: fstsw   ax
  0040AD5E: and     ax, 20h
  0040AD62: jz      short restore_CW
  0040AD64: mov     eax, 8
  0040AD69: call    __startOneArgErrorHandling
  0040AD6E: pop     edx
  0040AD6F: retn
  0040AD70: fldcw   [esp+4+var_4]
  0040AD73: pop     edx
  0040AD74: retn

Function: nullsub_1
  0040534E: retn

Function: __cfltcvt_init
  0040534F: mov     eax, 40B213h
  00405354: mov     ds:413240h, eax
  00405359: mov     dword ptr ds:413244h, 40AEDBh
  00405363: mov     dword ptr ds:413248h, 40AF40h
  0040536D: mov     dword ptr ds:41324Ch, 40AE83h
  00405377: mov     dword ptr ds:413250h, 40AF26h
  00405381: mov     ds:413254h, eax
  00405386: retn

Function: __fpmath
  00405387: call    __cfltcvt_init
  0040538C: call    __ms_p5_mp_test_fdiv
  00405391: cmp     [esp+arg_0], 0
  00405396: mov     ds:41E03Ch, eax
  0040539B: jz      short loc_4053A2
  0040539D: call    __setdefaultprecision
  004053A2: fnclex
  004053A4: retn

Function: _memcpy
  004053B0: push    ebp
  004053B1: mov     ebp, esp
  004053B3: push    edi
  004053B4: push    esi
  004053B5: mov     esi, [ebp+Src]
  004053B8: mov     ecx, [ebp+Size]
  004053BB: mov     edi, [ebp+arg_0]
  004053BE: mov     eax, ecx
  004053C0: mov     edx, ecx
  004053C2: add     eax, esi
  004053C4: cmp     edi, esi
  004053C6: jbe     short CopyUp
  004053C8: cmp     edi, eax
  004053CA: jb      CopyDown
  004053D0: test    edi, 3
  004053D6: jnz     short CopyLeadUp
  004053D8: shr     ecx, 2
  004053DB: and     edx, 3
  004053DE: cmp     ecx, 8; switch with an invalid jump table
  004053E1: jb      short CopyUnwindUp
  004053E3: rep movsd; jumptable 0040540C default case
  004053E5: jmp     dword ptr [edx*4+4054FCh]
  004053EC: mov     eax, edi
  004053EE: mov     edx, 3
  004053F3: sub     ecx, 4
  004053F6: jb      short ByteCopyUp
  004053F8: and     eax, 3
  004053FB: add     ecx, eax
  004053FD: jmp     dword ptr ds:405410h[eax*4]
  00405404: jmp     dword ptr ds:40550Ch[ecx*4]
  0040540C: jmp     dword ptr [ecx*4+405490h]; switch jump
  00405420: and     edx, ecx
  00405422: mov     al, [esi]
  00405424: mov     [edi], al
  00405426: mov     al, [esi+1]
  00405429: mov     [edi+1], al
  0040542C: mov     al, [esi+2]
  0040542F: shr     ecx, 2
  00405432: mov     [edi+2], al
  00405435: add     esi, 3
  00405438: add     edi, 3
  0040543B: cmp     ecx, 8
  0040543E: jb      short CopyUnwindUp
  00405440: rep movsd
  00405442: jmp     dword ptr [edx*4+4054FCh]
  0040544C: and     edx, ecx
  0040544E: mov     al, [esi]
  00405450: mov     [edi], al
  00405452: mov     al, [esi+1]
  00405455: shr     ecx, 2
  00405458: mov     [edi+1], al
  0040545B: add     esi, 2
  0040545E: add     edi, 2
  00405461: cmp     ecx, 8
  00405464: jb      short CopyUnwindUp
  00405466: rep movsd
  00405468: jmp     dword ptr [edx*4+4054FCh]
  00405470: and     edx, ecx
  00405472: mov     al, [esi]
  00405474: mov     [edi], al
  00405476: add     esi, 1
  00405479: shr     ecx, 2
  0040547C: add     edi, 1
  0040547F: cmp     ecx, 8
  00405482: jb      short CopyUnwindUp
  00405484: rep movsd
  00405486: jmp     dword ptr [edx*4+4054FCh]
  004054B0: mov     eax, [esi+ecx*4-1Ch]; jumptable 0040540C case 7
  004054B4: mov     [edi+ecx*4-1Ch], eax
  004054B8: mov     eax, [esi+ecx*4-18h]; jumptable 0040540C case 6
  004054BC: mov     [edi+ecx*4-18h], eax
  004054C0: mov     eax, [esi+ecx*4-14h]; jumptable 0040540C case 5
  004054C4: mov     [edi+ecx*4-14h], eax
  004054C8: mov     eax, [esi+ecx*4-10h]; jumptable 0040540C case 4
  004054CC: mov     [edi+ecx*4-10h], eax
  004054D0: mov     eax, [esi+ecx*4-0Ch]; jumptable 0040540C case 3
  004054D4: mov     [edi+ecx*4-0Ch], eax
  004054D8: mov     eax, [esi+ecx*4-8]; jumptable 0040540C case 2
  004054DC: mov     [edi+ecx*4-8], eax
  004054E0: mov     eax, [esi+ecx*4-4]; jumptable 0040540C case 1
  004054E4: mov     [edi+ecx*4-4], eax
  004054E8: lea     eax, ds:0[ecx*4]
  004054EF: add     esi, eax
  004054F1: add     edi, eax
  004054F3: jmp     dword ptr [edx*4+4054FCh]; jumptable 0040540C case 0
  0040550C: mov     eax, [ebp+arg_0]; jumptable 004053E5 case 0
  0040550F: pop     esi
  00405510: pop     edi
  00405511: leave
  00405512: retn
  00405514: mov     al, [esi]; jumptable 004053E5 case 1
  00405516: mov     [edi], al
  00405518: mov     eax, [ebp+arg_0]
  0040551B: pop     esi
  0040551C: pop     edi
  0040551D: leave
  0040551E: retn
  00405520: mov     al, [esi]; jumptable 004053E5 case 2
  00405522: mov     [edi], al
  00405524: mov     al, [esi+1]
  00405527: mov     [edi+1], al
  0040552A: mov     eax, [ebp+arg_0]
  0040552D: pop     esi
  0040552E: pop     edi
  0040552F: leave
  00405530: retn
  00405534: mov     al, [esi]; jumptable 004053E5 case 3
  00405536: mov     [edi], al
  00405538: mov     al, [esi+1]
  0040553B: mov     [edi+1], al
  0040553E: mov     al, [esi+2]
  00405541: mov     [edi+2], al
  00405544: mov     eax, [ebp+arg_0]
  00405547: pop     esi
  00405548: pop     edi
  00405549: leave
  0040554A: retn
  0040554C: lea     esi, [ecx+esi-4]
  00405550: lea     edi, [ecx+edi-4]
  00405554: test    edi, 3
  0040555A: jnz     short CopyLeadDown
  0040555C: shr     ecx, 2
  0040555F: and     edx, 3
  00405562: cmp     ecx, 8
  00405565: jb      short CopyUnwindDown
  00405567: std
  00405568: rep movsd
  0040556A: cld
  0040556B: jmp     dword ptr [edx*4+405698h]
  00405574: neg     ecx
  00405576: jmp     dword ptr [ecx*4+405648h]
  00405580: mov     eax, edi
  00405582: mov     edx, 3
  00405587: cmp     ecx, 4; switch with an invalid jump table
  0040558A: jb      short ByteCopyDown
  0040558C: and     eax, 3; jumptable 00405598 default case
  0040558F: sub     ecx, eax
  00405591: jmp     dword ptr ds:40559Ch[eax*4]
  00405598: jmp     dword ptr [ecx*4+405698h]; switch jump
  004055AC: mov     al, [esi+3]
  004055AF: and     edx, ecx
  004055B1: mov     [edi+3], al
  004055B4: sub     esi, 1
  004055B7: shr     ecx, 2
  004055BA: sub     edi, 1
  004055BD: cmp     ecx, 8
  004055C0: jb      short CopyUnwindDown
  004055C2: std
  004055C3: rep movsd
  004055C5: cld
  004055C6: jmp     dword ptr [edx*4+405698h]
  004055D0: mov     al, [esi+3]
  004055D3: and     edx, ecx
  004055D5: mov     [edi+3], al
  004055D8: mov     al, [esi+2]
  004055DB: shr     ecx, 2
  004055DE: mov     [edi+2], al
  004055E1: sub     esi, 2
  004055E4: sub     edi, 2
  004055E7: cmp     ecx, 8
  004055EA: jb      short CopyUnwindDown
  004055EC: std
  004055ED: rep movsd
  004055EF: cld
  004055F0: jmp     dword ptr [edx*4+405698h]
  004055F8: mov     al, [esi+3]
  004055FB: and     edx, ecx
  004055FD: mov     [edi+3], al
  00405600: mov     al, [esi+2]
  00405603: mov     [edi+2], al
  00405606: mov     al, [esi+1]
  00405609: shr     ecx, 2
  0040560C: mov     [edi+1], al
  0040560F: sub     esi, 3
  00405612: sub     edi, 3
  00405615: cmp     ecx, 8
  00405618: jb      CopyUnwindDown
  0040561E: std
  0040561F: rep movsd
  00405621: cld
  00405622: jmp     dword ptr [edx*4+405698h]
  0040564C: mov     eax, [esi+ecx*4+1Ch]
  00405650: mov     [edi+ecx*4+1Ch], eax
  00405654: mov     eax, [esi+ecx*4+18h]
  00405658: mov     [edi+ecx*4+18h], eax
  0040565C: mov     eax, [esi+ecx*4+14h]
  00405660: mov     [edi+ecx*4+14h], eax
  00405664: mov     eax, [esi+ecx*4+10h]
  00405668: mov     [edi+ecx*4+10h], eax
  0040566C: mov     eax, [esi+ecx*4+0Ch]
  00405670: mov     [edi+ecx*4+0Ch], eax
  00405674: mov     eax, [esi+ecx*4+8]
  00405678: mov     [edi+ecx*4+8], eax
  0040567C: mov     eax, [esi+ecx*4+4]
  00405680: mov     [edi+ecx*4+4], eax
  00405684: lea     eax, ds:0[ecx*4]
  0040568B: add     esi, eax
  0040568D: add     edi, eax
  0040568F: jmp     dword ptr [edx*4+405698h]; jumptable 00405576 case 0
  004056A8: mov     eax, [ebp+arg_0]; jumptable 0040556B case 0
  004056AB: pop     esi
  004056AC: pop     edi
  004056AD: leave
  004056AE: retn
  004056B0: mov     al, [esi+3]; jumptable 0040556B case 1
  004056B3: mov     [edi+3], al
  004056B6: mov     eax, [ebp+arg_0]
  004056B9: pop     esi
  004056BA: pop     edi
  004056BB: leave
  004056BC: retn
  004056C0: mov     al, [esi+3]; jumptable 0040556B case 2
  004056C3: mov     [edi+3], al
  004056C6: mov     al, [esi+2]
  004056C9: mov     [edi+2], al
  004056CC: mov     eax, [ebp+arg_0]
  004056CF: pop     esi
  004056D0: pop     edi
  004056D1: leave
  004056D2: retn
  004056D4: mov     al, [esi+3]; jumptable 0040556B case 3
  004056D7: mov     [edi+3], al
  004056DA: mov     al, [esi+2]
  004056DD: mov     [edi+2], al
  004056E0: mov     al, [esi+1]
  004056E3: mov     [edi+1], al
  004056E6: mov     eax, [ebp+arg_0]
  004056E9: pop     esi
  004056EA: pop     edi
  004056EB: leave
  004056EC: retn

Function: _memset
  004056F0: mov     edx, [esp+Size]
  004056F4: mov     ecx, [esp+arg_0]
  004056F8: test    edx, edx
  004056FA: jz      short toend
  004056FC: xor     eax, eax
  004056FE: mov     al, byte ptr [esp+Val]
  00405702: push    edi
  00405703: mov     edi, ecx
  00405705: cmp     edx, 4
  00405708: jb      short tail
  0040570A: neg     ecx
  0040570C: and     ecx, 3
  0040570F: jz      short dwords
  00405711: sub     edx, ecx
  00405713: mov     [edi], al
  00405715: add     edi, 1
  00405718: sub     ecx, 1
  0040571B: jnz     short adjust_loop
  0040571D: mov     ecx, eax
  0040571F: shl     eax, 8
  00405722: add     eax, ecx
  00405724: mov     ecx, eax
  00405726: shl     eax, 10h
  00405729: add     eax, ecx
  0040572B: mov     ecx, edx
  0040572D: and     edx, 3
  00405730: shr     ecx, 2
  00405733: jz      short tail
  00405735: rep stosd
  00405737: test    edx, edx
  00405739: jz      short finish
  0040573B: mov     [edi], al
  0040573D: add     edi, 1
  00405740: sub     edx, 1
  00405743: jnz     short tail
  00405745: mov     eax, [esp+4+arg_0]
  00405749: pop     edi
  0040574A: retn
  0040574B: mov     eax, [esp+arg_0]
  0040574F: retn

Function: __onexit
  00405750: push    esi
  00405751: push    dword ptr ds:41E68Ch; Block
  00405757: call    __msize
  0040575C: pop     ecx
  0040575D: mov     ecx, ds:41E688h
  00405763: mov     esi, eax
  00405765: mov     eax, ds:41E68Ch
  0040576A: mov     edx, ecx
  0040576C: sub     edx, eax
  0040576E: add     edx, 4
  00405771: cmp     esi, edx
  00405773: jnb     short loc_4057C3
  00405775: mov     ecx, 800h
  0040577A: cmp     esi, ecx
  0040577C: jnb     short loc_405780
  0040577E: mov     ecx, esi
  00405780: add     ecx, esi
  00405782: push    ecx; Size
  00405783: push    eax; Block
  00405784: call    _realloc
  00405789: test    eax, eax
  0040578B: pop     ecx
  0040578C: pop     ecx
  0040578D: jnz     short loc_4057A6
  0040578F: add     esi, 10h
  00405792: push    esi; Size
  00405793: push    dword ptr ds:41E68Ch; Block
  00405799: call    _realloc
  0040579E: test    eax, eax
  004057A0: pop     ecx
  004057A1: pop     ecx
  004057A2: jnz     short loc_4057A6
  004057A4: pop     esi
  004057A5: retn
  004057A6: mov     ecx, ds:41E688h
  004057AC: sub     ecx, ds:41E68Ch
  004057B2: mov     ds:41E68Ch, eax
  004057B7: sar     ecx, 2
  004057BA: lea     ecx, [eax+ecx*4]
  004057BD: mov     ds:41E688h, ecx
  004057C3: mov     eax, [esp+4+Func]
  004057C7: mov     [ecx], eax
  004057C9: add     dword ptr ds:41E688h, 4
  004057D0: pop     esi
  004057D1: retn

Function: _atexit
  004057D2: push    [esp+Func]; Func
  004057D6: call    __onexit
  004057DB: neg     eax
  004057DD: sbb     eax, eax
  004057DF: neg     eax
  004057E1: pop     ecx
  004057E2: dec     eax
  004057E3: retn

Function: __global_unwind2
  0040580C: push    ebp
  0040580D: mov     ebp, esp
  0040580F: push    ebx
  00405810: push    esi
  00405811: push    edi
  00405812: push    ebp
  00405813: push    0; ReturnValue
  00405815: push    0; ExceptionRecord
  00405817: push    405824h; TargetIp
  0040581C: push    [ebp+TargetFrame]; TargetFrame
  0040581F: call    RtlUnwind
  00405824: pop     ebp
  00405825: pop     edi
  00405826: pop     esi
  00405827: pop     ebx
  00405828: mov     esp, ebp
  0040582A: pop     ebp
  0040582B: retn

Function: __unwind_handler
  0040582C: mov     ecx, [esp+arg_0]
  00405830: test    dword ptr [ecx+4], 6
  00405837: mov     eax, 1
  0040583C: jz      short _uh_return
  0040583E: mov     eax, [esp+arg_4]
  00405842: mov     edx, [esp+arg_C]
  00405846: mov     [edx], eax
  00405848: mov     eax, 3
  0040584D: retn

Function: __local_unwind2
  0040584E: push    ebx
  0040584F: push    esi
  00405850: push    edi
  00405851: mov     eax, [esp+0Ch+arg_0]
  00405855: push    eax
  00405856: push    0FFFFFFFEh
  00405858: push    40582Ch
  0040585D: push    large dword ptr fs:0
  00405864: mov     large fs:0, esp
  0040586B: mov     eax, [esp+1Ch+arg_0]
  0040586F: mov     ebx, [eax+8]
  00405872: mov     esi, [eax+0Ch]
  00405875: cmp     esi, 0FFFFFFFFh
  00405878: jz      short _lu_done
  0040587A: cmp     esi, [esp+1Ch+arg_4]
  0040587E: jz      short _lu_done
  00405880: lea     esi, [esi+esi*2]
  00405883: mov     ecx, [ebx+esi*4]
  00405886: mov     [esp+1Ch+var_14], ecx
  0040588A: mov     [eax+0Ch], ecx
  0040588D: cmp     dword ptr [ebx+esi*4+4], 0
  00405892: jnz     short __NLG_Return2
  00405894: push    101h
  00405899: mov     eax, [ebx+esi*4+8]
  0040589D: call    __NLG_Notify
  004058A2: call    dword ptr [ebx+esi*4+8]
  004058A6: jmp     short _lu_top
  004058A8: pop     large dword ptr fs:0
  004058AF: add     esp, 0Ch
  004058B2: pop     edi
  004058B3: pop     esi
  004058B4: pop     ebx
  004058B5: retn

Function: __abnormal_termination
  004058B6: xor     eax, eax
  004058B8: mov     ecx, large fs:0
  004058BF: cmp     dword ptr [ecx+4], 40582Ch
  004058C6: jnz     short _at_done
  004058C8: mov     edx, [ecx+0Ch]
  004058CB: mov     edx, [edx+0Ch]
  004058CE: cmp     [ecx+8], edx
  004058D1: jnz     short _at_done
  004058D3: mov     eax, 1

Function: _at_done
  004058D8: retn

Function: __NLG_Notify1
  004058D9: push    ebx
  004058DA: push    ecx
  004058DB: mov     ebx, 413080h
  004058E0: jmp     short __NLG_Go

Function: __NLG_Notify
  004058E2: push    ebx
  004058E3: push    ecx
  004058E4: mov     ebx, 413080h
  004058E9: mov     ecx, [ebp+8]
  004058EC: mov     [ebx+8], ecx
  004058EF: mov     [ebx+4], eax
  004058F2: mov     [ebx+0Ch], ebp
  004058F5: pop     ecx
  004058F6: pop     ebx
  004058F7: retn    4

Function: __except_handler3
  00405904: push    ebp
  00405905: mov     ebp, esp
  00405907: sub     esp, 8
  0040590A: push    ebx
  0040590B: push    esi
  0040590C: push    edi
  0040590D: push    ebp
  0040590E: cld
  0040590F: mov     ebx, [ebp+TargetFrame]
  00405912: mov     eax, [ebp+arg_0]
  00405915: test    dword ptr [eax+4], 6
  0040591C: jnz     _lh_unwinding
  00405922: mov     [ebp+var_8], eax
  00405925: mov     eax, [ebp+arg_8]
  00405928: mov     [ebp+var_4], eax
  0040592B: lea     eax, [ebp+var_8]
  0040592E: mov     [ebx-4], eax
  00405931: mov     esi, [ebx+0Ch]
  00405934: mov     edi, [ebx+8]
  00405937: push    ebx
  00405938: call    __ValidateEH3RN
  0040593D: add     esp, 4
  00405940: or      eax, eax
  00405942: jz      short _lh_abort
  00405944: cmp     esi, 0FFFFFFFFh
  00405947: jz      short _lh_bagit
  00405949: lea     ecx, [esi+esi*2]
  0040594C: mov     eax, [edi+ecx*4+4]
  00405950: or      eax, eax
  00405952: jz      short _lh_continue
  00405954: push    esi
  00405955: push    ebp
  00405956: lea     ebp, [ebx+10h]
  00405959: xor     ebx, ebx
  0040595B: xor     ecx, ecx
  0040595D: xor     edx, edx
  0040595F: xor     esi, esi
  00405961: xor     edi, edi
  00405963: call    eax
  00405965: pop     ebp
  00405966: pop     esi
  00405967: mov     ebx, [ebp+TargetFrame]
  0040596A: or      eax, eax
  0040596C: jz      short _lh_continue
  0040596E: js      short _lh_dismiss
  00405970: mov     edi, [ebx+8]
  00405973: push    ebx; TargetFrame
  00405974: call    __global_unwind2
  00405979: add     esp, 4
  0040597C: lea     ebp, [ebx+10h]
  0040597F: push    esi
  00405980: push    ebx
  00405981: call    __local_unwind2
  00405986: add     esp, 8
  00405989: lea     ecx, [esi+esi*2]
  0040598C: push    1
  0040598E: mov     eax, [edi+ecx*4+8]
  00405992: call    __NLG_Notify
  00405997: mov     eax, [edi+ecx*4]
  0040599A: mov     [ebx+0Ch], eax
  0040599D: mov     eax, [edi+ecx*4+8]
  004059A1: xor     ebx, ebx
  004059A3: xor     ecx, ecx
  004059A5: xor     edx, edx
  004059A7: xor     esi, esi
  004059A9: xor     edi, edi
  004059AB: call    eax
  004059AD: mov     edi, [ebx+8]
  004059B0: lea     ecx, [esi+esi*2]
  004059B3: mov     esi, [edi+ecx*4]
  004059B6: jmp     short _lh_top
  004059B8: mov     eax, 0
  004059BD: jmp     short _lh_return
  004059BF: mov     eax, [ebp+arg_0]
  004059C2: or      dword ptr [eax+4], 8
  004059C6: mov     eax, 1
  004059CB: jmp     short _lh_return
  004059CD: push    ebp
  004059CE: lea     ebp, [ebx+10h]
  004059D1: push    0FFFFFFFFh
  004059D3: push    ebx
  004059D4: call    __local_unwind2
  004059D9: add     esp, 8
  004059DC: pop     ebp
  004059DD: mov     eax, 1
  004059E2: pop     ebp
  004059E3: pop     edi
  004059E4: pop     esi
  004059E5: pop     ebx
  004059E6: mov     esp, ebp
  004059E8: pop     ebp
  004059E9: retn

Function: __seh_longjmp_unwind@4
  004059EA: push    ebp
  004059EB: mov     ecx, [esp+4+arg_0]
  004059EF: mov     ebp, [ecx]
  004059F1: mov     eax, [ecx+1Ch]
  004059F4: push    eax
  004059F5: mov     eax, [ecx+18h]
  004059F8: push    eax
  004059F9: call    __local_unwind2
  004059FE: add     esp, 8
  00405A01: pop     ebp
  00405A02: retn    4

Function: _free
  00405A05: push    esi
  00405A06: mov     esi, [esp+4+lpMem]
  00405A0A: test    esi, esi
  00405A0C: jz      short loc_405A3B
  00405A0E: cmp     dword ptr ds:41E680h, 3
  00405A15: push    esi; lpMem
  00405A16: jnz     short loc_405A2D
  00405A18: call    ___sbh_find_block
  00405A1D: test    eax, eax
  00405A1F: pop     ecx
  00405A20: push    esi
  00405A21: jz      short loc_405A2D
  00405A23: push    eax
  00405A24: call    ___sbh_free_block
  00405A29: pop     ecx
  00405A2A: pop     ecx
  00405A2B: pop     esi
  00405A2C: retn
  00405A2D: push    0; dwFlags
  00405A2F: push    dword ptr ds:41E67Ch; hHeap
  00405A35: call    dword ptr ds:411040h
  00405A3B: pop     esi
  00405A3C: retn

Function: __amsg_exit
  00405A3D: cmp     dword ptr ds:41E048h, 1
  00405A44: jnz     short loc_405A4B
  00405A46: call    __FF_MSGBANNER
  00405A4B: push    [esp+NumberOfBytesWritten]; NumberOfBytesWritten
  00405A4F: call    __NMSG_WRITE
  00405A54: push    0FFh; Code
  00405A59: call    dword ptr ds:413090h
  00405A5F: pop     ecx
  00405A60: pop     ecx
  00405A61: retn

Function: start
  00405A62: push    60h
  00405A64: push    411140h
  00405A69: call    __SEH_prolog
  00405A6E: mov     edi, 94h ; '”'
  00405A73: mov     eax, edi
  00405A75: call    __alloca_probe
  00405A7A: mov     [ebp+ms_exc.old_esp], esp
  00405A7D: mov     esi, esp
  00405A7F: mov     [esi], edi
  00405A81: push    esi; lpVersionInformation
  00405A82: call    dword ptr ds:411000h
  00405A88: mov     ecx, [esi+10h]
  00405A8B: mov     ds:41E0A4h, ecx
  00405A91: mov     eax, [esi+4]
  00405A94: mov     ds:41E0B0h, eax
  00405A99: mov     edx, [esi+8]
  00405A9C: mov     ds:41E0B4h, edx
  00405AA2: mov     esi, [esi+0Ch]
  00405AA5: and     esi, 7FFFh
  00405AAB: mov     ds:41E0A8h, esi
  00405AB1: cmp     ecx, 2
  00405AB4: jz      short loc_405AC2
  00405AB6: or      esi, 8000h
  00405ABC: mov     ds:41E0A8h, esi
  00405AC2: shl     eax, 8
  00405AC5: add     eax, edx
  00405AC7: mov     ds:41E0ACh, eax
  00405ACC: xor     esi, esi
  00405ACE: push    esi; lpModuleName
  00405ACF: mov     edi, ds:411044h
  00405AD5: call    edi ; GetModuleHandleA
  00405AD7: cmp     word ptr [eax], 5A4Dh
  00405ADC: jnz     short loc_405AFD
  00405ADE: mov     ecx, [eax+3Ch]
  00405AE1: add     ecx, eax
  00405AE3: cmp     dword ptr [ecx], 4550h
  00405AE9: jnz     short loc_405AFD
  00405AEB: movzx   eax, word ptr [ecx+18h]
  00405AEF: cmp     eax, 10Bh
  00405AF4: jz      short loc_405B15
  00405AF6: cmp     eax, 20Bh
  00405AFB: jz      short loc_405B02
  00405AFD: mov     [ebp+var_1C], esi
  00405B00: jmp     short loc_405B29
  00405B02: cmp     dword ptr [ecx+84h], 0Eh
  00405B09: jbe     short loc_405AFD
  00405B0B: xor     eax, eax
  00405B0D: cmp     [ecx+0F8h], esi
  00405B13: jmp     short loc_405B23
  00405B15: cmp     dword ptr [ecx+74h], 0Eh
  00405B19: jbe     short loc_405AFD
  00405B1B: xor     eax, eax
  00405B1D: cmp     [ecx+0E8h], esi
  00405B23: setnz   al
  00405B26: mov     [ebp+var_1C], eax
  00405B29: push    esi
  00405B2A: call    __heap_init
  00405B2F: pop     ecx
  00405B30: test    eax, eax
  00405B32: jnz     short loc_405B55
  00405B34: cmp     dword ptr ds:41E048h, 1
  00405B3B: jnz     short loc_405B42
  00405B3D: call    __FF_MSGBANNER
  00405B42: push    1Ch; NumberOfBytesWritten
  00405B44: call    __NMSG_WRITE
  00405B49: push    0FFh; uExitCode
  00405B4E: call    ___crtExitProcess
  00405B55: call    sub_40CCEB
  00405B5A: mov     [ebp+ms_exc.registration.TryLevel], esi
  00405B5D: call    __ioinit
  00405B62: test    eax, eax
  00405B64: jge     short loc_405B6E
  00405B66: push    1Bh; NumberOfBytesWritten
  00405B68: call    __amsg_exit
  00405B6E: call    dword ptr ds:41104Ch
  00405B74: mov     ds:41E694h, eax
  00405B79: call    ___crtGetEnvironmentStringsA
  00405B7E: mov     ds:41E040h, eax
  00405B83: call    __setargv
  00405B88: test    eax, eax
  00405B8A: jge     short loc_405B94
  00405B8C: push    8; NumberOfBytesWritten
  00405B8E: call    __amsg_exit
  00405B94: call    __setenvp
  00405B99: test    eax, eax
  00405B9B: jge     short loc_405BA5
  00405B9D: push    9; NumberOfBytesWritten
  00405B9F: call    __amsg_exit
  00405BA5: push    1
  00405BA7: call    __cinit
  00405BAC: pop     ecx
  00405BAD: mov     [ebp+var_28], eax
  00405BB0: cmp     eax, esi
  00405BB2: jz      short loc_405BBB
  00405BB4: push    eax; NumberOfBytesWritten
  00405BB5: call    __amsg_exit
  00405BBB: mov     [ebp+StartupInfo.dwFlags], esi
  00405BBE: lea     eax, [ebp+StartupInfo]
  00405BC1: push    eax; lpStartupInfo
  00405BC2: call    dword ptr ds:411048h
  00405BC8: call    __wincmdln
  00405BCD: mov     [ebp+lpCmdLine], eax
  00405BD0: test    byte ptr [ebp+StartupInfo.dwFlags], 1
  00405BD4: jz      short loc_405BDC
  00405BD6: movzx   eax, [ebp+StartupInfo.wShowWindow]
  00405BDA: jmp     short loc_405BDF
  00405BDC: push    0Ah
  00405BDE: pop     eax
  00405BDF: push    eax; nShowCmd
  00405BE0: push    [ebp+lpCmdLine]; lpCmdLine
  00405BE3: push    esi; hPrevInstance
  00405BE4: push    esi; lpModuleName
  00405BE5: call    edi ; GetModuleHandleA
  00405BE7: push    eax; hInstance
  00405BE8: call    _WinMain@16; WinMain(x,x,x,x)
  00405BED: mov     edi, eax
  00405BEF: mov     [ebp+var_2C], edi
  00405BF2: cmp     [ebp+var_1C], esi
  00405BF5: jnz     short loc_405BFD
  00405BF7: push    edi; Code
  00405BF8: call    _exit
  00405BFD: call    __cexit
  00405C02: jmp     short loc_405C2F
  00405C04: mov     eax, [ebp+ms_exc.exc_ptr]
  00405C07: mov     ecx, [eax]
  00405C09: mov     ecx, [ecx]
  00405C0B: mov     [ebp+Code], ecx
  00405C0E: push    eax; ExceptionInfo
  00405C0F: push    ecx; int
  00405C10: call    __XcptFilter
  00405C15: pop     ecx
  00405C16: pop     ecx
  00405C17: retn
  00405C18: mov     esp, [ebp+ms_exc.old_esp]
  00405C1B: mov     edi, [ebp+Code]
  00405C1E: cmp     [ebp+var_1C], 0
  00405C22: jnz     short loc_405C2A
  00405C24: push    edi; Code
  00405C25: call    __exit
  00405C2A: call    __c_exit
  00405C2F: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  00405C33: mov     eax, edi
  00405C35: lea     esp, [ebp-7Ch]
  00405C38: call    __SEH_epilog
  00405C3D: retn

Function: j__free
  00405C3E: jmp     _free

Function: _strcmp
  00405C50: mov     edx, [esp+Str1]
  00405C54: mov     ecx, [esp+Str2]
  00405C58: test    edx, 3
  00405C5E: jnz     short dopartial
  00405C60: mov     eax, [edx]
  00405C62: cmp     al, [ecx]
  00405C64: jnz     short donene
  00405C66: or      al, al
  00405C68: jz      short doneeq
  00405C6A: cmp     ah, [ecx+1]
  00405C6D: jnz     short donene
  00405C6F: or      ah, ah
  00405C71: jz      short doneeq
  00405C73: shr     eax, 10h
  00405C76: cmp     al, [ecx+2]
  00405C79: jnz     short donene
  00405C7B: or      al, al
  00405C7D: jz      short doneeq
  00405C7F: cmp     ah, [ecx+3]
  00405C82: jnz     short donene
  00405C84: add     ecx, 4
  00405C87: add     edx, 4
  00405C8A: or      ah, ah
  00405C8C: jnz     short dodwords
  00405C8E: mov     edi, edi
  00405C90: xor     eax, eax
  00405C92: retn
  00405C94: sbb     eax, eax
  00405C96: shl     eax, 1
  00405C98: add     eax, 1
  00405C9B: retn
  00405C9C: test    edx, 1
  00405CA2: jz      short doword
  00405CA4: mov     al, [edx]
  00405CA6: add     edx, 1
  00405CA9: cmp     al, [ecx]
  00405CAB: jnz     short donene
  00405CAD: add     ecx, 1
  00405CB0: or      al, al
  00405CB2: jz      short doneeq
  00405CB4: test    edx, 2
  00405CBA: jz      short dodwords
  00405CBC: mov     ax, [edx]
  00405CBF: add     edx, 2
  00405CC2: cmp     al, [ecx]
  00405CC4: jnz     short donene
  00405CC6: or      al, al
  00405CC8: jz      short doneeq
  00405CCA: cmp     ah, [ecx+1]
  00405CCD: jnz     short donene
  00405CCF: or      ah, ah
  00405CD1: jz      short doneeq
  00405CD3: add     ecx, 2
  00405CD6: jmp     short dodwords

Function: __dosmaperr
  00405CD8: mov     eax, [esp+arg_0]
  00405CDC: mov     ds:41E09Ch, eax
  00405CE1: xor     ecx, ecx
  00405CE3: cmp     eax, ds:4130A0h[ecx*8]
  00405CEA: jz      short loc_405D07
  00405CEC: inc     ecx
  00405CED: cmp     ecx, 2Dh ; '-'
  00405CF0: jb      short loc_405CE3
  00405CF2: cmp     eax, 13h
  00405CF5: jb      short loc_405D14
  00405CF7: cmp     eax, 24h ; '$'
  00405CFA: ja      short loc_405D14
  00405CFC: mov     dword ptr ds:41E098h, 0Dh
  00405D06: retn
  00405D07: mov     eax, ds:4130A4h[ecx*8]
  00405D0E: mov     ds:41E098h, eax
  00405D13: retn
  00405D14: cmp     eax, 0BCh ; '¼'
  00405D19: jb      short loc_405D2C
  00405D1B: cmp     eax, 0CAh ; 'Ê'
  00405D20: mov     dword ptr ds:41E098h, 8
  00405D2A: jbe     short locret_5D36
  00405D2C: mov     dword ptr ds:41E098h, 16h
  00405D36: retn

Function: _strcpy
  00405D40: push    edi
  00405D41: mov     edi, [esp+4+Destination]
  00405D45: jmp     short copy_start

Function: _strcat
  00405D50: mov     ecx, [esp+Destination]
  00405D54: push    edi
  00405D55: test    ecx, 3
  00405D5B: jz      short find_end_of_dest_string_loop
  00405D5D: mov     al, [ecx]
  00405D5F: add     ecx, 1
  00405D62: test    al, al
  00405D64: jz      short start_byte_3
  00405D66: test    ecx, 3
  00405D6C: jnz     short dest_misaligned
  00405D6E: mov     edi, edi
  00405D70: mov     eax, [ecx]
  00405D72: mov     edx, 7EFEFEFFh
  00405D77: add     edx, eax
  00405D79: xor     eax, 0FFFFFFFFh
  00405D7C: xor     eax, edx
  00405D7E: add     ecx, 4
  00405D81: test    eax, 81010100h
  00405D86: jz      short find_end_of_dest_string_loop
  00405D88: mov     eax, [ecx-4]
  00405D8B: test    al, al
  00405D8D: jz      short start_byte_0
  00405D8F: test    ah, ah
  00405D91: jz      short start_byte_1
  00405D93: test    eax, 0FF0000h
  00405D98: jz      short start_byte_2
  00405D9A: test    eax, 0FF000000h
  00405D9F: jz      short start_byte_3
  00405DA1: jmp     short find_end_of_dest_string_loop
  00405DA3: lea     edi, [ecx-1]
  00405DA6: jmp     short copy_start
  00405DA8: lea     edi, [ecx-2]
  00405DAB: jmp     short copy_start
  00405DAD: lea     edi, [ecx-3]
  00405DB0: jmp     short copy_start
  00405DB2: lea     edi, [ecx-4]
  00405DB5: mov     ecx, [esp+4+Source]
  00405DB9: test    ecx, 3
  00405DBF: jz      short main_loop_entrance
  00405DC1: mov     dl, [ecx]
  00405DC3: add     ecx, 1
  00405DC6: test    dl, dl
  00405DC8: jz      short _byte_0
  00405DCA: mov     [edi], dl
  00405DCC: add     edi, 1
  00405DCF: test    ecx, 3
  00405DD5: jnz     short src_misaligned
  00405DD7: jmp     short main_loop_entrance
  00405DD9: mov     [edi], edx
  00405DDB: add     edi, 4
  00405DDE: mov     edx, 7EFEFEFFh
  00405DE3: mov     eax, [ecx]
  00405DE5: add     edx, eax
  00405DE7: xor     eax, 0FFFFFFFFh
  00405DEA: xor     eax, edx
  00405DEC: mov     edx, [ecx]
  00405DEE: add     ecx, 4
  00405DF1: test    eax, 81010100h
  00405DF6: jz      short main_loop
  00405DF8: test    dl, dl
  00405DFA: jz      short _byte_0
  00405DFC: test    dh, dh
  00405DFE: jz      short _byte_1
  00405E00: test    edx, 0FF0000h
  00405E06: jz      short _byte_2
  00405E08: test    edx, 0FF000000h
  00405E0E: jz      short _byte_3
  00405E10: jmp     short main_loop
  00405E12: mov     [edi], edx
  00405E14: mov     eax, [esp+4+Destination]
  00405E18: pop     edi
  00405E19: retn
  00405E1A: mov     [edi], dx
  00405E1D: mov     eax, [esp+4+Destination]
  00405E21: mov     byte ptr [edi+2], 0
  00405E25: pop     edi
  00405E26: retn
  00405E27: mov     [edi], dx
  00405E2A: mov     eax, [esp+4+Destination]
  00405E2E: pop     edi
  00405E2F: retn
  00405E30: mov     [edi], dl
  00405E32: mov     eax, [esp+4+Destination]
  00405E36: pop     edi
  00405E37: retn

Function: _strlen
  00405E40: mov     ecx, [esp+Str]
  00405E44: test    ecx, 3
  00405E4A: jz      short main_loop_0
  00405E4C: mov     al, [ecx]
  00405E4E: add     ecx, 1
  00405E51: test    al, al
  00405E53: jz      short loc_405EA3
  00405E55: test    ecx, 3
  00405E5B: jnz     short str_misaligned
  00405E5D: add     eax, 0
  00405E62: lea     esp, [esp+0]
  00405E69: lea     esp, [esp+0]
  00405E70: mov     eax, [ecx]
  00405E72: mov     edx, 7EFEFEFFh
  00405E77: add     edx, eax
  00405E79: xor     eax, 0FFFFFFFFh
  00405E7C: xor     eax, edx
  00405E7E: add     ecx, 4
  00405E81: test    eax, 81010100h
  00405E86: jz      short main_loop_0
  00405E88: mov     eax, [ecx-4]
  00405E8B: test    al, al
  00405E8D: jz      short loc_405EC1
  00405E8F: test    ah, ah
  00405E91: jz      short loc_405EB7
  00405E93: test    eax, 0FF0000h
  00405E98: jz      short loc_405EAD
  00405E9A: test    eax, 0FF000000h
  00405E9F: jz      short loc_405EA3
  00405EA1: jmp     short main_loop_0
  00405EA3: lea     eax, [ecx-1]
  00405EA6: mov     ecx, [esp+Str]
  00405EAA: sub     eax, ecx
  00405EAC: retn
  00405EAD: lea     eax, [ecx-2]
  00405EB0: mov     ecx, [esp+Str]
  00405EB4: sub     eax, ecx
  00405EB6: retn
  00405EB7: lea     eax, [ecx-3]
  00405EBA: mov     ecx, [esp+Str]
  00405EBE: sub     eax, ecx
  00405EC0: retn
  00405EC1: lea     eax, [ecx-4]
  00405EC4: mov     ecx, [esp+Str]
  00405EC8: sub     eax, ecx
  00405ECA: retn

Function: ?Destructor@HeapManager@@QAEXXZ
  00405ECB: push    esi
  00405ECC: mov     esi, ecx
  00405ECE: cmp     dword ptr [esi+4], 0
  00405ED2: jz      short loc_405EEF
  00405ED4: jmp     short loc_405EE5
  00405ED6: mov     eax, [esi+0Ch]
  00405ED9: mov     eax, [eax]
  00405EDB: push    dword ptr [esi+0Ch]
  00405EDE: mov     [esi+8], eax
  00405EE1: call    dword ptr [esi+4]
  00405EE4: pop     ecx
  00405EE5: mov     eax, [esi+8]
  00405EE8: test    eax, eax
  00405EEA: mov     [esi+0Ch], eax
  00405EED: jnz     short loc_405ED6
  00405EEF: pop     esi
  00405EF0: retn

Function: ?getNumberOfDimensions@UnDecorator@@CAHXZ
  00405EF1: mov     ecx, ds:41E06Ch
  00405EF7: mov     dl, [ecx]
  00405EF9: test    dl, dl
  00405EFB: jnz     short loc_405F00
  00405EFD: xor     eax, eax
  00405EFF: retn
  00405F00: cmp     dl, 30h ; '0'
  00405F03: jl      short loc_405F18
  00405F05: cmp     dl, 39h ; '9'
  00405F08: jg      short loc_405F18
  00405F0A: movsx   eax, dl
  00405F0D: sub     eax, 2Fh ; '/'
  00405F10: inc     ecx
  00405F11: mov     ds:41E06Ch, ecx
  00405F17: retn
  00405F18: xor     eax, eax
  00405F1A: jmp     short loc_405F3D
  00405F1C: test    dl, dl
  00405F1E: jz      short loc_405EFD
  00405F20: cmp     dl, 41h ; 'A'
  00405F23: jl      short loc_405F50
  00405F25: cmp     dl, 50h ; 'P'
  00405F28: jg      short loc_405F50
  00405F2A: movsx   edx, dl
  00405F2D: shl     eax, 4
  00405F30: inc     ecx
  00405F31: lea     eax, [eax+edx-41h]
  00405F35: mov     ds:41E06Ch, ecx
  00405F3B: mov     dl, [ecx]
  00405F3D: cmp     dl, 40h ; '@'
  00405F40: jnz     short loc_405F1C
  00405F42: mov     dl, [ecx]
  00405F44: inc     ecx
  00405F45: cmp     dl, 40h ; '@'
  00405F48: mov     ds:41E06Ch, ecx
  00405F4E: jz      short locret_5F53
  00405F50: or      eax, 0FFFFFFFFh
  00405F53: retn

Function: ?getTypeEncoding@UnDecorator@@CAHXZ
  00405F54: mov     ecx, ds:41E06Ch
  00405F5A: push    ebx
  00405F5B: push    ebp
  00405F5C: push    esi
  00405F5D: push    edi
  00405F5E: mov     esi, 4000h
  00405F63: xor     eax, eax
  00405F65: cmp     byte ptr [ecx], 5Fh ; '_'
  00405F68: jnz     short loc_405F73
  00405F6A: inc     ecx
  00405F6B: mov     eax, esi
  00405F6D: mov     ds:41E06Ch, ecx
  00405F73: mov     dl, [ecx]
  00405F75: cmp     dl, 41h ; 'A'
  00405F78: jl      short loc_405F83
  00405F7A: cmp     dl, 5Ah ; 'Z'
  00405F7D: jle     loc_406012
  00405F83: cmp     dl, 24h ; '$'
  00405F86: jnz     loc_40620A
  00405F8C: inc     ecx
  00405F8D: mov     ds:41E06Ch, ecx
  00405F93: movsx   edx, byte ptr [ecx]
  00405F96: cmp     edx, 42h ; 'B'
  00405F99: jg      loc_4061D2
  00405F9F: jz      loc_4061CB
  00405FA5: test    edx, edx
  00405FA7: jz      loc_4061C4
  00405FAD: cmp     edx, 24h ; '$'
  00405FB0: jnz     loc_406102
  00405FB6: lea     edx, [ecx+1]
  00405FB9: cmp     byte ptr [edx], 50h ; 'P'
  00405FBC: jnz     short loc_405FC0
  00405FBE: mov     ecx, edx
  00405FC0: inc     ecx
  00405FC1: mov     ds:41E06Ch, ecx
  00405FC7: movsx   edx, byte ptr [ecx]
  00405FCA: add     edx, 0FFFFFFBAh
  00405FCD: cmp     edx, 9
  00405FD0: ja      loc_4061FE
  00405FD6: movzx   edx, byte ptr [edx+406358h]
  00405FDD: jmp     dword ptr [edx*4+406350h]
  00405FE4: inc     ecx; jumptable 00405FDD cases 70-73,76,77
  00405FE5: jmp     short loc_406007
  00405FE7: inc     ecx; jumptable 00405FDD cases 74,75,78,79
  00405FE8: mov     ds:41E06Ch, ecx
  00405FEE: mov     al, [ecx]
  00405FF0: cmp     al, 30h ; '0'
  00405FF2: jl      loc_4061BD
  00405FF8: cmp     al, 39h ; '9'
  00405FFA: jg      loc_4061BD
  00406000: movsx   eax, al
  00406003: lea     ecx, [ecx+eax-2Fh]
  00406007: mov     ds:41E06Ch, ecx
  0040600D: jmp     loc_405F63
  00406012: movsx   edx, byte ptr [ecx]
  00406015: sub     edx, 41h ; 'A'
  00406018: mov     esi, 8000h
  0040601D: inc     ecx
  0040601E: or      eax, esi
  00406020: test    dl, 1
  00406023: mov     ds:41E06Ch, ecx
  00406029: jz      short loc_406032
  0040602B: or      eax, 2000h
  00406030: jmp     short loc_406037
  00406032: and     eax, 0FFFFDFFFh
  00406037: cmp     edx, 18h
  0040603A: jge     loc_40634B
  00406040: test    esi, eax
  00406042: mov     ebp, 0FFFF9FFFh
  00406047: mov     ebx, 0FFFFEFFFh
  0040604C: mov     edi, 800h
  00406051: jz      short loc_406059
  00406053: and     eax, ebx
  00406055: or      eax, edi
  00406057: jmp     short loc_40605B
  00406059: and     eax, ebp
  0040605B: mov     ecx, edx
  0040605D: and     ecx, 18h
  00406060: jz      short loc_40609C
  00406062: cmp     ecx, 8
  00406065: jz      short loc_406082
  00406067: cmp     ecx, 10h
  0040606A: jnz     def_6239; jumptable 00406239 default case
  00406070: test    esi, eax
  00406072: jz      short loc_40607B
  00406074: and     eax, 0FFFFFF3Fh
  00406079: jmp     short loc_4060AE
  0040607B: and     eax, 0FFFFE7FFh
  00406080: jmp     short loc_4060AE
  00406082: test    esi, eax
  00406084: jz      short loc_406090
  00406086: and     eax, 0FFFFFFBFh
  00406089: or      eax, 80h
  0040608E: jmp     short loc_4060AE
  00406090: and     eax, 0FFFFF7FFh
  00406095: or      eax, 1000h
  0040609A: jmp     short loc_4060AE
  0040609C: test    esi, eax
  0040609E: jz      short loc_4060AA
  004060A0: and     eax, 0FFFFFF7Fh
  004060A5: or      eax, 40h
  004060A8: jmp     short loc_4060AE
  004060AA: and     eax, ebx
  004060AC: or      eax, edi
  004060AE: and     edx, 6
  004060B1: sub     edx, 0
  004060B4: jz      loc_40634B
  004060BA: dec     edx
  004060BB: dec     edx
  004060BC: jz      short loc_4060E8
  004060BE: dec     edx
  004060BF: dec     edx
  004060C0: jz      short loc_4060D9
  004060C2: dec     edx
  004060C3: dec     edx
  004060C4: jnz     def_6239; jumptable 00406239 default case
  004060CA: and     eax, 0FFFFFCFFh
  004060CF: or      eax, 400h
  004060D4: jmp     loc_40634B
  004060D9: and     eax, 0FFFFF9FFh
  004060DE: or      eax, 100h
  004060E3: jmp     loc_40634B
  004060E8: test    esi, eax
  004060EA: jz      short loc_4060FB
  004060EC: and     eax, 0FFFFFAFFh
  004060F1: or      eax, 200h
  004060F6: jmp     loc_40634B
  004060FB: and     eax, ebp
  004060FD: jmp     loc_40634B
  00406102: cmp     edx, 2Fh ; '/'
  00406105: jle     def_6239; jumptable 00406239 default case
  0040610B: cmp     edx, 35h ; '5'
  0040610E: jle     short loc_406128
  00406110: cmp     edx, 41h ; 'A'
  00406113: jnz     def_6239; jumptable 00406239 default case
  00406119: and     eax, 0FFFFF4FFh
  0040611E: or      eax, 9000h
  00406123: jmp     loc_4061FE
  00406128: movsx   edx, byte ptr [ecx]
  0040612B: mov     esi, 8000h
  00406130: or      eax, esi
  00406132: sub     edx, 30h ; '0'
  00406135: test    esi, eax
  00406137: mov     ebx, 0FFFFEFFFh
  0040613C: mov     edi, 800h
  00406141: jz      short loc_406149
  00406143: and     eax, ebx
  00406145: or      eax, edi
  00406147: jmp     short loc_40614E
  00406149: and     eax, 0FFFF9FFFh
  0040614E: and     eax, 0FFFFFDFFh
  00406153: or      eax, 500h
  00406158: test    dl, 1
  0040615B: jz      short loc_406164
  0040615D: or      eax, 2000h
  00406162: jmp     short loc_406169
  00406164: and     eax, 0FFFFDFFFh
  00406169: and     edx, 6
  0040616C: sub     edx, 0
  0040616F: jz      short loc_4061A9
  00406171: dec     edx
  00406172: dec     edx
  00406173: jz      short loc_40618F
  00406175: dec     edx
  00406176: dec     edx
  00406177: jnz     def_6239; jumptable 00406239 default case
  0040617D: test    esi, eax
  0040617F: jz      short loc_406188
  00406181: and     eax, 0FFFFFF3Fh
  00406186: jmp     short loc_4061FE
  00406188: and     eax, 0FFFFE7FFh
  0040618D: jmp     short loc_4061FE
  0040618F: test    esi, eax
  00406191: jz      short loc_40619D
  00406193: and     eax, 0FFFFFFBFh
  00406196: or      eax, 80h
  0040619B: jmp     short loc_4061FE
  0040619D: and     eax, 0FFFFF7FFh
  004061A2: or      eax, 1000h
  004061A7: jmp     short loc_4061FE
  004061A9: test    esi, eax
  004061AB: jz      short loc_4061B7
  004061AD: and     eax, 0FFFFFF7Fh
  004061B2: or      eax, 40h
  004061B5: jmp     short loc_4061FE
  004061B7: and     eax, ebx
  004061B9: or      eax, edi
  004061BB: jmp     short loc_4061FE
  004061BD: mov     eax, 0FFFFh
  004061C2: jmp     short loc_4061FE
  004061C4: mov     eax, 0FFFEh
  004061C9: jmp     short loc_4061FE
  004061CB: or      eax, 9800h
  004061D0: jmp     short loc_4061FE
  004061D2: sub     edx, 43h ; 'C'
  004061D5: jz      short loc_4061F9
  004061D7: dec     edx
  004061D8: jz      short loc_4061ED
  004061DA: dec     edx
  004061DB: jnz     def_6239; jumptable 00406239 default case
  004061E1: and     eax, 0FFFFF6FFh
  004061E6: or      eax, 9200h
  004061EB: jmp     short loc_4061FE
  004061ED: and     eax, 0FFFFF5FFh
  004061F2: or      eax, 9100h
  004061F7: jmp     short loc_4061FE
  004061F9: or      eax, 7C00h
  004061FE: inc     ecx
  004061FF: mov     ds:41E06Ch, ecx
  00406205: jmp     loc_40634B
  0040620A: mov     dl, [ecx]
  0040620C: cmp     dl, 30h ; '0'
  0040620F: jl      loc_40632C
  00406215: cmp     dl, 38h ; '8'
  00406218: jg      loc_40632C
  0040621E: inc     ecx
  0040621F: movsx   edx, dl
  00406222: mov     ds:41E06Ch, ecx
  00406228: lea     ecx, [edx-30h]; switch with an invalid jump table
  0040622B: and     eax, 0FFFF7FFFh
  00406230: cmp     ecx, 8
  00406233: ja      def_6239; jumptable 00406239 default case
  00406239: jmp     dword ptr [ecx*4+406362h]; switch jump
  00406240: mov     esi, 8000h; jumptable 00406239 case 48
  00406245: test    esi, eax
  00406247: jz      short loc_406255
  00406249: and     eax, 0FFFFFAFFh
  0040624E: or      eax, 200h
  00406253: jmp     short loc_40625A
  00406255: and     eax, 0FFFF9FFFh
  0040625A: test    esi, eax
  0040625C: jz      short loc_40626B
  0040625E: and     eax, 0FFFFFF7Fh
  00406263: or      eax, 40h
  00406266: jmp     loc_40634B
  0040626B: and     eax, 0FFFFEFFFh
  00406270: or      eax, 800h
  00406275: jmp     loc_40634B
  0040627A: mov     esi, 8000h; jumptable 00406239 case 49
  0040627F: test    esi, eax
  00406281: jz      short loc_40628F
  00406283: and     eax, 0FFFFFAFFh
  00406288: or      eax, 200h
  0040628D: jmp     short loc_406294
  0040628F: and     eax, 0FFFF9FFFh
  00406294: test    esi, eax
  00406296: jz      short loc_4062A5
  00406298: and     eax, 0FFFFFFBFh
  0040629B: or      eax, 80h
  004062A0: jmp     loc_40634B
  004062A5: and     eax, 0FFFFF7FFh
  004062AA: or      eax, 1000h
  004062AF: jmp     loc_40634B
  004062B4: mov     esi, 8000h; jumptable 00406239 case 50
  004062B9: test    esi, eax
  004062BB: jz      short loc_4062C9
  004062BD: and     eax, 0FFFFFAFFh
  004062C2: or      eax, 200h
  004062C7: jmp     short loc_4062CE
  004062C9: and     eax, 0FFFF9FFFh
  004062CE: test    esi, eax
  004062D0: jz      short loc_4062D9
  004062D2: and     eax, 0FFFFFF3Fh
  004062D7: jmp     short loc_40634B
  004062D9: and     eax, 0FFFFE7FFh
  004062DE: jmp     short loc_40634B
  004062E0: and     eax, 0FFFFDFFFh; jumptable 00406239 case 51
  004062E5: or      eax, esi
  004062E7: jmp     short loc_40634B
  004062E9: and     eax, 0FFFFE3FFh; jumptable 00406239 case 53
  004062EE: or      eax, 6000h
  004062F3: jmp     short loc_40634B
  004062F5: and     eax, 0FFFFBFFFh; jumptable 00406239 case 52
  004062FA: or      eax, 2000h
  004062FF: jmp     short loc_40634B
  00406301: and     eax, 0FFFFEBFFh; jumptable 00406239 case 54
  00406306: or      eax, 6800h
  0040630B: jmp     short loc_40634B
  0040630D: and     eax, 0FFFFF3FFh; jumptable 00406239 case 55
  00406312: or      eax, 7000h
  00406317: jmp     short loc_40634B
  00406319: and     eax, 0FFFFFBFFh; jumptable 00406239 case 56
  0040631E: or      eax, 7800h
  00406323: jmp     short loc_40634B
  00406325: mov     eax, 0FFFFh; jumptable 00406239 default case
  0040632A: jmp     short loc_40634B
  0040632C: cmp     dl, 39h ; '9'
  0040632F: jnz     short loc_40633F
  00406331: inc     ecx
  00406332: mov     ds:41E06Ch, ecx
  00406338: mov     eax, 0FFFDh
  0040633D: jmp     short loc_40634B
  0040633F: xor     eax, eax
  00406341: test    dl, dl
  00406343: setnz   al
  00406346: add     eax, 0FFFEh
  0040634B: pop     edi
  0040634C: pop     esi
  0040634D: pop     ebp
  0040634E: pop     ebx
  0040634F: retn

Function: ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z
  00406386: mov     eax, ds:41E07Ch
  0040638B: not     eax
  0040638D: test    al, 1
  0040638F: mov     eax, [esp+arg_0]
  00406393: mov     eax, ds:411150h[eax*4]
  0040639A: jnz     short locret_639E
  0040639C: inc     eax
  0040639D: inc     eax
  0040639E: retn

Function: ?getMemory@HeapManager@@QAEPAXIH@Z
  0040639F: push    esi
  004063A0: push    edi
  004063A1: mov     edi, [esp+8+arg_0]
  004063A5: add     edi, 7
  004063A8: and     edi, 0FFFFFFF8h
  004063AB: cmp     [esp+8+arg_4], 0
  004063B0: mov     esi, ecx
  004063B2: jz      short loc_4063BA
  004063B4: push    edi
  004063B5: call    dword ptr [esi]
  004063B7: pop     ecx
  004063B8: jmp     short loc_40641E
  004063BA: test    edi, edi
  004063BC: jnz     short loc_4063C1
  004063BE: push    8
  004063C0: pop     edi
  004063C1: mov     eax, [esi+10h]
  004063C4: cmp     eax, edi
  004063C6: push    ebx
  004063C7: jnb     short loc_40640E
  004063C9: mov     ebx, 1000h
  004063CE: cmp     edi, ebx
  004063D0: jbe     short loc_4063D6
  004063D2: xor     eax, eax
  004063D4: jmp     short loc_40641D
  004063D6: push    1; int
  004063D8: push    1004h; unsigned int
  004063DD: mov     ecx, 41E04Ch; this
  004063E2: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  004063E7: test    eax, eax
  004063E9: jz      short loc_4063F0
  004063EB: and     dword ptr [eax], 0
  004063EE: jmp     short loc_4063F2
  004063F0: xor     eax, eax
  004063F2: test    eax, eax
  004063F4: jz      short loc_4063D2
  004063F6: mov     ecx, [esi+0Ch]
  004063F9: test    ecx, ecx
  004063FB: jz      short loc_406401
  004063FD: mov     [ecx], eax
  004063FF: jmp     short loc_406404
  00406401: mov     [esi+8], eax
  00406404: sub     ebx, edi
  00406406: mov     [esi+0Ch], eax
  00406409: mov     [esi+10h], ebx
  0040640C: jmp     short loc_406413
  0040640E: sub     eax, edi
  00406410: mov     [esi+10h], eax
  00406413: mov     eax, [esi+0Ch]
  00406416: mov     ecx, [esi+10h]
  00406419: lea     eax, [eax+ecx+4]
  0040641D: pop     ebx
  0040641E: pop     edi
  0040641F: pop     esi
  00406420: retn    8

Function: ??0DName@@QAE@ABV0@@Z
  00406423: mov     eax, ecx
  00406425: mov     ecx, [esp+arg_0]
  00406429: mov     edx, [ecx+4]
  0040642C: shl     edx, 1Ch
  0040642F: sar     edx, 1Ch
  00406432: xor     edx, [eax+4]
  00406435: push    esi
  00406436: and     edx, 0Fh
  00406439: xor     [eax+4], edx
  0040643C: mov     esi, [eax+4]
  0040643F: mov     edx, [ecx+4]
  00406442: xor     edx, esi
  00406444: and     edx, 10h
  00406447: xor     edx, esi
  00406449: mov     [eax+4], edx
  0040644C: mov     esi, [ecx+4]
  0040644F: xor     esi, edx
  00406451: and     esi, 20h
  00406454: xor     esi, edx
  00406456: mov     [eax+4], esi
  00406459: mov     edx, [ecx+4]
  0040645C: xor     edx, esi
  0040645E: and     edx, 40h
  00406461: xor     edx, esi
  00406463: mov     [eax+4], edx
  00406466: mov     esi, [ecx+4]
  00406469: xor     esi, edx
  0040646B: and     esi, 80h
  00406471: xor     esi, edx
  00406473: mov     [eax+4], esi
  00406476: mov     edx, [ecx]
  00406478: mov     [eax], edx
  0040647A: mov     edx, esi
  0040647C: xor     edx, [ecx+4]
  0040647F: pop     esi
  00406480: and     edx, 100h
  00406486: xor     [eax+4], edx
  00406489: retn    4

Function: ??4DName@@QAEAAV0@ABV0@@Z
  0040648C: mov     eax, ecx
  0040648E: push    esi
  0040648F: mov     esi, [eax+4]
  00406492: mov     ecx, esi
  00406494: shl     ecx, 1Ch
  00406497: sar     ecx, 1Ch
  0040649A: jz      short loc_4064A1
  0040649C: cmp     ecx, 2
  0040649F: jnz     short loc_4064F3
  004064A1: mov     ecx, [esp+4+arg_0]
  004064A5: mov     edx, [ecx+4]
  004064A8: shl     edx, 1Ch
  004064AB: sar     edx, 1Ch
  004064AE: xor     edx, esi
  004064B0: and     edx, 0Fh
  004064B3: xor     edx, esi
  004064B5: mov     [eax+4], edx
  004064B8: mov     esi, [ecx+4]
  004064BB: xor     esi, edx
  004064BD: and     esi, 10h
  004064C0: xor     esi, edx
  004064C2: mov     [eax+4], esi
  004064C5: mov     edx, [ecx+4]
  004064C8: xor     edx, esi
  004064CA: and     edx, 20h
  004064CD: xor     edx, esi
  004064CF: mov     [eax+4], edx
  004064D2: mov     esi, [ecx+4]
  004064D5: xor     esi, edx
  004064D7: and     esi, 40h
  004064DA: xor     esi, edx
  004064DC: mov     [eax+4], esi
  004064DF: mov     edx, [ecx+4]
  004064E2: xor     edx, esi
  004064E4: and     edx, 80h
  004064EA: xor     edx, esi
  004064EC: mov     [eax+4], edx
  004064EF: mov     ecx, [ecx]
  004064F1: mov     [eax], ecx
  004064F3: pop     esi
  004064F4: retn    4

Function: ??AReplicator@@QBEABVDName@@H@Z
  004064F7: mov     edx, [esp+arg_0]
  004064FB: test    edx, edx
  004064FD: jl      short loc_40651A
  004064FF: cmp     edx, 9
  00406502: jg      short loc_40651A
  00406504: mov     eax, [ecx]
  00406506: cmp     eax, 0FFFFFFFFh
  00406509: jz      short loc_406515
  0040650B: cmp     edx, eax
  0040650D: jg      short loc_406515
  0040650F: mov     eax, [ecx+edx*4+4]
  00406513: jmp     short locret_651D
  00406515: lea     eax, [ecx+34h]
  00406518: jmp     short locret_651D
  0040651A: lea     eax, [ecx+2Ch]
  0040651D: retn    4

Function: ??YDNameNode@@QAEAAV0@PAV0@@Z
  00406520: mov     eax, ecx
  00406522: mov     ecx, [esp+arg_0]
  00406526: test    ecx, ecx
  00406528: jz      short locret_6546
  0040652A: mov     edx, [eax+4]
  0040652D: test    edx, edx
  0040652F: jz      short loc_406543
  00406531: push    esi
  00406532: jmp     short loc_406536
  00406534: mov     edx, esi
  00406536: mov     esi, [edx+4]
  00406539: test    esi, esi
  0040653B: jnz     short loc_406534
  0040653D: mov     [edx+4], ecx
  00406540: pop     esi
  00406541: jmp     short locret_6546
  00406543: mov     [eax+4], ecx
  00406546: retn    4

Function: sub_406549
  00406549: xor     eax, eax
  0040654B: inc     eax
  0040654C: retn

Function: sub_40654D
  0040654D: mov     al, [ecx+8]
  00406550: retn

Function: ?getString@charNode@@UBEPADPADH@Z
  00406551: mov     eax, [esp+arg_0]
  00406555: test    eax, eax
  00406557: jz      short loc_406567
  00406559: cmp     [esp+arg_4], 0
  0040655E: jz      short loc_406567
  00406560: mov     cl, [ecx+8]
  00406563: mov     [eax], cl
  00406565: jmp     short locret_6569
  00406567: xor     eax, eax
  00406569: retn    8

Function: ??0pDNameNode@@QAE@PAVDName@@@Z
  0040656C: mov     edx, [esp+arg_0]
  00406570: mov     eax, ecx
  00406572: and     dword ptr [eax+4], 0
  00406576: test    edx, edx
  00406578: mov     dword ptr [eax], 41178Ch
  0040657E: jz      short loc_406595
  00406580: mov     ecx, [edx+4]
  00406583: shl     ecx, 1Ch
  00406586: sar     ecx, 1Ch
  00406589: cmp     ecx, 1
  0040658C: jz      short loc_406593
  0040658E: cmp     ecx, 3
  00406591: jnz     short loc_406595
  00406593: xor     edx, edx
  00406595: mov     [eax+8], edx
  00406598: retn    4

Function: ??0DNameStatusNode@@QAE@W4DNameStatus@@@Z
  0040659B: mov     eax, ecx
  0040659D: mov     ecx, [esp+arg_0]
  004065A1: and     dword ptr [eax+4], 0
  004065A5: cmp     ecx, 2
  004065A8: mov     dword ptr [eax], 411798h
  004065AE: mov     [eax+8], ecx
  004065B1: jnz     short loc_4065B8
  004065B3: push    4
  004065B5: pop     ecx
  004065B6: jmp     short loc_4065BA
  004065B8: xor     ecx, ecx
  004065BA: mov     [eax+0Ch], ecx
  004065BD: retn    4

Function: sub_4065C0
  004065C0: mov     eax, [ecx+0Ch]
  004065C3: retn

Function: ?getLastChar@DNameStatusNode@@UBEDXZ
  004065C4: cmp     dword ptr [ecx+8], 2
  004065C8: setnz   al
  004065CB: dec     al
  004065CD: and     eax, 20h
  004065D0: retn

Function: ?und_strncpy@@YAPADPADPBDI@Z
  004065D1: cmp     [esp+arg_4], 0
  004065D6: mov     ecx, [esp+arg_0]
  004065DA: jz      short loc_4065EC
  004065DC: mov     al, [edx]
  004065DE: test    al, al
  004065E0: mov     [ecx], al
  004065E2: jz      short loc_4065EC
  004065E4: inc     ecx
  004065E5: inc     edx
  004065E6: dec     [esp+arg_4]
  004065EA: jnz     short loc_4065DC
  004065EC: mov     eax, [esp+arg_0]
  004065F0: retn

Function: ?getDataIndirectType@UnDecorator@@CA?AVDName@@XZ
  004065F1: push    ebp
  004065F2: mov     ebp, esp
  004065F4: sub     esp, 10h
  004065F7: xor     ecx, ecx
  004065F9: mov     eax, 0FFFFFE00h
  004065FE: and     [ebp+var_4], eax
  00406601: and     [ebp+var_C], eax
  00406604: push    ecx
  00406605: lea     eax, [ebp+var_8]
  00406608: push    eax
  00406609: push    ecx
  0040660A: lea     eax, [ebp+var_10]
  0040660D: push    eax
  0040660E: push    [ebp+arg_0]
  00406611: mov     [ebp+var_8], ecx
  00406614: mov     [ebp+var_10], ecx
  00406617: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@ABV2@D0H@Z; UnDecorator::getDataIndirectType(DName const &,char,DName const &,int)
  0040661C: mov     eax, [ebp+arg_0]
  0040661F: add     esp, 14h
  00406622: leave
  00406623: retn

Function: ?getThisType@UnDecorator@@CA?AVDName@@XZ
  00406624: push    ebp
  00406625: mov     ebp, esp
  00406627: sub     esp, 10h
  0040662A: mov     eax, 0FFFFFE00h
  0040662F: and     [ebp+var_4], eax
  00406632: and     [ebp+var_C], eax
  00406635: push    1
  00406637: xor     ecx, ecx
  00406639: lea     eax, [ebp+var_8]
  0040663C: push    eax
  0040663D: push    ecx
  0040663E: lea     eax, [ebp+var_10]
  00406641: push    eax
  00406642: push    [ebp+arg_0]
  00406645: mov     [ebp+var_8], ecx
  00406648: mov     [ebp+var_10], ecx
  0040664B: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@ABV2@D0H@Z; UnDecorator::getDataIndirectType(DName const &,char,DName const &,int)
  00406650: mov     eax, [ebp+arg_0]
  00406653: add     esp, 14h
  00406656: leave
  00406657: retn

Function: ??0DName@@QAE@PAV0@@Z
  00406658: cmp     [esp+arg_0], 0
  0040665D: push    esi
  0040665E: mov     esi, ecx
  00406660: jz      short loc_40669A
  00406662: push    0; int
  00406664: push    0Ch; unsigned int
  00406666: mov     ecx, 41E04Ch; this
  0040666B: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00406670: test    eax, eax
  00406672: jz      short loc_406681
  00406674: push    [esp+4+arg_0]; struct DName *
  00406678: mov     ecx, eax; this
  0040667A: call    ??0pDNameNode@@QAE@PAVDName@@@Z; pDNameNode::pDNameNode(DName *)
  0040667F: jmp     short loc_406683
  00406681: xor     eax, eax
  00406683: mov     [esi], eax
  00406685: neg     eax
  00406687: sbb     eax, eax
  00406689: and     eax, 0FFFFFFFDh
  0040668C: add     eax, 3
  0040668F: xor     eax, [esi+4]
  00406692: and     eax, 0Fh
  00406695: xor     [esi+4], eax
  00406698: jmp     short loc_4066A1
  0040669A: and     dword ptr [esi+4], 0FFFFFFF0h
  0040669E: and     dword ptr [esi], 0
  004066A1: and     word ptr [esi+4], 0FE0Fh
  004066A7: mov     eax, esi
  004066A9: pop     esi
  004066AA: retn    4

Function: ??0DName@@QAE@W4DNameStatus@@@Z
  004066AD: push    esi
  004066AE: push    edi
  004066AF: mov     edi, [esp+8+arg_0]
  004066B3: cmp     edi, 1
  004066B6: mov     esi, ecx
  004066B8: jz      short loc_4066C3
  004066BA: cmp     edi, 3
  004066BD: jz      short loc_4066C3
  004066BF: xor     eax, eax
  004066C1: jmp     short loc_4066C5
  004066C3: mov     eax, edi
  004066C5: mov     ecx, [esi+4]
  004066C8: xor     ecx, eax
  004066CA: and     ecx, 0Fh
  004066CD: xor     [esi+4], ecx
  004066D0: push    0; int
  004066D2: push    10h; unsigned int
  004066D4: mov     ecx, 41E04Ch; this
  004066D9: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  004066DE: test    eax, eax
  004066E0: jz      short loc_4066EC
  004066E2: push    edi
  004066E3: mov     ecx, eax
  004066E5: call    ??0DNameStatusNode@@QAE@W4DNameStatus@@@Z; DNameStatusNode::DNameStatusNode(DNameStatus)
  004066EA: jmp     short loc_4066EE
  004066EC: xor     eax, eax
  004066EE: and     word ptr [esi+4], 0FE0Fh
  004066F4: test    eax, eax
  004066F6: mov     ecx, [esi+4]
  004066F9: mov     [esi], eax
  004066FB: jnz     short loc_406706
  004066FD: and     ecx, 0FFFFFFF3h
  00406700: or      ecx, 3
  00406703: mov     [esi+4], ecx
  00406706: pop     edi
  00406707: mov     eax, esi
  00406709: pop     esi
  0040670A: retn    4

Function: ?isValid@DName@@QBEHXZ
  0040670D: mov     eax, [ecx+4]
  00406710: shl     eax, 1Ch
  00406713: sar     eax, 1Ch
  00406716: jz      short loc_406720
  00406718: cmp     eax, 2
  0040671B: jz      short loc_406720
  0040671D: xor     eax, eax
  0040671F: retn
  00406720: xor     eax, eax
  00406722: inc     eax
  00406723: retn

Function: ?isEmpty@DName@@QBEHXZ
  00406724: cmp     dword ptr [ecx], 0
  00406727: jz      short loc_406735
  00406729: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  0040672E: test    eax, eax
  00406730: jz      short loc_406735
  00406732: xor     eax, eax
  00406734: retn
  00406735: xor     eax, eax
  00406737: inc     eax
  00406738: retn

Function: ?isUDC@DName@@QBEHXZ
  00406739: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040673E: test    eax, eax
  00406740: jnz     short loc_40674A
  00406742: test    byte ptr [ecx+4], 20h
  00406746: jz      short loc_40674A
  00406748: inc     eax
  00406749: retn
  0040674A: xor     eax, eax
  0040674C: retn

Function: ?length@DName@@QBEHXZ
  0040674D: push    edi
  0040674E: xor     edi, edi
  00406750: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00406755: test    eax, eax
  00406757: jnz     short loc_40676E
  00406759: push    esi
  0040675A: mov     esi, [ecx]
  0040675C: jmp     short loc_406769
  0040675E: mov     eax, [esi]
  00406760: mov     ecx, esi
  00406762: call    dword ptr [eax]
  00406764: mov     esi, [esi+4]
  00406767: add     edi, eax
  00406769: test    esi, esi
  0040676B: jnz     short loc_40675E
  0040676D: pop     esi
  0040676E: mov     eax, edi
  00406770: pop     edi
  00406771: retn

Function: ?getLastChar@DName@@QBEDXZ
  00406772: push    esi
  00406773: push    edi
  00406774: xor     edi, edi
  00406776: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040677B: test    eax, eax
  0040677D: jnz     short loc_4067A5
  0040677F: mov     esi, [ecx]
  00406781: test    esi, esi
  00406783: jz      short loc_4067A5
  00406785: mov     eax, [esi]
  00406787: mov     ecx, esi
  00406789: call    dword ptr [eax]
  0040678B: test    eax, eax
  0040678D: jz      short loc_406791
  0040678F: mov     edi, esi
  00406791: mov     esi, [esi+4]
  00406794: test    esi, esi
  00406796: jnz     short loc_406785
  00406798: test    edi, edi
  0040679A: jz      short loc_4067A5
  0040679C: mov     eax, [edi]
  0040679E: mov     ecx, edi
  004067A0: pop     edi
  004067A1: pop     esi
  004067A2: jmp     dword ptr [eax+4]
  004067A5: pop     edi
  004067A6: xor     al, al
  004067A8: pop     esi
  004067A9: retn

Function: ?getString@DName@@QBEPADPADH@Z
  004067AA: push    ebp
  004067AB: mov     ebp, esp
  004067AD: push    esi
  004067AE: push    edi
  004067AF: mov     edi, ecx
  004067B1: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004067B6: test    eax, eax
  004067B8: jnz     short loc_406826
  004067BA: cmp     [ebp+arg_0], eax
  004067BD: jnz     short loc_4067DD
  004067BF: call    ?length@DName@@QBEHXZ; DName::length(void)
  004067C4: mov     esi, eax
  004067C6: push    0; int
  004067C8: inc     esi
  004067C9: push    esi; unsigned int
  004067CA: mov     ecx, 41E04Ch; this
  004067CF: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  004067D4: test    eax, eax
  004067D6: mov     [ebp+arg_0], eax
  004067D9: jz      short loc_406832
  004067DB: jmp     short loc_4067E0
  004067DD: mov     esi, [ebp+arg_4]
  004067E0: mov     eax, [ebp+arg_0]
  004067E3: push    ebx
  004067E4: mov     ebx, esi
  004067E6: mov     esi, [edi]
  004067E8: mov     [ebp+arg_4], eax
  004067EB: jmp     short loc_40681C
  004067ED: test    ebx, ebx
  004067EF: jle     short loc_406820
  004067F1: mov     eax, [esi]
  004067F3: mov     ecx, esi
  004067F5: call    dword ptr [eax]
  004067F7: mov     edi, eax
  004067F9: test    edi, edi
  004067FB: jz      short loc_406819
  004067FD: mov     eax, ebx
  004067FF: sub     eax, edi
  00406801: jns     short loc_406805
  00406803: mov     edi, ebx
  00406805: mov     eax, [esi]
  00406807: push    edi
  00406808: push    [ebp+arg_4]
  0040680B: mov     ecx, esi
  0040680D: call    dword ptr [eax+8]
  00406810: test    eax, eax
  00406812: jz      short loc_406819
  00406814: sub     ebx, edi
  00406816: add     [ebp+arg_4], edi
  00406819: mov     esi, [esi+4]
  0040681C: test    esi, esi
  0040681E: jnz     short loc_4067ED
  00406820: mov     eax, [ebp+arg_4]
  00406823: pop     ebx
  00406824: jmp     short loc_40682F
  00406826: cmp     [ebp+arg_0], 0
  0040682A: jz      short loc_406832
  0040682C: mov     eax, [ebp+arg_0]
  0040682F: mov     byte ptr [eax], 0
  00406832: mov     eax, [ebp+arg_0]
  00406835: pop     edi
  00406836: pop     esi
  00406837: pop     ebp
  00406838: retn    8

Function: ??_5DName@@QAEAAV0@ABV0@@Z
  0040683B: mov     edx, ecx
  0040683D: push    esi
  0040683E: mov     esi, [edx+4]
  00406841: mov     eax, esi
  00406843: and     eax, 0Fh
  00406846: cmp     al, 3
  00406848: jz      short loc_40686A
  0040684A: mov     ecx, [esp+4+arg_0]; this
  0040684E: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00406853: test    eax, eax
  00406855: jnz     short loc_40686A
  00406857: mov     eax, [ecx+4]
  0040685A: shl     eax, 1Ch
  0040685D: sar     eax, 1Ch
  00406860: xor     eax, esi
  00406862: and     eax, 0Fh
  00406865: xor     eax, esi
  00406867: mov     [edx+4], eax
  0040686A: mov     eax, edx
  0040686C: pop     esi
  0040686D: retn    4

Function: ??4DName@@QAEAAV0@W4DNameStatus@@@Z
  00406870: push    esi
  00406871: push    edi
  00406872: mov     edi, [esp+8+arg_0]
  00406876: cmp     edi, 1
  00406879: mov     esi, ecx
  0040687B: jz      short loc_4068CE
  0040687D: cmp     edi, 3
  00406880: jz      short loc_4068CE
  00406882: mov     eax, [esi+4]
  00406885: mov     ecx, eax
  00406887: shl     ecx, 1Ch
  0040688A: sar     ecx, 1Ch
  0040688D: jz      short loc_406894
  0040688F: cmp     ecx, 2
  00406892: jnz     short loc_4068EA
  00406894: push    0; int
  00406896: and     eax, 0FFFFFF0Fh
  0040689B: push    10h; unsigned int
  0040689D: mov     ecx, 41E04Ch; this
  004068A2: mov     [esi+4], eax
  004068A5: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  004068AA: test    eax, eax
  004068AC: jz      short loc_4068B8
  004068AE: push    edi
  004068AF: mov     ecx, eax
  004068B1: call    ??0DNameStatusNode@@QAE@W4DNameStatus@@@Z; DNameStatusNode::DNameStatusNode(DNameStatus)
  004068B6: jmp     short loc_4068BA
  004068B8: xor     eax, eax
  004068BA: test    eax, eax
  004068BC: mov     [esi], eax
  004068BE: jnz     short loc_4068EA
  004068C0: mov     eax, [esi+4]
  004068C3: and     eax, 0FFFFFFF3h
  004068C6: or      eax, 3
  004068C9: mov     [esi+4], eax
  004068CC: jmp     short loc_4068EA
  004068CE: mov     eax, [esi+4]
  004068D1: and     dword ptr [esi], 0
  004068D4: mov     ecx, eax
  004068D6: and     ecx, 0Fh
  004068D9: cmp     cl, 3
  004068DC: jz      short loc_4068EA
  004068DE: mov     ecx, eax
  004068E0: xor     ecx, edi
  004068E2: and     ecx, 0Fh
  004068E5: xor     ecx, eax
  004068E7: mov     [esi+4], ecx
  004068EA: pop     edi
  004068EB: mov     eax, esi
  004068ED: pop     esi
  004068EE: retn    4

Function: ??0Replicator@@QAE@XZ
  004068F1: push    esi
  004068F2: mov     esi, ecx
  004068F4: push    3
  004068F6: lea     ecx, [esi+2Ch]
  004068F9: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004068FE: push    1
  00406900: lea     ecx, [esi+34h]
  00406903: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00406908: or      dword ptr [esi], 0FFFFFFFFh
  0040690B: mov     eax, esi
  0040690D: pop     esi
  0040690E: retn

Function: ??YReplicator@@QAEAAV0@ABVDName@@@Z
  0040690F: push    esi
  00406910: mov     esi, ecx
  00406912: cmp     dword ptr [esi], 9
  00406915: jz      short loc_406950
  00406917: mov     ecx, [esp+4+arg_0]; this
  0040691B: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00406920: test    eax, eax
  00406922: jnz     short loc_406950
  00406924: push    eax; int
  00406925: push    8; unsigned int
  00406927: mov     ecx, 41E04Ch; this
  0040692C: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00406931: test    eax, eax
  00406933: jz      short loc_406942
  00406935: push    [esp+4+arg_0]; struct DName *
  00406939: mov     ecx, eax; this
  0040693B: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00406940: jmp     short loc_406944
  00406942: xor     eax, eax
  00406944: test    eax, eax
  00406946: jz      short loc_406950
  00406948: inc     dword ptr [esi]
  0040694A: mov     ecx, [esi]
  0040694C: mov     [esi+ecx*4+4], eax
  00406950: mov     eax, esi
  00406952: pop     esi
  00406953: retn    4

Function: ?clone@DNameNode@@QAEPAV1@XZ
  00406956: push    ebx
  00406957: push    esi
  00406958: push    edi
  00406959: push    0; int
  0040695B: mov     edi, ecx
  0040695D: mov     esi, 41E04Ch
  00406962: push    0Ch; unsigned int
  00406964: mov     ecx, esi; this
  00406966: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  0040696B: mov     ebx, eax
  0040696D: test    ebx, ebx
  0040696F: jz      short loc_406996
  00406971: push    0; int
  00406973: push    8; unsigned int
  00406975: mov     ecx, esi; this
  00406977: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  0040697C: test    eax, eax
  0040697E: jz      short loc_40698A
  00406980: and     word ptr [eax+4], 0FE00h
  00406986: mov     [eax], edi
  00406988: jmp     short loc_40698C
  0040698A: xor     eax, eax
  0040698C: push    eax; struct DName *
  0040698D: mov     ecx, ebx; this
  0040698F: call    ??0pDNameNode@@QAE@PAVDName@@@Z; pDNameNode::pDNameNode(DName *)
  00406994: jmp     short loc_406998
  00406996: xor     eax, eax
  00406998: pop     edi
  00406999: pop     esi
  0040699A: pop     ebx
  0040699B: retn

Function: ??0pcharNode@@QAE@PBDH@Z
  0040699C: push    ebx
  0040699D: mov     ebx, [esp+4+arg_0]
  004069A1: push    esi
  004069A2: push    edi; unsigned int
  004069A3: mov     edi, [esp+0Ch+arg_4]
  004069A7: xor     eax, eax
  004069A9: cmp     edi, eax
  004069AB: mov     esi, ecx
  004069AD: mov     [esi+4], eax
  004069B0: mov     dword ptr [esi], 4117A4h
  004069B6: jnz     short loc_4069CE
  004069B8: cmp     ebx, eax
  004069BA: jz      short loc_4069F5
  004069BC: xor     edi, edi
  004069BE: cmp     byte ptr [ebx], 0
  004069C1: jz      short loc_4069CA
  004069C3: inc     edi
  004069C4: cmp     byte ptr [edi+ebx], 0
  004069C8: jnz     short loc_4069C3
  004069CA: cmp     edi, eax
  004069CC: jz      short loc_4069F5
  004069CE: cmp     ebx, eax
  004069D0: jz      short loc_4069F5
  004069D2: push    eax; int
  004069D3: push    edi; unsigned int
  004069D4: mov     ecx, 41E04Ch; this
  004069D9: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  004069DE: test    eax, eax
  004069E0: mov     [esi+8], eax
  004069E3: mov     [esi+0Ch], edi
  004069E6: jz      short loc_4069FB
  004069E8: push    edi; char *
  004069E9: push    eax; char *
  004069EA: mov     edx, ebx
  004069EC: call    ?und_strncpy@@YAPADPADPBDI@Z; und_strncpy(char *,char const *,uint)
  004069F1: pop     ecx
  004069F2: pop     ecx
  004069F3: jmp     short loc_4069FB
  004069F5: mov     [esi+8], eax
  004069F8: mov     [esi+0Ch], eax
  004069FB: pop     edi
  004069FC: mov     eax, esi
  004069FE: pop     esi
  004069FF: pop     ebx
  00406A00: retn    8

Function: ?getLastChar@pcharNode@@UBEDXZ
  00406A03: mov     eax, [ecx+0Ch]
  00406A06: test    eax, eax
  00406A08: jz      short loc_406A12
  00406A0A: mov     ecx, [ecx+8]
  00406A0D: mov     al, [ecx+eax-1]
  00406A11: retn
  00406A12: xor     al, al
  00406A14: retn

Function: ?getString@pcharNode@@UBEPADPADH@Z
  00406A15: mov     eax, [ecx+0Ch]
  00406A18: mov     edx, [esp+arg_4]
  00406A1C: cmp     edx, eax
  00406A1E: jle     short loc_406A22
  00406A20: mov     edx, eax
  00406A22: mov     ecx, [ecx+8]
  00406A25: xor     eax, eax
  00406A27: cmp     ecx, eax
  00406A29: jz      short locret_6A43
  00406A2B: cmp     [esp+arg_0], eax
  00406A2F: jz      short locret_6A43
  00406A31: cmp     edx, eax
  00406A33: jz      short locret_6A43
  00406A35: push    edx; char *
  00406A36: push    [esp+4+arg_0]; char *
  00406A3A: mov     edx, ecx
  00406A3C: call    ?und_strncpy@@YAPADPADPBDI@Z; und_strncpy(char *,char const *,uint)
  00406A41: pop     ecx
  00406A42: pop     ecx
  00406A43: retn    8

Function: ?length@pDNameNode@@UBEHXZ
  00406A46: mov     ecx, [ecx+8]; this
  00406A49: test    ecx, ecx
  00406A4B: jz      short loc_406A52
  00406A4D: jmp     ?length@DName@@QBEHXZ; DName::length(void)
  00406A52: xor     eax, eax
  00406A54: retn

Function: ?getLastChar@pDNameNode@@UBEDXZ
  00406A55: mov     ecx, [ecx+8]; this
  00406A58: test    ecx, ecx
  00406A5A: jz      short loc_406A61
  00406A5C: jmp     ?getLastChar@DName@@QBEDXZ; DName::getLastChar(void)
  00406A61: xor     al, al
  00406A63: retn

Function: ?getString@pDNameNode@@UBEPADPADH@Z
  00406A64: mov     ecx, [ecx+8]; this
  00406A67: xor     eax, eax
  00406A69: cmp     ecx, eax
  00406A6B: jz      short locret_6A7E
  00406A6D: cmp     [esp+arg_0], eax
  00406A71: jz      short locret_6A7E
  00406A73: cmp     [esp+arg_4], eax
  00406A77: jz      short locret_6A7E
  00406A79: jmp     ?getString@DName@@QBEPADPADH@Z; DName::getString(char *,int)
  00406A7E: retn    8

Function: ?getString@DNameStatusNode@@UBEPADPADH@Z
  00406A81: mov     eax, [ecx+0Ch]
  00406A84: mov     edx, [esp+arg_4]
  00406A88: cmp     edx, eax
  00406A8A: jle     short loc_406A8E
  00406A8C: mov     edx, eax
  00406A8E: xor     eax, eax
  00406A90: cmp     dword ptr [ecx+8], 2
  00406A94: jnz     short locret_6AB1
  00406A96: cmp     [esp+arg_0], eax
  00406A9A: jz      short locret_6AB1
  00406A9C: cmp     edx, eax
  00406A9E: jz      short locret_6AB1
  00406AA0: push    edx; char *
  00406AA1: push    [esp+4+arg_0]; char *
  00406AA5: mov     edx, 4117B0h
  00406AAA: call    ?und_strncpy@@YAPADPADPBDI@Z; und_strncpy(char *,char const *,uint)
  00406AAF: pop     ecx
  00406AB0: pop     ecx
  00406AB1: retn    8

Function: ??0UnDecorator@@QAE@PADPBDHP6APADJ@ZK@Z
  00406AB4: push    ebp
  00406AB5: mov     ebp, esp
  00406AB7: push    esi
  00406AB8: push    edi
  00406AB9: mov     esi, ecx
  00406ABB: call    ??0Replicator@@QAE@XZ; Replicator::Replicator(void)
  00406AC0: lea     edi, [esi+3Ch]
  00406AC3: mov     ecx, edi; this
  00406AC5: call    ??0Replicator@@QAE@XZ; Replicator::Replicator(void)
  00406ACA: mov     eax, [ebp+arg_4]
  00406ACD: mov     ds:41E070h, eax
  00406AD2: mov     ds:41E06Ch, eax
  00406AD7: mov     eax, [ebp+arg_0]
  00406ADA: xor     ecx, ecx
  00406ADC: cmp     eax, ecx
  00406ADE: jz      short loc_406AF1
  00406AE0: mov     edx, [ebp+arg_8]
  00406AE3: dec     edx
  00406AE4: mov     ds:41E078h, edx
  00406AEA: mov     ds:41E074h, eax
  00406AEF: jmp     short loc_406AFD
  00406AF1: mov     ds:41E074h, ecx
  00406AF7: mov     ds:41E078h, ecx
  00406AFD: mov     eax, [ebp+arg_10]
  00406B00: mov     ds:41E07Ch, eax
  00406B05: mov     eax, [ebp+arg_C]
  00406B08: mov     ds:41E064h, edi
  00406B0E: mov     ds:41E080h, eax
  00406B13: pop     edi
  00406B14: mov     ds:41E060h, esi
  00406B1A: mov     eax, esi
  00406B1C: mov     ds:41E084h, cl
  00406B22: pop     esi
  00406B23: pop     ebp
  00406B24: retn    14h

Function: ?getReturnType@UnDecorator@@CA?AVDName@@PAV2@@Z
  00406B27: push    ebp
  00406B28: mov     ebp, esp
  00406B2A: mov     eax, ds:41E06Ch
  00406B2F: cmp     byte ptr [eax], 40h ; '@'
  00406B32: push    [ebp+arg_4]; struct DName *
  00406B35: jnz     short loc_406B47
  00406B37: mov     ecx, [ebp+arg_0]; this
  00406B3A: inc     dword ptr ds:41E06Ch
  00406B40: call    ??0DName@@QAE@PAV0@@Z; DName::DName(DName *)
  00406B45: jmp     short loc_406B51
  00406B47: push    [ebp+arg_0]
  00406B4A: call    ?getDataType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getDataType(DName *)
  00406B4F: pop     ecx
  00406B50: pop     ecx
  00406B51: mov     eax, [ebp+arg_0]
  00406B54: pop     ebp
  00406B55: retn

Function: ??YDName@@QAEAAV0@W4DNameStatus@@@Z
  00406B56: push    esi
  00406B57: push    edi
  00406B58: mov     esi, ecx
  00406B5A: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00406B5F: test    eax, eax
  00406B61: mov     edi, [esp+8+arg_0]
  00406B65: jnz     short loc_406BC2
  00406B67: cmp     edi, 1
  00406B6A: jz      short loc_406BC2
  00406B6C: cmp     edi, 3
  00406B6F: jz      short loc_406BC2
  00406B71: push    0; int
  00406B73: push    10h; unsigned int
  00406B75: mov     ecx, 41E04Ch; this
  00406B7A: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00406B7F: test    eax, eax
  00406B81: jz      short loc_406B8F
  00406B83: push    edi
  00406B84: mov     ecx, eax
  00406B86: call    ??0DNameStatusNode@@QAE@W4DNameStatus@@@Z; DNameStatusNode::DNameStatusNode(DNameStatus)
  00406B8B: mov     edi, eax
  00406B8D: jmp     short loc_406B91
  00406B8F: xor     edi, edi
  00406B91: test    edi, edi
  00406B93: jz      short loc_406BAC
  00406B95: mov     ecx, [esi]; this
  00406B97: call    ?clone@DNameNode@@QAEPAV1@XZ; DNameNode::clone(void)
  00406B9C: test    eax, eax
  00406B9E: mov     [esi], eax
  00406BA0: jz      short loc_406BB4
  00406BA2: push    edi
  00406BA3: mov     ecx, eax
  00406BA5: call    ??YDNameNode@@QAEAAV0@PAV0@@Z; DNameNode::operator+=(DNameNode *)
  00406BAA: jmp     short loc_406BAF
  00406BAC: and     dword ptr [esi], 0
  00406BAF: cmp     dword ptr [esi], 0
  00406BB2: jnz     short loc_406BCA
  00406BB4: mov     eax, [esi+4]
  00406BB7: and     eax, 0FFFFFFF3h
  00406BBA: or      eax, 3
  00406BBD: mov     [esi+4], eax
  00406BC0: jmp     short loc_406BCA
  00406BC2: push    edi
  00406BC3: mov     ecx, esi
  00406BC5: call    ??4DName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator=(DNameStatus)
  00406BCA: pop     edi
  00406BCB: mov     eax, esi
  00406BCD: pop     esi
  00406BCE: retn    4

Function: ?doPchar@DName@@AAEXPBDH@Z
  00406BD1: push    esi
  00406BD2: mov     esi, ecx
  00406BD4: mov     eax, [esi+4]
  00406BD7: mov     ecx, eax
  00406BD9: shl     ecx, 1Ch
  00406BDC: sar     ecx, 1Ch
  00406BDF: cmp     ecx, 1
  00406BE2: jz      loc_406C73
  00406BE8: cmp     ecx, 3
  00406BEB: jz      loc_406C73
  00406BF1: push    ebx
  00406BF2: xor     ebx, ebx
  00406BF4: cmp     [esi], ebx
  00406BF6: jz      short loc_406C03
  00406BF8: push    3
  00406BFA: mov     ecx, esi
  00406BFC: call    ??4DName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator=(DNameStatus)
  00406C01: jmp     short loc_406C72
  00406C03: push    edi
  00406C04: mov     edi, [esp+0Ch+arg_0]
  00406C08: cmp     edi, ebx
  00406C0A: jz      short loc_406C68
  00406C0C: mov     ecx, [esp+0Ch+arg_4]
  00406C10: cmp     ecx, ebx
  00406C12: jz      short loc_406C68
  00406C14: sub     ecx, ebx
  00406C16: jz      short loc_406C60
  00406C18: dec     ecx
  00406C19: push    ebx; int
  00406C1A: mov     ecx, 41E04Ch; this
  00406C1F: jz      short loc_406C3A
  00406C21: push    10h; unsigned int
  00406C23: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00406C28: cmp     eax, ebx
  00406C2A: jz      short loc_406C55
  00406C2C: push    [esp+0Ch+arg_4]; int
  00406C30: mov     ecx, eax; this
  00406C32: push    edi; char *
  00406C33: call    ??0pcharNode@@QAE@PBDH@Z; pcharNode::pcharNode(char const *,int)
  00406C38: jmp     short loc_406C57
  00406C3A: push    0Ch; unsigned int
  00406C3C: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00406C41: cmp     eax, ebx
  00406C43: jz      short loc_406C55
  00406C45: mov     cl, [edi]
  00406C47: mov     [eax+4], ebx
  00406C4A: mov     dword ptr [eax], 411780h
  00406C50: mov     [eax+8], cl
  00406C53: jmp     short loc_406C57
  00406C55: xor     eax, eax
  00406C57: cmp     eax, ebx
  00406C59: mov     [esi], eax
  00406C5B: jnz     short loc_406C71
  00406C5D: mov     eax, [esi+4]
  00406C60: and     eax, 0FFFFFFF3h
  00406C63: or      eax, 3
  00406C66: jmp     short loc_406C6E
  00406C68: and     eax, 0FFFFFFF1h
  00406C6B: or      eax, 1
  00406C6E: mov     [esi+4], eax
  00406C71: pop     edi
  00406C72: pop     ebx
  00406C73: pop     esi
  00406C74: retn    8

Function: ??0DName@@QAE@D@Z
  00406C77: push    esi
  00406C78: mov     esi, ecx
  00406C7A: and     dword ptr [esi], 0
  00406C7D: and     word ptr [esi+4], 0FE00h
  00406C83: cmp     [esp+4+arg_0], 0
  00406C88: jz      short loc_406C96
  00406C8A: push    1; int
  00406C8C: lea     eax, [esp+8+arg_0]
  00406C90: push    eax; char *
  00406C91: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406C96: mov     eax, esi
  00406C98: pop     esi
  00406C99: retn    4

Function: ??0DName@@QAE@PBD@Z
  00406C9C: mov     eax, [esp+arg_0]
  00406CA0: push    esi
  00406CA1: mov     esi, ecx
  00406CA3: and     word ptr [esi+4], 0FE00h
  00406CA9: xor     edx, edx
  00406CAB: cmp     eax, edx
  00406CAD: mov     [esi], edx
  00406CAF: jz      short loc_406CC6
  00406CB1: xor     ecx, ecx
  00406CB3: cmp     [eax], dl
  00406CB5: jz      short loc_406CBD
  00406CB7: inc     ecx
  00406CB8: cmp     [ecx+eax], dl
  00406CBB: jnz     short loc_406CB7
  00406CBD: push    ecx; int
  00406CBE: push    eax; char *
  00406CBF: mov     ecx, esi; this
  00406CC1: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406CC6: mov     eax, esi
  00406CC8: pop     esi
  00406CC9: retn    4

Function: ??0DName@@QAE@AAPBDD@Z
  00406CCC: push    ebp
  00406CCD: mov     ebp, esp
  00406CCF: push    ebx
  00406CD0: push    esi
  00406CD1: mov     esi, ecx
  00406CD3: and     word ptr [esi+4], 0FE00h
  00406CD9: mov     eax, [esi+4]
  00406CDC: xor     ebx, ebx
  00406CDE: push    edi
  00406CDF: mov     edi, [ebp+arg_0]
  00406CE2: mov     [esi], ebx
  00406CE4: mov     ecx, [edi]
  00406CE6: cmp     ecx, ebx
  00406CE8: jz      loc_406D72
  00406CEE: cmp     [ecx], bl
  00406CF0: jz      loc_406D91
  00406CF6: mov     [ebp+arg_0], ecx
  00406CF9: mov     eax, [edi]
  00406CFB: mov     dl, [eax]
  00406CFD: cmp     dl, [ebp+arg_4]
  00406D00: jz      short loc_406D46
  00406D02: cmp     dl, 5Fh ; '_'
  00406D05: jz      short loc_406D3D
  00406D07: cmp     dl, 24h ; '$'
  00406D0A: jz      short loc_406D3D
  00406D0C: cmp     dl, 61h ; 'a'
  00406D0F: jl      short loc_406D16
  00406D11: cmp     dl, 7Ah ; 'z'
  00406D14: jle     short loc_406D3D
  00406D16: cmp     dl, 41h ; 'A'
  00406D19: jl      short loc_406D20
  00406D1B: cmp     dl, 5Ah ; 'Z'
  00406D1E: jle     short loc_406D3D
  00406D20: cmp     dl, 30h ; '0'
  00406D23: jl      short loc_406D2A
  00406D25: cmp     dl, 39h ; '9'
  00406D28: jle     short loc_406D3D
  00406D2A: cmp     dl, 80h ; '€'
  00406D2D: jb      short loc_406D34
  00406D2F: cmp     dl, 0FEh ; 'þ'
  00406D32: jbe     short loc_406D3D
  00406D34: test    byte ptr ds:41E07Eh, 1
  00406D3B: jz      short loc_406D6F
  00406D3D: inc     ebx
  00406D3E: inc     eax
  00406D3F: mov     [edi], eax
  00406D41: cmp     byte ptr [eax], 0
  00406D44: jnz     short loc_406CF9
  00406D46: push    ebx; int
  00406D47: push    [ebp+arg_0]; char *
  00406D4A: mov     ecx, esi; this
  00406D4C: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406D51: mov     eax, [edi]
  00406D53: mov     cl, [eax]
  00406D55: test    cl, cl
  00406D57: jz      short loc_406D8A
  00406D59: inc     eax
  00406D5A: cmp     cl, [ebp+arg_4]
  00406D5D: mov     [edi], eax
  00406D5F: jz      short loc_406D84
  00406D61: mov     eax, [esi+4]
  00406D64: and     eax, 0FFFFFFF3h
  00406D67: or      eax, 3
  00406D6A: and     dword ptr [esi], 0
  00406D6D: jmp     short loc_406D78
  00406D6F: mov     eax, [esi+4]
  00406D72: and     eax, 0FFFFFFF1h
  00406D75: or      eax, 1
  00406D78: mov     [esi+4], eax
  00406D7B: pop     edi
  00406D7C: mov     eax, esi
  00406D7E: pop     esi
  00406D7F: pop     ebx
  00406D80: pop     ebp
  00406D81: retn    8
  00406D84: and     dword ptr [esi+4], 0FFFFFFF0h
  00406D88: jmp     short loc_406D7B
  00406D8A: mov     eax, [esi+4]
  00406D8D: test    al, 0Fh
  00406D8F: jnz     short loc_406D7B
  00406D91: and     eax, 0FFFFFFF2h
  00406D94: or      eax, 2
  00406D97: jmp     short loc_406D78

Function: ??0DName@@QAE@_K@Z
  00406D99: push    ebp
  00406D9A: mov     ebp, esp
  00406D9C: sub     esp, 24h
  00406D9F: mov     eax, ds:413390h
  00406DA4: push    ebx
  00406DA5: push    esi
  00406DA6: push    edi
  00406DA7: mov     edi, ecx
  00406DA9: and     dword ptr [edi], 0
  00406DAC: and     word ptr [edi+4], 0FE00h
  00406DB2: mov     [ebp+StackCookie], eax
  00406DB5: lea     esi, [ebp+var_8]
  00406DB8: mov     [ebp+var_8], 0
  00406DBC: push    0
  00406DBE: push    0Ah
  00406DC0: push    dword ptr [ebp+arg_0+4]
  00406DC3: dec     esi
  00406DC4: push    dword ptr [ebp+arg_0]
  00406DC7: call    __aulldvrm
  00406DCC: add     cl, 30h ; '0'
  00406DCF: mov     dword ptr [ebp+arg_0], eax
  00406DD2: or      eax, edx
  00406DD4: mov     [ebp+var_20], ebx
  00406DD7: mov     [esi], cl
  00406DD9: mov     dword ptr [ebp+arg_0+4], edx
  00406DDC: jnz     short loc_406DBC
  00406DDE: lea     eax, [ebp+var_8]
  00406DE1: sub     eax, esi
  00406DE3: push    eax; int
  00406DE4: push    esi; char *
  00406DE5: mov     ecx, edi; this
  00406DE7: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406DEC: mov     ecx, [ebp+StackCookie]; StackCookie
  00406DEF: mov     eax, edi
  00406DF1: pop     edi
  00406DF2: pop     esi
  00406DF3: pop     ebx
  00406DF4: call    @__security_check_cookie@4; __security_check_cookie(x)
  00406DF9: leave
  00406DFA: retn    8

Function: ??0DName@@QAE@_J@Z
  00406DFD: push    ebp
  00406DFE: mov     ebp, esp
  00406E00: sub     esp, 28h
  00406E03: mov     eax, ds:413390h
  00406E08: push    esi
  00406E09: push    edi
  00406E0A: mov     edi, ecx
  00406E0C: and     word ptr [edi+4], 0FE00h
  00406E12: xor     ecx, ecx
  00406E14: mov     [ebp+StackCookie], eax
  00406E17: mov     eax, dword ptr [ebp+arg_0+4]
  00406E1A: cmp     eax, ecx
  00406E1C: lea     esi, [ebp+var_7]
  00406E1F: mov     [edi], ecx
  00406E21: mov     [ebp+var_7], cl
  00406E24: mov     [ebp+var_1D], cl
  00406E27: jg      short loc_406E40
  00406E29: jl      short loc_406E30
  00406E2B: cmp     dword ptr [ebp+arg_0], ecx
  00406E2E: jnb     short loc_406E40
  00406E30: mov     edx, dword ptr [ebp+arg_0]
  00406E33: neg     edx
  00406E35: adc     eax, ecx
  00406E37: mov     [ebp+var_1D], 1
  00406E3B: neg     eax
  00406E3D: mov     dword ptr [ebp+arg_0], edx
  00406E40: push    ebx
  00406E41: jmp     short loc_406E45
  00406E43: xor     ecx, ecx
  00406E45: push    ecx
  00406E46: push    0Ah
  00406E48: push    eax
  00406E49: push    dword ptr [ebp+arg_0]
  00406E4C: dec     esi
  00406E4D: call    __aulldvrm
  00406E52: add     cl, 30h ; '0'
  00406E55: mov     dword ptr [ebp+arg_0], eax
  00406E58: mov     [esi], cl
  00406E5A: mov     ecx, dword ptr [ebp+arg_0]
  00406E5D: mov     eax, edx
  00406E5F: or      ecx, eax
  00406E61: mov     [ebp+var_24], ebx
  00406E64: jnz     short loc_406E43
  00406E66: cmp     [ebp+var_1D], 0
  00406E6A: pop     ebx
  00406E6B: jz      short loc_406E71
  00406E6D: dec     esi
  00406E6E: mov     byte ptr [esi], 2Dh ; '-'
  00406E71: lea     eax, [ebp+var_7]
  00406E74: sub     eax, esi
  00406E76: push    eax; int
  00406E77: push    esi; char *
  00406E78: mov     ecx, edi; this
  00406E7A: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406E7F: mov     ecx, [ebp+StackCookie]; StackCookie
  00406E82: mov     eax, edi
  00406E84: pop     edi
  00406E85: pop     esi
  00406E86: call    @__security_check_cookie@4; __security_check_cookie(x)
  00406E8B: leave
  00406E8C: retn    8

Function: ??HDName@@QBE?AV0@W4DNameStatus@@@Z
  00406E8F: push    ebp
  00406E90: mov     ebp, esp
  00406E92: push    ecx
  00406E93: push    ecx
  00406E94: push    ecx; struct DName *
  00406E95: lea     ecx, [ebp+var_8]; this
  00406E98: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00406E9D: lea     ecx, [ebp+var_8]; this
  00406EA0: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00406EA5: test    eax, eax
  00406EA7: push    [ebp+arg_4]
  00406EAA: jz      short loc_406EB3
  00406EAC: call    ??4DName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator=(DNameStatus)
  00406EB1: jmp     short loc_406EB8
  00406EB3: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  00406EB8: mov     ecx, [ebp+arg_0]; this
  00406EBB: lea     eax, [ebp+var_8]
  00406EBE: push    eax; struct DName *
  00406EBF: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00406EC4: mov     eax, [ebp+arg_0]
  00406EC7: leave
  00406EC8: retn    8

Function: ??YDName@@QAEAAV0@ABV0@@Z
  00406ECB: push    esi
  00406ECC: push    edi
  00406ECD: mov     edi, [esp+8+arg_0]
  00406ED1: mov     esi, ecx
  00406ED3: mov     ecx, edi; this
  00406ED5: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00406EDA: test    eax, eax
  00406EDC: mov     ecx, esi; this
  00406EDE: jz      short loc_406EF1
  00406EE0: mov     eax, [edi+4]
  00406EE3: shl     eax, 1Ch
  00406EE6: sar     eax, 1Ch
  00406EE9: push    eax
  00406EEA: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  00406EEF: jmp     short loc_406F28
  00406EF1: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00406EF6: test    eax, eax
  00406EF8: jz      short loc_406F04
  00406EFA: push    edi
  00406EFB: mov     ecx, esi
  00406EFD: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00406F02: jmp     short loc_406F28
  00406F04: mov     ecx, [esi]; this
  00406F06: call    ?clone@DNameNode@@QAEPAV1@XZ; DNameNode::clone(void)
  00406F0B: test    eax, eax
  00406F0D: mov     [esi], eax
  00406F0F: jz      short loc_406F1C
  00406F11: push    dword ptr [edi]
  00406F13: mov     ecx, eax
  00406F15: call    ??YDNameNode@@QAEAAV0@PAV0@@Z; DNameNode::operator+=(DNameNode *)
  00406F1A: jmp     short loc_406F28
  00406F1C: mov     eax, [esi+4]
  00406F1F: and     eax, 0FFFFFFF3h
  00406F22: or      eax, 3
  00406F25: mov     [esi+4], eax
  00406F28: pop     edi
  00406F29: mov     eax, esi
  00406F2B: pop     esi
  00406F2C: retn    4

Function: ??4DName@@QAEAAV0@D@Z
  00406F2F: push    esi
  00406F30: push    1; int
  00406F32: lea     eax, [esp+8+arg_0]
  00406F36: mov     esi, ecx
  00406F38: and     byte ptr [esi+4], 0Fh
  00406F3C: push    eax; char *
  00406F3D: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406F42: mov     eax, esi
  00406F44: pop     esi
  00406F45: retn    4

Function: ??4DName@@QAEAAV0@PBD@Z
  00406F48: mov     eax, [esp+arg_0]
  00406F4C: push    esi
  00406F4D: mov     esi, ecx
  00406F4F: and     byte ptr [esi+4], 0Fh
  00406F53: xor     ecx, ecx
  00406F55: cmp     [eax], cl
  00406F57: jz      short loc_406F60
  00406F59: inc     ecx
  00406F5A: cmp     byte ptr [ecx+eax], 0
  00406F5E: jnz     short loc_406F59
  00406F60: push    ecx; int
  00406F61: push    eax; char *
  00406F62: mov     ecx, esi; this
  00406F64: call    ?doPchar@DName@@AAEXPBDH@Z; DName::doPchar(char const *,int)
  00406F69: mov     eax, esi
  00406F6B: pop     esi
  00406F6C: retn    4

Function: ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ
  00406F6F: push    ebp
  00406F70: mov     ebp, esp
  00406F72: push    ecx
  00406F73: push    ecx
  00406F74: mov     eax, ds:41E06Ch
  00406F79: mov     al, [eax]
  00406F7B: test    al, al
  00406F7D: jz      loc_407005
  00406F83: movsx   eax, al
  00406F86: sub     eax, 41h ; 'A'
  00406F89: inc     dword ptr ds:41E06Ch
  00406F8F: cmp     eax, 0Ch
  00406F92: ja      short loc_407001
  00406F94: mov     ecx, ds:41E07Ch
  00406F9A: and     [ebp+var_8], 0
  00406F9E: and     [ebp+var_4], 0FE00h
  00406FA4: shr     ecx, 1
  00406FA6: not     ecx
  00406FA8: test    cl, 1
  00406FAB: jz      short loc_406FF3
  00406FAD: and     eax, 0FFFFFFFEh
  00406FB0: sub     eax, 0
  00406FB3: jz      short loc_406FE0
  00406FB5: push    2
  00406FB7: pop     ecx
  00406FB8: sub     eax, ecx
  00406FBA: jz      short loc_406FDD
  00406FBC: sub     eax, ecx
  00406FBE: jz      short loc_406FD9
  00406FC0: sub     eax, ecx
  00406FC2: jz      short loc_406FD5
  00406FC4: sub     eax, ecx
  00406FC6: jz      short loc_406FD1
  00406FC8: sub     eax, 4
  00406FCB: jnz     short loc_406FF3
  00406FCD: push    6
  00406FCF: jmp     short loc_406FE2
  00406FD1: push    5
  00406FD3: jmp     short loc_406FE2
  00406FD5: push    3
  00406FD7: jmp     short loc_406FE2
  00406FD9: push    4
  00406FDB: jmp     short loc_406FE2
  00406FDD: push    ecx
  00406FDE: jmp     short loc_406FE2
  00406FE0: push    1
  00406FE2: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00406FE7: add     esp, 4
  00406FEA: lea     ecx, [ebp+var_8]; this
  00406FED: push    eax; char *
  00406FEE: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00406FF3: mov     ecx, [ebp+arg_0]; this
  00406FF6: lea     eax, [ebp+var_8]
  00406FF9: push    eax; struct DName *
  00406FFA: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00406FFF: jmp     short loc_40700F
  00407001: push    1
  00407003: jmp     short loc_407007
  00407005: push    2
  00407007: mov     ecx, [ebp+arg_0]
  0040700A: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040700F: mov     eax, [ebp+arg_0]
  00407012: leave
  00407013: retn

Function: ?getVCallThunkType@UnDecorator@@CA?AVDName@@XZ
  00407014: push    ebp
  00407015: mov     ebp, esp
  00407017: mov     eax, ds:41E06Ch
  0040701C: mov     al, [eax]
  0040701E: test    al, al
  00407020: mov     ecx, [ebp+arg_0]; this
  00407023: jz      short loc_40703F
  00407025: cmp     al, 41h ; 'A'
  00407027: jz      short loc_40702D
  00407029: push    1
  0040702B: jmp     short loc_407041
  0040702D: inc     dword ptr ds:41E06Ch
  00407033: push    4117B8h; char *
  00407038: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  0040703D: jmp     short loc_407046
  0040703F: push    2
  00407041: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00407046: mov     eax, [ebp+arg_0]
  00407049: pop     ebp
  0040704A: retn

Function: ??HDName@@QBE?AV0@ABV0@@Z
  0040704B: push    ebp
  0040704C: mov     ebp, esp
  0040704E: push    ecx
  0040704F: push    ecx
  00407050: push    ecx; struct DName *
  00407051: lea     ecx, [ebp+var_8]; this
  00407054: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407059: lea     ecx, [ebp+var_8]; this
  0040705C: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00407061: test    eax, eax
  00407063: jz      short loc_40706F
  00407065: push    [ebp+arg_4]
  00407068: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040706D: jmp     short loc_407098
  0040706F: mov     ecx, [ebp+arg_4]; this
  00407072: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00407077: test    eax, eax
  00407079: jz      short loc_40708F
  0040707B: mov     eax, [ecx+4]
  0040707E: shl     eax, 1Ch
  00407081: sar     eax, 1Ch
  00407084: push    eax
  00407085: lea     ecx, [ebp+var_8]
  00407088: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  0040708D: jmp     short loc_407098
  0040708F: push    ecx; DName *
  00407090: lea     ecx, [ebp+var_8]; this
  00407093: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407098: mov     ecx, [ebp+arg_0]; this
  0040709B: lea     eax, [ebp+var_8]
  0040709E: push    eax; struct DName *
  0040709F: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004070A4: mov     eax, [ebp+arg_0]
  004070A7: leave
  004070A8: retn    8

Function: ??YDName@@QAEAAV0@D@Z
  004070AB: push    ebx
  004070AC: mov     ebx, [esp+4+arg_0]
  004070B0: test    bl, bl
  004070B2: push    esi
  004070B3: mov     esi, ecx
  004070B5: jz      short loc_40710E
  004070B7: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004070BC: test    eax, eax
  004070BE: jz      short loc_4070C8
  004070C0: push    ebx
  004070C1: call    ??4DName@@QAEAAV0@D@Z; DName::operator=(char)
  004070C6: jmp     short loc_40710E
  004070C8: mov     ecx, [esi]; this
  004070CA: call    ?clone@DNameNode@@QAEPAV1@XZ; DNameNode::clone(void)
  004070CF: test    eax, eax
  004070D1: mov     [esi], eax
  004070D3: jz      short loc_407102
  004070D5: push    0; int
  004070D7: push    0Ch; unsigned int
  004070D9: mov     ecx, 41E04Ch; this
  004070DE: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  004070E3: test    eax, eax
  004070E5: jz      short loc_4070F6
  004070E7: and     dword ptr [eax+4], 0
  004070EB: mov     dword ptr [eax], 411780h
  004070F1: mov     [eax+8], bl
  004070F4: jmp     short loc_4070F8
  004070F6: xor     eax, eax
  004070F8: mov     ecx, [esi]
  004070FA: push    eax
  004070FB: call    ??YDNameNode@@QAEAAV0@PAV0@@Z; DNameNode::operator+=(DNameNode *)
  00407100: jmp     short loc_40710E
  00407102: mov     eax, [esi+4]
  00407105: and     eax, 0FFFFFFF3h
  00407108: or      eax, 3
  0040710B: mov     [esi+4], eax
  0040710E: mov     eax, esi
  00407110: pop     esi
  00407111: pop     ebx
  00407112: retn    4

Function: ??YDName@@QAEAAV0@PBD@Z
  00407115: push    esi
  00407116: push    edi
  00407117: mov     edi, [esp+8+arg_0]
  0040711B: test    edi, edi
  0040711D: mov     esi, ecx
  0040711F: jz      short loc_40717A
  00407121: cmp     byte ptr [edi], 0
  00407124: jz      short loc_40717A
  00407126: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040712B: test    eax, eax
  0040712D: jz      short loc_407137
  0040712F: push    edi; char *
  00407130: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00407135: jmp     short loc_40717A
  00407137: mov     ecx, [esi]; this
  00407139: call    ?clone@DNameNode@@QAEPAV1@XZ; DNameNode::clone(void)
  0040713E: test    eax, eax
  00407140: mov     [esi], eax
  00407142: jz      short loc_40716E
  00407144: push    0; int
  00407146: push    10h; unsigned int
  00407148: mov     ecx, 41E04Ch; this
  0040714D: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00407152: test    eax, eax
  00407154: jz      short loc_407162
  00407156: push    0; int
  00407158: push    edi; char *
  00407159: mov     ecx, eax; this
  0040715B: call    ??0pcharNode@@QAE@PBDH@Z; pcharNode::pcharNode(char const *,int)
  00407160: jmp     short loc_407164
  00407162: xor     eax, eax
  00407164: mov     ecx, [esi]
  00407166: push    eax
  00407167: call    ??YDNameNode@@QAEAAV0@PAV0@@Z; DNameNode::operator+=(DNameNode *)
  0040716C: jmp     short loc_40717A
  0040716E: mov     eax, [esi+4]
  00407171: and     eax, 0FFFFFFF3h
  00407174: or      eax, 3
  00407177: mov     [esi+4], eax
  0040717A: pop     edi
  0040717B: mov     eax, esi
  0040717D: pop     esi
  0040717E: retn    4

Function: ?getArgumentList@UnDecorator@@CA?AVDName@@XZ
  00407181: push    ebp
  00407182: mov     ebp, esp
  00407184: sub     esp, 18h
  00407187: and     [ebp+var_8], 0
  0040718B: push    ebx
  0040718C: push    esi
  0040718D: xor     ebx, ebx
  0040718F: mov     esi, 0FFFFFE00h
  00407194: and     [ebp+var_4], esi
  00407197: inc     ebx
  00407198: test    byte ptr [ebp+var_4], 0Fh
  0040719C: jnz     loc_407255
  004071A2: push    edi
  004071A3: mov     eax, ds:41E06Ch
  004071A8: mov     cl, [eax]
  004071AA: cmp     cl, 40h ; '@'
  004071AD: jz      loc_407254
  004071B3: cmp     cl, 5Ah ; 'Z'
  004071B6: jz      loc_407254
  004071BC: test    ebx, ebx
  004071BE: jz      short loc_4071C4
  004071C0: xor     ebx, ebx
  004071C2: jmp     short loc_4071D3
  004071C4: push    2Ch ; ','
  004071C6: lea     ecx, [ebp+var_8]
  004071C9: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  004071CE: mov     eax, ds:41E06Ch
  004071D3: mov     cl, [eax]
  004071D5: test    cl, cl
  004071D7: jz      short loc_40724A
  004071D9: movsx   ecx, cl
  004071DC: sub     ecx, 30h ; '0'
  004071DF: js      short loc_4071FA
  004071E1: cmp     ecx, 9
  004071E4: jg      short loc_4071FA
  004071E6: inc     eax
  004071E7: push    ecx
  004071E8: mov     ecx, ds:41E060h
  004071EE: mov     ds:41E06Ch, eax
  004071F3: call    ??AReplicator@@QBEABVDName@@H@Z; Replicator::operator[](int)
  004071F8: jmp     short loc_407235
  004071FA: and     [ebp+var_10], 0
  004071FE: and     [ebp+var_C], esi
  00407201: mov     edi, eax
  00407203: lea     eax, [ebp+var_10]
  00407206: push    eax
  00407207: lea     eax, [ebp+var_18]
  0040720A: push    eax
  0040720B: call    ?getPrimaryDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getPrimaryDataType(DName const &)
  00407210: mov     eax, ds:41E06Ch
  00407215: sub     eax, edi
  00407217: cmp     eax, 1
  0040721A: pop     ecx
  0040721B: pop     ecx
  0040721C: jle     short loc_407232
  0040721E: mov     ecx, ds:41E060h
  00407224: cmp     dword ptr [ecx], 9
  00407227: jz      short loc_407232
  00407229: lea     eax, [ebp+var_18]
  0040722C: push    eax; struct DName *
  0040722D: call    ??YReplicator@@QAEAAV0@ABVDName@@@Z; Replicator::operator+=(DName const &)
  00407232: lea     eax, [ebp+var_18]
  00407235: lea     ecx, [ebp+var_8]; this
  00407238: push    eax; DName *
  00407239: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040723E: test    byte ptr [ebp+var_4], 0Fh
  00407242: jz      loc_4071A3
  00407248: jmp     short loc_407254
  0040724A: push    2
  0040724C: lea     ecx, [ebp+var_8]
  0040724F: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  00407254: pop     edi
  00407255: mov     ecx, [ebp+arg_0]; this
  00407258: lea     eax, [ebp+var_8]
  0040725B: push    eax; struct DName *
  0040725C: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407261: mov     eax, [ebp+arg_0]
  00407264: pop     esi
  00407265: pop     ebx
  00407266: leave
  00407267: retn

Function: ?getVdispMapType@UnDecorator@@CA?AVDName@@ABV2@@Z
  00407268: push    ebp
  00407269: mov     ebp, esp
  0040726B: sub     esp, 10h
  0040726E: push    [ebp+arg_4]; struct DName *
  00407271: lea     ecx, [ebp+var_8]; this
  00407274: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407279: push    4117C0h; char *
  0040727E: lea     ecx, [ebp+var_8]
  00407281: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  00407286: lea     eax, [ebp+var_10]
  00407289: push    eax
  0040728A: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  0040728F: pop     ecx
  00407290: push    eax; DName *
  00407291: lea     ecx, [ebp+var_8]; this
  00407294: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407299: push    7Dh ; '}'
  0040729B: lea     ecx, [ebp+var_8]
  0040729E: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  004072A3: mov     eax, ds:41E06Ch
  004072A8: cmp     byte ptr [eax], 40h ; '@'
  004072AB: jnz     short loc_4072B3
  004072AD: inc     dword ptr ds:41E06Ch
  004072B3: mov     ecx, [ebp+arg_0]; this
  004072B6: lea     eax, [ebp+var_8]
  004072B9: push    eax; struct DName *
  004072BA: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004072BF: mov     eax, [ebp+arg_0]
  004072C2: leave
  004072C3: retn

Function: ??H@YA?AVDName@@DABV0@@Z
  004072C4: push    ebp
  004072C5: mov     ebp, esp
  004072C7: push    ecx
  004072C8: push    ecx
  004072C9: push    [ebp+arg_8]; DName *
  004072CC: lea     ecx, [ebp+var_8]; this
  004072CF: push    [ebp+arg_0]; DName *
  004072D2: push    dword ptr [ebp+arg_4]; char
  004072D5: call    ??0DName@@QAE@D@Z; DName::DName(char)
  004072DA: mov     ecx, eax; struct DName *
  004072DC: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004072E1: mov     eax, [ebp+arg_0]
  004072E4: leave
  004072E5: retn

Function: ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z
  004072E6: push    ebp
  004072E7: mov     ebp, esp
  004072E9: push    ecx
  004072EA: push    ecx
  004072EB: push    [ebp+arg_8]; DName *
  004072EE: lea     ecx, [ebp+var_8]
  004072F1: push    [ebp+arg_0]; DName *
  004072F4: push    [ebp+arg_4]
  004072F7: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004072FC: mov     ecx, eax; struct DName *
  004072FE: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00407303: mov     eax, [ebp+arg_0]
  00407306: leave
  00407307: retn

Function: ??H@YA?AVDName@@PBDABV0@@Z
  00407308: push    ebp
  00407309: mov     ebp, esp
  0040730B: push    ecx
  0040730C: push    ecx
  0040730D: push    [ebp+arg_8]; DName *
  00407310: lea     ecx, [ebp+var_8]; this
  00407313: push    [ebp+arg_0]; DName *
  00407316: push    [ebp+arg_4]; char *
  00407319: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  0040731E: mov     ecx, eax; struct DName *
  00407320: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00407325: mov     eax, [ebp+arg_0]
  00407328: leave
  00407329: retn

Function: ??HDName@@QBE?AV0@D@Z
  0040732A: push    ebp
  0040732B: mov     ebp, esp
  0040732D: push    ecx
  0040732E: push    ecx
  0040732F: push    ecx; struct DName *
  00407330: lea     ecx, [ebp+var_8]; this
  00407333: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407338: lea     ecx, [ebp+var_8]; this
  0040733B: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00407340: test    eax, eax
  00407342: push    [ebp+arg_4]
  00407345: jz      short loc_40734E
  00407347: call    ??4DName@@QAEAAV0@D@Z; DName::operator=(char)
  0040734C: jmp     short loc_407353
  0040734E: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00407353: mov     ecx, [ebp+arg_0]; this
  00407356: lea     eax, [ebp+var_8]
  00407359: push    eax; struct DName *
  0040735A: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040735F: mov     eax, [ebp+arg_0]
  00407362: leave
  00407363: retn    8

Function: ??HDName@@QBE?AV0@PBD@Z
  00407366: push    ebp
  00407367: mov     ebp, esp
  00407369: push    ecx
  0040736A: push    ecx
  0040736B: push    ecx; struct DName *
  0040736C: lea     ecx, [ebp+var_8]; this
  0040736F: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407374: lea     ecx, [ebp+var_8]; this
  00407377: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040737C: test    eax, eax
  0040737E: push    [ebp+arg_4]; char *
  00407381: jz      short loc_40738A
  00407383: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00407388: jmp     short loc_40738F
  0040738A: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  0040738F: mov     ecx, [ebp+arg_0]; this
  00407392: lea     eax, [ebp+var_8]
  00407395: push    eax; struct DName *
  00407396: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040739B: mov     eax, [ebp+arg_0]
  0040739E: leave
  0040739F: retn    8

Function: ?getDimension@UnDecorator@@CA?AVDName@@_N@Z
  004073A2: push    ebp
  004073A3: mov     ebp, esp
  004073A5: sub     esp, 1Ch
  004073A8: push    esi
  004073A9: mov     esi, ds:41E06Ch
  004073AF: xor     ecx, ecx
  004073B1: cmp     byte ptr [esi], 51h ; 'Q'
  004073B4: mov     [ebp+var_4], ecx
  004073B7: jnz     short loc_4073C7
  004073B9: inc     esi
  004073BA: mov     [ebp+var_4], 4117C8h
  004073C1: mov     ds:41E06Ch, esi
  004073C7: mov     al, [esi]
  004073C9: cmp     al, cl
  004073CB: jnz     short loc_4073DC
  004073CD: mov     ecx, [ebp+arg_0]
  004073D0: push    2
  004073D2: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004073D7: jmp     loc_4074DD
  004073DC: cmp     al, 30h ; '0'
  004073DE: jl      short loc_407429
  004073E0: cmp     al, 39h ; '9'
  004073E2: jg      short loc_407429
  004073E4: movsx   eax, byte ptr [esi]
  004073E7: sub     eax, 2Fh ; '/'
  004073EA: cdq
  004073EB: inc     esi
  004073EC: cmp     [ebp+var_4], ecx
  004073EF: push    edx
  004073F0: mov     ds:41E06Ch, esi
  004073F6: push    eax; unsigned __int64
  004073F7: jz      short loc_407413
  004073F9: lea     ecx, [ebp+var_C]; this
  004073FC: call    ??0DName@@QAE@_K@Z; DName::DName(unsigned __int64)
  00407401: push    eax; DName *
  00407402: push    [ebp+var_4]; char *
  00407405: lea     eax, [ebp+var_14]
  00407408: push    eax; DName *
  00407409: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040740E: add     esp, 0Ch
  00407411: jmp     short loc_40741B
  00407413: lea     ecx, [ebp+var_1C]; this
  00407416: call    ??0DName@@QAE@_K@Z; DName::DName(unsigned __int64)
  0040741B: mov     ecx, [ebp+arg_0]; this
  0040741E: push    eax; struct DName *
  0040741F: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407424: jmp     loc_4074DD
  00407429: push    ebx
  0040742A: push    edi
  0040742B: xor     edi, edi
  0040742D: jmp     short loc_407468
  0040742F: test    al, al
  00407431: jz      short loc_407485
  00407433: cmp     al, 41h ; 'A'
  00407435: jl      short loc_407479
  00407437: cmp     al, 50h ; 'P'
  00407439: jg      short loc_407479
  0040743B: movsx   eax, al
  0040743E: sub     eax, 41h ; 'A'
  00407441: push    0
  00407443: cdq
  00407444: push    10h
  00407446: mov     ebx, eax
  00407448: push    edi
  00407449: mov     eax, edx
  0040744B: push    ecx
  0040744C: mov     [ebp+var_8], eax
  0040744F: call    __allmul
  00407454: add     ebx, eax
  00407456: mov     eax, [ebp+var_8]
  00407459: adc     eax, edx
  0040745B: inc     esi
  0040745C: mov     edi, eax
  0040745E: mov     ds:41E06Ch, esi
  00407464: mov     al, [esi]
  00407466: mov     ecx, ebx
  00407468: cmp     al, 40h ; '@'
  0040746A: jnz     short loc_40742F
  0040746C: mov     al, [esi]
  0040746E: inc     esi
  0040746F: cmp     al, 40h ; '@'
  00407471: mov     ds:41E06Ch, esi
  00407477: jz      short loc_407489
  00407479: push    1
  0040747B: mov     ecx, [ebp+arg_0]
  0040747E: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00407483: jmp     short loc_4074DB
  00407485: push    2
  00407487: jmp     short loc_40747B
  00407489: xor     eax, eax
  0040748B: cmp     [ebp+arg_4], al
  0040748E: push    edi
  0040748F: push    ecx; unsigned __int64
  00407490: jz      short loc_4074BB
  00407492: cmp     [ebp+var_4], eax
  00407495: jz      short loc_4074B1
  00407497: lea     ecx, [ebp+var_1C]; this
  0040749A: call    ??0DName@@QAE@_J@Z; DName::DName(__int64)
  0040749F: push    eax; DName *
  004074A0: push    [ebp+var_4]; char *
  004074A3: lea     eax, [ebp+var_14]
  004074A6: push    eax; DName *
  004074A7: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  004074AC: add     esp, 0Ch
  004074AF: jmp     short loc_4074D2
  004074B1: lea     ecx, [ebp+var_C]; this
  004074B4: call    ??0DName@@QAE@_J@Z; DName::DName(__int64)
  004074B9: jmp     short loc_4074D2
  004074BB: cmp     [ebp+var_4], eax
  004074BE: jz      short loc_4074CA
  004074C0: lea     ecx, [ebp+var_1C]; this
  004074C3: call    ??0DName@@QAE@_K@Z; DName::DName(unsigned __int64)
  004074C8: jmp     short loc_40749F
  004074CA: lea     ecx, [ebp+var_C]; this
  004074CD: call    ??0DName@@QAE@_K@Z; DName::DName(unsigned __int64)
  004074D2: mov     ecx, [ebp+arg_0]; this
  004074D5: push    eax; struct DName *
  004074D6: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004074DB: pop     edi
  004074DC: pop     ebx
  004074DD: mov     eax, [ebp+arg_0]
  004074E0: pop     esi
  004074E1: leave
  004074E2: retn

Function: ?getEnumType@UnDecorator@@CA?AVDName@@XZ
  004074E3: push    ebp
  004074E4: mov     ebp, esp
  004074E6: sub     esp, 10h
  004074E9: mov     eax, ds:41E06Ch
  004074EE: mov     al, [eax]
  004074F0: and     [ebp+var_8], 0
  004074F4: and     [ebp+var_4], 0FE00h
  004074FA: test    al, al
  004074FC: jz      loc_407585
  00407502: movsx   eax, al
  00407505: add     eax, 0FFFFFFD0h; switch with an invalid jump table
  00407508: cmp     eax, 7
  0040750B: ja      short def_750D; jumptable 0040750D default case
  0040750D: jmp     dword ptr [eax*4+407594h]; switch jump
  00407514: push    41180Ch; jumptable 0040750D cases 48,49
  00407519: jmp     short loc_40752E
  0040751B: push    411804h; jumptable 0040750D cases 50,51
  00407520: jmp     short loc_40752E
  00407522: push    4117FCh; jumptable 0040750D case 53
  00407527: jmp     short loc_40752E
  00407529: push    4117F4h; jumptable 0040750D cases 54,55
  0040752E: lea     ecx, [ebp+var_8]; this
  00407531: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00407536: mov     eax, ds:41E06Ch; jumptable 0040750D case 52
  0040753B: movsx   eax, byte ptr [eax]
  0040753E: inc     dword ptr ds:41E06Ch
  00407544: sub     eax, 31h ; '1'
  00407547: jz      short loc_407555
  00407549: dec     eax
  0040754A: dec     eax
  0040754B: jz      short loc_407555
  0040754D: dec     eax
  0040754E: dec     eax
  0040754F: jz      short loc_407555
  00407551: dec     eax
  00407552: dec     eax
  00407553: jnz     short loc_407573
  00407555: lea     eax, [ebp+var_8]
  00407558: push    eax; DName *
  00407559: lea     eax, [ebp+var_10]
  0040755C: push    4117E8h; char *
  00407561: push    eax; DName *
  00407562: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00407567: add     esp, 0Ch
  0040756A: push    eax
  0040756B: lea     ecx, [ebp+var_8]
  0040756E: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00407573: mov     ecx, [ebp+arg_0]; this
  00407576: lea     eax, [ebp+var_8]
  00407579: push    eax; struct DName *
  0040757A: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040757F: jmp     short loc_40758F
  00407581: push    1; jumptable 0040750D default case
  00407583: jmp     short loc_407587
  00407585: push    2
  00407587: mov     ecx, [ebp+arg_0]
  0040758A: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040758F: mov     eax, [ebp+arg_0]
  00407592: leave
  00407593: retn

Function: ?getArgumentTypes@UnDecorator@@CA?AVDName@@XZ
  004075B4: push    ebp
  004075B5: mov     ebp, esp
  004075B7: sub     esp, 10h
  004075BA: mov     eax, ds:41E06Ch
  004075BF: movsx   eax, byte ptr [eax]
  004075C2: sub     eax, 58h ; 'X'
  004075C5: jz      short loc_40762E
  004075C7: dec     eax
  004075C8: dec     eax
  004075C9: jz      short loc_407627
  004075CB: lea     eax, [ebp+var_8]
  004075CE: push    eax
  004075CF: call    ?getArgumentList@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getArgumentList(void)
  004075D4: test    [ebp+var_4], 0Fh
  004075D8: pop     ecx
  004075D9: jnz     short loc_407619
  004075DB: mov     eax, ds:41E06Ch
  004075E0: mov     al, [eax]
  004075E2: test    al, al
  004075E4: jz      short loc_407619
  004075E6: cmp     al, 40h ; '@'
  004075E8: jz      short loc_407613
  004075EA: cmp     al, 5Ah ; 'Z'
  004075EC: jz      short loc_4075FA
  004075EE: mov     ecx, [ebp+arg_0]
  004075F1: push    1
  004075F3: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004075F8: jmp     short loc_407641
  004075FA: inc     dword ptr ds:41E06Ch
  00407600: push    411820h; char *
  00407605: lea     eax, [ebp+var_10]
  00407608: push    eax; DName *
  00407609: lea     ecx, [ebp+var_8]; struct DName *
  0040760C: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00407611: jmp     short loc_40761C
  00407613: inc     dword ptr ds:41E06Ch
  00407619: lea     eax, [ebp+var_8]
  0040761C: mov     ecx, [ebp+arg_0]; this
  0040761F: push    eax; struct DName *
  00407620: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407625: jmp     short loc_407641
  00407627: push    41181Ch
  0040762C: jmp     short loc_407633
  0040762E: push    411814h; char *
  00407633: mov     ecx, [ebp+arg_0]; this
  00407636: inc     dword ptr ds:41E06Ch
  0040763C: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  00407641: mov     eax, [ebp+arg_0]
  00407644: leave
  00407645: retn

Function: ?getThrowTypes@UnDecorator@@CA?AVDName@@XZ
  00407646: push    ebp
  00407647: mov     ebp, esp
  00407649: sub     esp, 10h
  0040764C: mov     eax, ds:41E06Ch
  00407651: mov     al, [eax]
  00407653: test    al, al
  00407655: jz      short loc_407698
  00407657: cmp     al, 5Ah ; 'Z'
  00407659: lea     eax, [ebp+var_8]
  0040765C: jnz     short loc_407679
  0040765E: mov     ecx, [ebp+arg_0]; this
  00407661: inc     dword ptr ds:41E06Ch
  00407667: and     [ebp+var_8], 0
  0040766B: and     [ebp+var_4], 0FE00h
  00407671: push    eax; struct DName *
  00407672: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407677: jmp     short loc_4076BE
  00407679: push    29h ; ')'
  0040767B: push    [ebp+arg_0]
  0040767E: push    eax
  0040767F: call    ?getArgumentTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getArgumentTypes(void)
  00407684: push    eax; DName *
  00407685: lea     eax, [ebp+var_10]
  00407688: push    411828h; char *
  0040768D: push    eax; DName *
  0040768E: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00407693: add     esp, 10h
  00407696: jmp     short loc_4076B7
  00407698: push    29h ; ')'; int
  0040769A: push    [ebp+arg_0]; DName *
  0040769D: lea     eax, [ebp+var_10]
  004076A0: push    2; int
  004076A2: push    eax; DName *
  004076A3: push    411828h; char *
  004076A8: lea     ecx, [ebp+var_8]; this
  004076AB: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  004076B0: mov     ecx, eax; struct DName *
  004076B2: call    ??HDName@@QBE?AV0@W4DNameStatus@@@Z; DName::operator+(DNameStatus)
  004076B7: mov     ecx, eax; struct DName *
  004076B9: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  004076BE: mov     eax, [ebp+arg_0]
  004076C1: leave
  004076C2: retn

Function: ?getArrayType@UnDecorator@@CA?AVDName@@ABV2@@Z
  004076C3: push    ebp
  004076C4: mov     ebp, esp
  004076C6: sub     esp, 28h
  004076C9: mov     eax, ds:41E06Ch
  004076CE: cmp     byte ptr [eax], 0
  004076D1: push    edi
  004076D2: jz      loc_4077DE
  004076D8: call    ?getNumberOfDimensions@UnDecorator@@CAHXZ; UnDecorator::getNumberOfDimensions(void)
  004076DD: mov     edi, eax
  004076DF: test    edi, edi
  004076E1: jge     short loc_4076E7
  004076E3: xor     edi, edi
  004076E5: test    edi, edi
  004076E7: jnz     short loc_40771E
  004076E9: lea     eax, [ebp+var_10]
  004076EC: push    5Dh ; ']'; int
  004076EE: push    eax; DName *
  004076EF: lea     eax, [ebp+var_8]
  004076F2: push    2; int
  004076F4: push    eax; DName *
  004076F5: lea     ecx, [ebp+var_18]; this
  004076F8: push    5Bh ; '['; char
  004076FA: call    ??0DName@@QAE@D@Z; DName::DName(char)
  004076FF: mov     ecx, eax; struct DName *
  00407701: call    ??HDName@@QBE?AV0@W4DNameStatus@@@Z; DName::operator+(DNameStatus)
  00407706: mov     ecx, eax; struct DName *
  00407708: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040770D: push    eax
  0040770E: push    [ebp+arg_0]
  00407711: call    ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getBasicDataType(DName const &)
  00407716: pop     ecx
  00407717: pop     ecx
  00407718: mov     eax, [ebp+arg_0]
  0040771B: pop     edi
  0040771C: leave
  0040771D: retn
  0040771E: and     [ebp+var_8], 0
  00407722: and     [ebp+var_4], 0FE00h
  00407728: push    esi
  00407729: mov     esi, [ebp+arg_4]
  0040772C: test    byte ptr [esi+4], 80h
  00407730: jz      short loc_40773F
  00407732: push    4116E4h; char *
  00407737: lea     ecx, [ebp+var_8]
  0040773A: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  0040773F: push    5Dh ; ']'; int
  00407741: lea     eax, [ebp+var_18]
  00407744: push    eax; DName *
  00407745: lea     eax, [ebp+var_20]
  00407748: push    0
  0040774A: push    eax
  0040774B: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00407750: push    eax; DName *
  00407751: lea     eax, [ebp+var_28]
  00407754: push    5Bh ; '['; char
  00407756: push    eax; DName *
  00407757: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040775C: add     esp, 14h
  0040775F: mov     ecx, eax; struct DName *
  00407761: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00407766: push    eax; DName *
  00407767: lea     ecx, [ebp+var_8]; this
  0040776A: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040776F: dec     edi
  00407770: jnz     short loc_40773F
  00407772: mov     ecx, esi; this
  00407774: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00407779: test    eax, eax
  0040777B: jnz     short loc_4077B9
  0040777D: test    byte ptr [esi+4], 80h
  00407781: lea     eax, [ebp+var_8]
  00407784: push    eax; DName *
  00407785: lea     eax, [ebp+var_28]
  00407788: push    eax; DName *
  00407789: jz      short loc_40778D
  0040778B: jmp     short loc_4077AB
  0040778D: push    29h ; ')'; int
  0040778F: lea     eax, [ebp+var_20]
  00407792: push    eax; DName *
  00407793: push    esi; DName *
  00407794: lea     eax, [ebp+var_18]
  00407797: push    28h ; '('; char
  00407799: push    eax; DName *
  0040779A: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040779F: add     esp, 0Ch
  004077A2: mov     ecx, eax; struct DName *
  004077A4: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  004077A9: mov     ecx, eax; struct DName *
  004077AB: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004077B0: lea     ecx, [ebp+var_8]
  004077B3: push    eax
  004077B4: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004077B9: lea     eax, [ebp+var_8]
  004077BC: push    eax
  004077BD: lea     eax, [ebp+var_10]
  004077C0: push    eax
  004077C1: call    ?getPrimaryDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getPrimaryDataType(DName const &)
  004077C6: or      [ebp+var_C], 80h
  004077CA: pop     ecx
  004077CB: pop     ecx
  004077CC: mov     ecx, [ebp+arg_0]; this
  004077CF: lea     eax, [ebp+var_10]
  004077D2: push    eax; struct DName *
  004077D3: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004077D8: pop     esi
  004077D9: jmp     loc_407718
  004077DE: mov     ecx, [ebp+arg_4]; this
  004077E1: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004077E6: test    eax, eax
  004077E8: lea     eax, [ebp+var_28]
  004077EB: push    5Dh ; ']'
  004077ED: push    eax
  004077EE: lea     eax, [ebp+var_20]
  004077F1: jnz     loc_4076F2
  004077F7: push    2
  004077F9: push    eax
  004077FA: push    411830h; char *
  004077FF: lea     eax, [ebp+var_18]
  00407802: push    eax; DName *
  00407803: push    ecx; DName *
  00407804: lea     eax, [ebp+var_10]
  00407807: push    28h ; '('; char
  00407809: push    eax; DName *
  0040780A: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040780F: add     esp, 0Ch
  00407812: mov     ecx, eax; struct DName *
  00407814: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00407819: jmp     loc_4076FF

Function: ?getLexicalFrame@UnDecorator@@CA?AVDName@@XZ
  0040781E: push    ebp
  0040781F: mov     ebp, esp
  00407821: sub     esp, 10h
  00407824: push    27h ; '''; int
  00407826: push    [ebp+arg_0]; DName *
  00407829: lea     eax, [ebp+var_8]
  0040782C: push    0
  0040782E: push    eax
  0040782F: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00407834: push    eax; DName *
  00407835: lea     eax, [ebp+var_10]
  00407838: push    60h ; '`'; char
  0040783A: push    eax; DName *
  0040783B: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00407840: add     esp, 14h
  00407843: mov     ecx, eax; struct DName *
  00407845: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040784A: mov     eax, [ebp+arg_0]
  0040784D: leave
  0040784E: retn

Function: ?getVfTableType@UnDecorator@@CA?AVDName@@ABV2@@Z
  0040784F: push    ebp
  00407850: mov     ebp, esp
  00407852: sub     esp, 20h
  00407855: push    [ebp+arg_4]; struct DName *
  00407858: lea     ecx, [ebp+var_8]; this
  0040785B: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407860: lea     ecx, [ebp+var_8]; this
  00407863: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00407868: test    eax, eax
  0040786A: jz      loc_407985
  00407870: mov     eax, ds:41E06Ch
  00407875: cmp     byte ptr [eax], 0
  00407878: jz      loc_407985
  0040787E: lea     eax, [ebp+var_10]
  00407881: push    eax
  00407882: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDataIndirectType(void)
  00407887: pop     ecx
  00407888: lea     eax, [ebp+var_8]
  0040788B: push    eax; DName *
  0040788C: lea     eax, [ebp+var_18]
  0040788F: push    eax; DName *
  00407890: push    20h ; ' '; int
  00407892: lea     eax, [ebp+var_20]
  00407895: push    eax; DName *
  00407896: lea     ecx, [ebp+var_10]; struct DName *
  00407899: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040789E: mov     ecx, eax; struct DName *
  004078A0: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004078A5: push    eax
  004078A6: lea     ecx, [ebp+var_8]
  004078A9: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004078AE: lea     ecx, [ebp+var_8]; this
  004078B1: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  004078B6: test    eax, eax
  004078B8: jz      loc_4079AC
  004078BE: mov     eax, ds:41E06Ch
  004078C3: cmp     byte ptr [eax], 40h ; '@'
  004078C6: jz      loc_40797D
  004078CC: push    4117C0h
  004078D1: jmp     short loc_407938
  004078D3: mov     eax, ds:41E06Ch
  004078D8: mov     al, [eax]
  004078DA: test    al, al
  004078DC: jz      short loc_40794C
  004078DE: cmp     al, 40h ; '@'
  004078E0: jz      short loc_40794C
  004078E2: push    27h ; '''; int
  004078E4: lea     eax, [ebp+var_20]
  004078E7: push    eax; DName *
  004078E8: lea     eax, [ebp+var_18]
  004078EB: push    eax
  004078EC: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  004078F1: push    eax; DName *
  004078F2: lea     eax, [ebp+var_10]
  004078F5: push    60h ; '`'; char
  004078F7: push    eax; DName *
  004078F8: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  004078FD: add     esp, 10h
  00407900: mov     ecx, eax; struct DName *
  00407902: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00407907: push    eax; DName *
  00407908: lea     ecx, [ebp+var_8]; this
  0040790B: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407910: mov     edx, ds:41E06Ch
  00407916: cmp     byte ptr [edx], 40h ; '@'
  00407919: jnz     short loc_407922
  0040791B: inc     edx
  0040791C: mov     ds:41E06Ch, edx
  00407922: lea     ecx, [ebp+var_8]; this
  00407925: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  0040792A: test    eax, eax
  0040792C: jz      short loc_407940
  0040792E: cmp     byte ptr [edx], 40h ; '@'
  00407931: jz      short loc_407940
  00407933: push    411834h; char *
  00407938: lea     ecx, [ebp+var_8]
  0040793B: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  00407940: lea     ecx, [ebp+var_8]; this
  00407943: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00407948: test    eax, eax
  0040794A: jnz     short loc_4078D3
  0040794C: lea     ecx, [ebp+var_8]; this
  0040794F: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00407954: test    eax, eax
  00407956: jz      short loc_407973
  00407958: mov     eax, ds:41E06Ch
  0040795D: cmp     byte ptr [eax], 0
  00407960: jnz     short loc_407969
  00407962: push    2
  00407964: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  00407969: push    7Dh ; '}'
  0040796B: lea     ecx, [ebp+var_8]
  0040796E: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00407973: mov     eax, ds:41E06Ch
  00407978: cmp     byte ptr [eax], 40h ; '@'
  0040797B: jnz     short loc_4079AC
  0040797D: inc     dword ptr ds:41E06Ch
  00407983: jmp     short loc_4079AC
  00407985: lea     ecx, [ebp+var_8]; this
  00407988: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  0040798D: test    eax, eax
  0040798F: jz      short loc_4079AC
  00407991: lea     eax, [ebp+var_8]
  00407994: push    eax; DName *
  00407995: lea     eax, [ebp+var_20]
  00407998: push    2; int
  0040799A: push    eax; DName *
  0040799B: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  004079A0: add     esp, 0Ch
  004079A3: push    eax
  004079A4: lea     ecx, [ebp+var_8]
  004079A7: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004079AC: mov     ecx, [ebp+arg_0]; this
  004079AF: lea     eax, [ebp+var_8]
  004079B2: push    eax; struct DName *
  004079B3: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004079B8: mov     eax, [ebp+arg_0]
  004079BB: leave
  004079BC: retn

Function: ?getStringEncoding@UnDecorator@@CA?AVDName@@PADH@Z
  004079BD: push    ebp
  004079BE: mov     ebp, esp
  004079C0: sub     esp, 10h
  004079C3: push    [ebp+arg_4]; char *
  004079C6: lea     ecx, [ebp+var_8]; this
  004079C9: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  004079CE: mov     eax, ds:41E06Ch
  004079D3: mov     al, [eax]
  004079D5: inc     dword ptr ds:41E06Ch
  004079DB: cmp     al, 40h ; '@'
  004079DD: jnz     short loc_407A4E
  004079DF: mov     eax, ds:41E06Ch
  004079E4: mov     al, [eax]
  004079E6: inc     dword ptr ds:41E06Ch
  004079EC: cmp     al, 5Fh ; '_'
  004079EE: jnz     short loc_407A4E
  004079F0: inc     dword ptr ds:41E06Ch
  004079F6: lea     eax, [ebp+var_10]
  004079F9: push    0
  004079FB: push    eax
  004079FC: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00407A01: lea     eax, [ebp+var_10]
  00407A04: push    0
  00407A06: push    eax
  00407A07: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00407A0C: mov     eax, ds:41E06Ch
  00407A11: mov     cl, [eax]
  00407A13: add     esp, 10h
  00407A16: test    cl, cl
  00407A18: jz      short loc_407A30
  00407A1A: cmp     cl, 40h ; '@'
  00407A1D: jz      short loc_407A2B
  00407A1F: inc     eax
  00407A20: mov     ds:41E06Ch, eax
  00407A25: mov     cl, [eax]
  00407A27: test    cl, cl
  00407A29: jnz     short loc_407A1A
  00407A2B: cmp     byte ptr [eax], 0
  00407A2E: jnz     short loc_407A3A
  00407A30: dec     eax
  00407A31: mov     ds:41E06Ch, eax
  00407A36: push    2
  00407A38: jmp     short loc_407A50
  00407A3A: mov     ecx, [ebp+arg_0]; this
  00407A3D: inc     eax
  00407A3E: mov     ds:41E06Ch, eax
  00407A43: lea     eax, [ebp+var_8]
  00407A46: push    eax; struct DName *
  00407A47: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407A4C: jmp     short loc_407A58
  00407A4E: push    1
  00407A50: mov     ecx, [ebp+arg_0]
  00407A53: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00407A58: mov     eax, [ebp+arg_0]
  00407A5B: leave
  00407A5C: retn

Function: ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ
  00407A5D: push    ebp
  00407A5E: mov     ebp, esp
  00407A60: push    ecx
  00407A61: push    ecx
  00407A62: mov     eax, ds:41E06Ch
  00407A67: mov     al, [eax]
  00407A69: test    al, al
  00407A6B: jnz     short loc_407A79
  00407A6D: mov     ecx, [ebp+arg_0]
  00407A70: push    2
  00407A72: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00407A77: jmp     short loc_407AA8
  00407A79: cmp     al, 3Fh ; '?'
  00407A7B: push    0
  00407A7D: jnz     short loc_407A9E
  00407A7F: inc     dword ptr ds:41E06Ch
  00407A85: lea     eax, [ebp+var_8]
  00407A88: push    eax
  00407A89: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00407A8E: push    eax; DName *
  00407A8F: push    2Dh ; '-'; char
  00407A91: push    [ebp+arg_0]; DName *
  00407A94: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00407A99: add     esp, 14h
  00407A9C: jmp     short loc_407AA8
  00407A9E: push    [ebp+arg_0]
  00407AA1: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00407AA6: pop     ecx
  00407AA7: pop     ecx
  00407AA8: mov     eax, [ebp+arg_0]
  00407AAB: leave
  00407AAC: retn

Function: ?getTemplateConstant@UnDecorator@@CA?AVDName@@XZ
  00407AAD: push    ebp
  00407AAE: lea     ebp, [esp-74h]
  00407AB2: sub     esp, 0D0h
  00407AB8: mov     eax, ds:413390h
  00407ABD: mov     [ebp+74h+StackCookie], eax
  00407AC0: mov     eax, ds:41E06Ch
  00407AC5: push    ebx
  00407AC6: mov     bl, [eax]
  00407AC8: inc     dword ptr ds:41E06Ch
  00407ACE: push    esi
  00407ACF: movsx   esi, bl
  00407AD2: cmp     esi, 44h ; 'D'
  00407AD5: jg      loc_407BE2
  00407ADB: jz      loc_407C03
  00407AE1: sub     esi, 0
  00407AE4: jz      loc_407BD5
  00407AEA: sub     esi, 30h ; '0'
  00407AED: jz      loc_407BC8
  00407AF3: dec     esi
  00407AF4: jz      loc_407B87
  00407AFA: dec     esi
  00407AFB: jnz     loc_407D1E
  00407B01: lea     eax, [ebp+74h+var_80]
  00407B04: push    eax
  00407B05: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407B0A: lea     eax, [ebp+74h+var_C]
  00407B0D: push    eax
  00407B0E: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407B13: pop     ecx
  00407B14: pop     ecx
  00407B15: lea     ecx, [ebp+74h+var_80]; this
  00407B18: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00407B1D: test    eax, eax
  00407B1F: jz      loc_407BDB
  00407B25: lea     ecx, [ebp+74h+var_C]; this
  00407B28: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00407B2D: test    eax, eax
  00407B2F: jz      loc_407BDB
  00407B35: push    64h ; 'd'; int
  00407B37: lea     eax, [ebp+74h+var_77]
  00407B3A: push    eax; char *
  00407B3B: lea     ecx, [ebp+74h+var_80]; this
  00407B3E: call    ?getString@DName@@QBEPADPADH@Z; DName::getString(char *,int)
  00407B43: test    eax, eax
  00407B45: jz      loc_407D1E
  00407B4B: mov     al, [ebp+74h+var_77]
  00407B4E: cmp     al, 2Dh ; '-'
  00407B50: mov     [ebp+74h+var_78], al
  00407B53: jnz     short loc_407B61
  00407B55: mov     al, [ebp+74h+var_76]
  00407B58: mov     [ebp+74h+var_77], al
  00407B5B: mov     [ebp+74h+var_76], 2Eh ; '.'
  00407B5F: jmp     short loc_407B65
  00407B61: mov     [ebp+74h+var_77], 2Eh ; '.'
  00407B65: lea     eax, [ebp+74h+var_C]
  00407B68: push    eax
  00407B69: push    [ebp+74h+arg_0]
  00407B6C: lea     eax, [ebp+74h+var_A8]
  00407B6F: push    65h ; 'e'; int
  00407B71: push    eax; DName *
  00407B72: lea     eax, [ebp+74h+var_78]
  00407B75: push    eax; char *
  00407B76: lea     ecx, [ebp+74h+var_D0]; this
  00407B79: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  00407B7E: mov     ecx, eax; struct DName *
  00407B80: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00407B85: jmp     short loc_407BBC
  00407B87: mov     eax, ds:41E06Ch
  00407B8C: cmp     byte ptr [eax], 40h ; '@'
  00407B8F: jnz     short loc_407BA1
  00407B91: inc     dword ptr ds:41E06Ch
  00407B97: push    411850h
  00407B9C: jmp     loc_407C3B
  00407BA1: lea     eax, [ebp+74h+var_98]
  00407BA4: push    eax
  00407BA5: call    ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDecoratedName(void)
  00407BAA: pop     ecx
  00407BAB: push    eax; DName *
  00407BAC: push    [ebp+74h+arg_0]; DName *
  00407BAF: lea     ecx, [ebp+74h+var_B8]; this
  00407BB2: push    4116BCh; char *
  00407BB7: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  00407BBC: mov     ecx, eax; struct DName *
  00407BBE: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00407BC3: jmp     loc_407D33
  00407BC8: push    [ebp+74h+arg_0]
  00407BCB: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407BD0: jmp     loc_407D32
  00407BD5: dec     dword ptr ds:41E06Ch
  00407BDB: push    2
  00407BDD: jmp     loc_407D20
  00407BE2: cmp     esi, 45h ; 'E'
  00407BE5: jz      loc_407D2A
  00407BEB: jle     loc_407D1E
  00407BF1: cmp     esi, 4Ah ; 'J'
  00407BF4: jle     loc_407C80
  00407BFA: cmp     esi, 51h ; 'Q'
  00407BFD: jnz     loc_407D1E
  00407C03: lea     eax, [ebp+74h+var_80]
  00407C06: push    eax
  00407C07: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407C0C: test    byte ptr ds:41E07Dh, 40h
  00407C13: pop     ecx
  00407C14: jz      short loc_407C48
  00407C16: push    10h; int
  00407C18: lea     eax, [ebp+74h+String]
  00407C1B: push    eax; char *
  00407C1C: lea     ecx, [ebp+74h+var_80]; this
  00407C1F: call    ?getString@DName@@QBEPADPADH@Z; DName::getString(char *,int)
  00407C24: lea     eax, [ebp+74h+String]
  00407C27: push    eax; String
  00407C28: call    _atol
  00407C2D: push    eax
  00407C2E: call    dword ptr ds:41E080h
  00407C34: test    eax, eax
  00407C36: pop     ecx
  00407C37: pop     ecx
  00407C38: jz      short loc_407C48
  00407C3A: push    eax; char *
  00407C3B: mov     ecx, [ebp+74h+arg_0]; this
  00407C3E: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  00407C43: jmp     loc_407D33
  00407C48: cmp     bl, 44h ; 'D'
  00407C4B: push    41184Ch; char *
  00407C50: push    [ebp+74h+arg_0]; DName *
  00407C53: lea     eax, [ebp+74h+var_80]
  00407C56: push    eax; DName *
  00407C57: jnz     short loc_407C63
  00407C59: push    411838h
  00407C5E: lea     eax, [ebp+74h+var_88]
  00407C61: jmp     short loc_407C6B
  00407C63: push    4117C8h; char *
  00407C68: lea     eax, [ebp+74h+var_C8]
  00407C6B: push    eax; DName *
  00407C6C: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00407C71: add     esp, 0Ch
  00407C74: mov     ecx, eax; struct DName *
  00407C76: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00407C7B: jmp     loc_407D33
  00407C80: push    7Bh ; '{'; char
  00407C82: lea     ecx, [ebp+74h+var_80]; this
  00407C85: call    ??0DName@@QAE@D@Z; DName::DName(char)
  00407C8A: cmp     bl, 48h ; 'H'
  00407C8D: jl      short loc_407CB1
  00407C8F: cmp     bl, 4Ah ; 'J'
  00407C92: jg      short loc_407CB1
  00407C94: lea     eax, [ebp+74h+var_90]
  00407C97: push    eax
  00407C98: call    ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDecoratedName(void)
  00407C9D: pop     ecx
  00407C9E: push    eax; DName *
  00407C9F: lea     ecx, [ebp+74h+var_80]; this
  00407CA2: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407CA7: push    2Ch ; ','
  00407CA9: lea     ecx, [ebp+74h+var_80]
  00407CAC: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00407CB1: sub     esi, 46h ; 'F'
  00407CB4: jz      short loc_407CDF
  00407CB6: dec     esi
  00407CB7: jz      short loc_407CC2
  00407CB9: dec     esi
  00407CBA: jz      short loc_407CFC
  00407CBC: dec     esi
  00407CBD: jz      short loc_407CDF
  00407CBF: dec     esi
  00407CC0: jnz     short loc_407D0F
  00407CC2: lea     eax, [ebp+74h+var_A0]
  00407CC5: push    eax
  00407CC6: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407CCB: pop     ecx
  00407CCC: push    eax; DName *
  00407CCD: lea     ecx, [ebp+74h+var_80]; this
  00407CD0: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407CD5: push    2Ch ; ','
  00407CD7: lea     ecx, [ebp+74h+var_80]
  00407CDA: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00407CDF: lea     eax, [ebp+74h+var_B0]
  00407CE2: push    eax
  00407CE3: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407CE8: pop     ecx
  00407CE9: push    eax; DName *
  00407CEA: lea     ecx, [ebp+74h+var_80]; this
  00407CED: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407CF2: push    2Ch ; ','
  00407CF4: lea     ecx, [ebp+74h+var_80]
  00407CF7: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00407CFC: lea     eax, [ebp+74h+var_C0]
  00407CFF: push    eax
  00407D00: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407D05: pop     ecx
  00407D06: push    eax; DName *
  00407D07: lea     ecx, [ebp+74h+var_80]; this
  00407D0A: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407D0F: push    7Dh ; '}'; int
  00407D11: push    [ebp+74h+arg_0]; DName *
  00407D14: lea     ecx, [ebp+74h+var_80]; struct DName *
  00407D17: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00407D1C: jmp     short loc_407D33
  00407D1E: push    1
  00407D20: mov     ecx, [ebp+74h+arg_0]
  00407D23: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00407D28: jmp     short loc_407D33
  00407D2A: push    [ebp+74h+arg_0]
  00407D2D: call    ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDecoratedName(void)
  00407D32: pop     ecx
  00407D33: mov     ecx, [ebp+74h+StackCookie]; StackCookie
  00407D36: mov     eax, [ebp+74h+arg_0]
  00407D39: pop     esi
  00407D3A: pop     ebx
  00407D3B: call    @__security_check_cookie@4; __security_check_cookie(x)
  00407D40: add     ebp, 74h ; 't'
  00407D43: leave
  00407D44: retn

Function: ?getPtrRefDataType@UnDecorator@@CA?AVDName@@ABV2@H@Z
  00407D45: push    ebp
  00407D46: mov     ebp, esp
  00407D48: push    ecx
  00407D49: push    ecx
  00407D4A: mov     eax, ds:41E06Ch
  00407D4F: mov     al, [eax]
  00407D51: test    al, al
  00407D53: jz      loc_407DEF
  00407D59: cmp     [ebp+arg_8], 0
  00407D5D: jz      short loc_407D94
  00407D5F: cmp     al, 58h ; 'X'
  00407D61: jnz     short loc_407D94
  00407D63: mov     ecx, [ebp+arg_4]; this
  00407D66: inc     dword ptr ds:41E06Ch
  00407D6C: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00407D71: test    eax, eax
  00407D73: jz      short loc_407D84
  00407D75: mov     ecx, [ebp+arg_0]; this
  00407D78: push    411814h; char *
  00407D7D: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  00407D82: jmp     short loc_407DFF
  00407D84: push    ecx; DName *
  00407D85: push    411860h; char *
  00407D8A: push    [ebp+arg_0]; DName *
  00407D8D: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00407D92: jmp     short loc_407DFC
  00407D94: cmp     al, 59h ; 'Y'
  00407D96: jnz     short loc_407DAB
  00407D98: push    [ebp+arg_4]
  00407D9B: inc     dword ptr ds:41E06Ch
  00407DA1: push    [ebp+arg_0]
  00407DA4: call    ?getArrayType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getArrayType(DName const &)
  00407DA9: jmp     short loc_407DEB
  00407DAB: cmp     al, 5Fh ; '_'
  00407DAD: jnz     short loc_407DE0
  00407DAF: mov     eax, ds:41E06Ch
  00407DB4: cmp     byte ptr [eax+1], 5Ah ; 'Z'
  00407DB8: jnz     short loc_407DE0
  00407DBA: push    [ebp+arg_4]
  00407DBD: add     dword ptr ds:41E06Ch, 2
  00407DC4: lea     eax, [ebp+var_8]
  00407DC7: push    eax
  00407DC8: call    ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getBasicDataType(DName const &)
  00407DCD: push    eax; DName *
  00407DCE: push    411858h; char *
  00407DD3: push    [ebp+arg_0]; DName *
  00407DD6: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00407DDB: add     esp, 14h
  00407DDE: jmp     short loc_407DFF
  00407DE0: push    [ebp+arg_4]
  00407DE3: push    [ebp+arg_0]
  00407DE6: call    ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getBasicDataType(DName const &)
  00407DEB: pop     ecx
  00407DEC: pop     ecx
  00407DED: jmp     short loc_407DFF
  00407DEF: push    [ebp+arg_4]; DName *
  00407DF2: push    2; int
  00407DF4: push    [ebp+arg_0]; DName *
  00407DF7: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  00407DFC: add     esp, 0Ch
  00407DFF: mov     eax, [ebp+arg_0]
  00407E02: leave
  00407E03: retn

Function: ?getTemplateArgumentList@UnDecorator@@CA?AVDName@@XZ
  00407E04: push    ebp
  00407E05: mov     ebp, esp
  00407E07: sub     esp, 68h
  00407E0A: mov     eax, ds:413390h
  00407E0F: push    ebx
  00407E10: push    esi
  00407E11: mov     esi, 0FFFFFE00h
  00407E16: and     [ebp+var_20], esi
  00407E19: xor     ebx, ebx
  00407E1B: test    byte ptr [ebp+var_20], 0Fh
  00407E1F: mov     [ebp+StackCookie], eax
  00407E22: mov     [ebp+var_28], 1
  00407E29: mov     [ebp+var_24], ebx
  00407E2C: mov     byte ptr ds:41E085h, 1
  00407E33: jnz     loc_407F9D
  00407E39: push    edi
  00407E3A: mov     eax, ds:41E06Ch
  00407E3F: mov     cl, [eax]
  00407E41: cmp     cl, bl
  00407E43: jz      loc_407F9C
  00407E49: cmp     cl, 40h ; '@'
  00407E4C: jz      loc_407F9C
  00407E52: cmp     [ebp+var_28], ebx
  00407E55: jz      short loc_407E5C
  00407E57: mov     [ebp+var_28], ebx
  00407E5A: jmp     short loc_407E6B
  00407E5C: push    2Ch ; ','
  00407E5E: lea     ecx, [ebp+var_24]
  00407E61: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00407E66: mov     eax, ds:41E06Ch
  00407E6B: mov     dl, [eax]
  00407E6D: movsx   ecx, dl
  00407E70: sub     ecx, 30h ; '0'
  00407E73: js      short loc_407E91
  00407E75: cmp     ecx, 9
  00407E78: jg      short loc_407E91
  00407E7A: inc     eax
  00407E7B: push    ecx
  00407E7C: mov     ecx, ds:41E068h
  00407E82: mov     ds:41E06Ch, eax
  00407E87: call    ??AReplicator@@QBEABVDName@@H@Z; Replicator::operator[](int)
  00407E8C: jmp     loc_407F89
  00407E91: and     [ebp+var_18], esi
  00407E94: cmp     dl, 58h ; 'X'
  00407E97: mov     edi, eax
  00407E99: mov     [ebp+var_1C], ebx
  00407E9C: jnz     short loc_407EAB
  00407E9E: inc     eax
  00407E9F: mov     ds:41E06Ch, eax
  00407EA4: push    411814h
  00407EA9: jmp     short loc_407F05
  00407EAB: cmp     dl, 24h ; '$'
  00407EAE: jnz     short loc_407EC8
  00407EB0: inc     eax
  00407EB1: cmp     [eax], dl
  00407EB3: jz      short loc_407EC8
  00407EB5: mov     ds:41E06Ch, eax
  00407EBA: lea     eax, [ebp+var_40]
  00407EBD: push    eax
  00407EBE: call    ?getTemplateConstant@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getTemplateConstant(void)
  00407EC3: jmp     loc_407F5C
  00407EC8: cmp     dl, 3Fh ; '?'
  00407ECB: jnz     short loc_407F48
  00407ECD: lea     eax, [ebp+var_38]
  00407ED0: push    eax
  00407ED1: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  00407ED6: test    byte ptr ds:41E07Dh, 40h
  00407EDD: pop     ecx
  00407EDE: jz      short loc_407F21
  00407EE0: push    10h; int
  00407EE2: lea     eax, [ebp+String]
  00407EE5: push    eax; char *
  00407EE6: lea     ecx, [ebp+var_38]; this
  00407EE9: call    ?getString@DName@@QBEPADPADH@Z; DName::getString(char *,int)
  00407EEE: lea     eax, [ebp+String]
  00407EF1: push    eax; String
  00407EF2: call    _atol
  00407EF7: push    eax
  00407EF8: call    dword ptr ds:41E080h
  00407EFE: cmp     eax, ebx
  00407F00: pop     ecx
  00407F01: pop     ecx
  00407F02: jz      short loc_407F0F
  00407F04: push    eax; char *
  00407F05: lea     ecx, [ebp+var_1C]; this
  00407F08: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00407F0D: jmp     short loc_407F66
  00407F0F: push    41184Ch
  00407F14: lea     eax, [ebp+var_68]
  00407F17: push    eax
  00407F18: lea     eax, [ebp+var_38]
  00407F1B: push    eax
  00407F1C: lea     eax, [ebp+var_50]
  00407F1F: jmp     short loc_407F31
  00407F21: push    41184Ch; char *
  00407F26: lea     eax, [ebp+var_60]
  00407F29: push    eax; DName *
  00407F2A: lea     eax, [ebp+var_38]
  00407F2D: push    eax; DName *
  00407F2E: lea     eax, [ebp+var_48]
  00407F31: push    411838h; char *
  00407F36: push    eax; DName *
  00407F37: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00407F3C: add     esp, 0Ch
  00407F3F: mov     ecx, eax; struct DName *
  00407F41: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00407F46: jmp     short loc_407F5D
  00407F48: and     [ebp+var_2C], esi
  00407F4B: lea     eax, [ebp+var_30]
  00407F4E: push    eax
  00407F4F: lea     eax, [ebp+var_58]
  00407F52: push    eax
  00407F53: mov     [ebp+var_30], ebx
  00407F56: call    ?getPrimaryDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getPrimaryDataType(DName const &)
  00407F5B: pop     ecx
  00407F5C: pop     ecx
  00407F5D: lea     ecx, [ebp+var_1C]
  00407F60: push    eax
  00407F61: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00407F66: mov     eax, ds:41E06Ch
  00407F6B: sub     eax, edi
  00407F6D: cmp     eax, 1
  00407F70: jle     short loc_407F86
  00407F72: mov     ecx, ds:41E068h
  00407F78: cmp     dword ptr [ecx], 9
  00407F7B: jz      short loc_407F86
  00407F7D: lea     eax, [ebp+var_1C]
  00407F80: push    eax; struct DName *
  00407F81: call    ??YReplicator@@QAEAAV0@ABVDName@@@Z; Replicator::operator+=(DName const &)
  00407F86: lea     eax, [ebp+var_1C]
  00407F89: lea     ecx, [ebp+var_24]; this
  00407F8C: push    eax; DName *
  00407F8D: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00407F92: test    byte ptr [ebp+var_20], 0Fh
  00407F96: jz      loc_407E3A
  00407F9C: pop     edi
  00407F9D: mov     ecx, [ebp+arg_0]; this
  00407FA0: lea     eax, [ebp+var_24]
  00407FA3: push    eax; struct DName *
  00407FA4: mov     ds:41E085h, bl
  00407FAA: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00407FAF: mov     ecx, [ebp+StackCookie]; StackCookie
  00407FB2: mov     eax, [ebp+arg_0]
  00407FB5: pop     esi
  00407FB6: pop     ebx
  00407FB7: call    @__security_check_cookie@4; __security_check_cookie(x)
  00407FBC: leave
  00407FBD: retn

Function: ?getOperatorName@UnDecorator@@CA?AVDName@@_NPA_N@Z
  00407FBE: push    ebp
  00407FBF: mov     ebp, esp
  00407FC1: sub     esp, 90h
  00407FC7: mov     eax, ds:41E06Ch
  00407FCC: movsx   edx, byte ptr [eax]
  00407FCF: push    ebx
  00407FD0: xor     ebx, ebx
  00407FD2: mov     ecx, 0FFFFFE00h
  00407FD7: and     [ebp+var_4], ecx
  00407FDA: and     [ebp+var_C], ecx
  00407FDD: push    esi
  00407FDE: xor     esi, esi
  00407FE0: inc     eax
  00407FE1: cmp     edx, 41h ; 'A'
  00407FE4: mov     [ebp+var_8], ebx
  00407FE7: mov     [ebp+var_10], ebx
  00407FEA: mov     ds:41E06Ch, eax
  00407FEF: jg      loc_408115
  00407FF5: jz      loc_408464
  00407FFB: cmp     edx, ebx
  00407FFD: jz      loc_408108
  00408003: cmp     edx, 2Fh ; '/'
  00408006: jle     loc_408275
  0040800C: cmp     edx, 31h ; '1'
  0040800F: jle     short loc_40802A
  00408011: cmp     edx, 39h ; '9'
  00408014: jg      loc_408275
  0040801A: movsx   eax, byte ptr [eax-1]
  0040801E: push    dword ptr ds:4110B8h[eax*4]
  00408025: jmp     loc_4083C8
  0040802A: and     [ebp+var_C], ecx
  0040802D: cmp     [ebp+arg_4], bl
  00408030: mov     [ebp+var_10], ebx
  00408033: jz      short loc_40809D
  00408035: lea     eax, [ebp+var_88]
  0040803B: push    eax
  0040803C: call    ?getTemplateArgumentList@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getTemplateArgumentList(void)
  00408041: push    eax; DName *
  00408042: lea     eax, [ebp+var_90]
  00408048: push    3Ch ; '<'; char
  0040804A: push    eax; DName *
  0040804B: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00408050: add     esp, 10h
  00408053: push    eax; DName *
  00408054: lea     ecx, [ebp+var_10]; this
  00408057: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040805C: lea     ecx, [ebp+var_10]; this
  0040805F: call    ?getLastChar@DName@@QBEDXZ; DName::getLastChar(void)
  00408064: cmp     al, 3Eh ; '>'
  00408066: jnz     short loc_408072
  00408068: push    20h ; ' '
  0040806A: lea     ecx, [ebp+var_10]
  0040806D: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  00408072: push    3Eh ; '>'
  00408074: lea     ecx, [ebp+var_10]
  00408077: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  0040807C: mov     eax, [ebp+arg_8]
  0040807F: cmp     eax, ebx
  00408081: jz      short loc_408086
  00408083: mov     byte ptr [eax], 1
  00408086: mov     eax, ds:41E06Ch
  0040808B: cmp     [eax], bl
  0040808D: jnz     short loc_408097
  0040808F: lea     eax, [ebp+var_10]
  00408092: jmp     loc_4083FD
  00408097: inc     eax
  00408098: mov     ds:41E06Ch, eax
  0040809D: mov     esi, eax
  0040809F: lea     eax, [ebp+var_38]
  004080A2: push    ebx
  004080A3: push    eax
  004080A4: call    ?getZName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getZName(bool)
  004080A9: pop     ecx
  004080AA: pop     ecx
  004080AB: push    eax
  004080AC: lea     ecx, [ebp+var_8]
  004080AF: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004080B4: lea     ecx, [ebp+var_8]; this
  004080B7: mov     ds:41E06Ch, esi
  004080BD: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004080C2: test    eax, eax
  004080C4: jnz     short loc_4080E7
  004080C6: cmp     byte ptr [esi-1], 31h ; '1'
  004080CA: jnz     short loc_4080E7
  004080CC: lea     eax, [ebp+var_8]
  004080CF: push    eax; DName *
  004080D0: lea     eax, [ebp+var_68]
  004080D3: push    7Eh ; '~'; char
  004080D5: push    eax; DName *
  004080D6: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  004080DB: add     esp, 0Ch
  004080DE: push    eax
  004080DF: lea     ecx, [ebp+var_8]
  004080E2: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004080E7: lea     ecx, [ebp+var_10]; this
  004080EA: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004080EF: test    eax, eax
  004080F1: jnz     loc_4083FA
  004080F7: lea     eax, [ebp+var_10]
  004080FA: push    eax; DName *
  004080FB: lea     ecx, [ebp+var_8]; this
  004080FE: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408103: jmp     loc_4083FA
  00408108: dec     eax
  00408109: mov     ds:41E06Ch, eax
  0040810E: push    2
  00408110: jmp     loc_408277
  00408115: cmp     edx, 42h ; 'B'
  00408118: jz      loc_408461
  0040811E: jle     loc_408275
  00408124: cmp     edx, 5Ah ; 'Z'
  00408127: jle     loc_408464
  0040812D: cmp     edx, 5Fh ; '_'
  00408130: jnz     loc_408275
  00408136: movsx   ecx, byte ptr [eax]
  00408139: inc     eax
  0040813A: cmp     ecx, 50h ; 'P'
  0040813D: mov     ds:41E06Ch, eax
  00408142: jg      loc_40824A
  00408148: jz      loc_4081F6
  0040814E: cmp     ecx, 3Fh ; '?'
  00408151: jg      short loc_4081B2
  00408153: jz      short loc_408190
  00408155: cmp     ecx, ebx
  00408157: jz      short loc_408108
  00408159: cmp     ecx, 2Fh ; '/'
  0040815C: jle     loc_408275
  00408162: cmp     ecx, 36h ; '6'
  00408165: jle     short loc_408180
  00408167: cmp     ecx, 39h ; '9'
  0040816A: jg      loc_408275
  00408170: movsx   eax, byte ptr [eax-1]
  00408174: push    dword ptr ds:411148h[eax*4]
  0040817B: jmp     loc_408457
  00408180: movsx   eax, byte ptr [eax-1]
  00408184: push    dword ptr ds:411148h[eax*4]
  0040818B: jmp     loc_4083C8
  00408190: movsx   ecx, byte ptr [eax]
  00408193: inc     eax
  00408194: cmp     ecx, ebx
  00408196: mov     ds:41E06Ch, eax
  0040819B: jz      loc_408108
  004081A1: cmp     ecx, 30h ; '0'
  004081A4: jnz     loc_408275
  004081AA: push    ebx
  004081AB: push    411868h
  004081B0: jmp     short loc_4081DE
  004081B2: cmp     ecx, 41h ; 'A'
  004081B5: jl      loc_408275
  004081BB: cmp     ecx, 42h ; 'B'
  004081BE: jle     loc_40844C
  004081C4: cmp     ecx, 43h ; 'C'
  004081C7: jz      short loc_4081D7
  004081C9: jle     loc_408275
  004081CF: cmp     ecx, 4Fh ; 'O'
  004081D2: jmp     loc_40826F
  004081D7: push    1
  004081D9: push    41160Ch
  004081DE: lea     eax, [ebp+var_18]
  004081E1: push    eax
  004081E2: call    ?getStringEncoding@UnDecorator@@CA?AVDName@@PADH@Z; UnDecorator::getStringEncoding(char *,int)
  004081E7: add     esp, 0Ch
  004081EA: or      [ebp+var_13], 1
  004081EE: lea     eax, [ebp+var_18]
  004081F1: jmp     loc_4083FD
  004081F6: movsx   eax, byte ptr [eax-1]
  004081FA: push    dword ptr ds:41112Ch[eax*4]; char *
  00408201: lea     ecx, [ebp+var_8]; this
  00408204: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00408209: push    ebx
  0040820A: lea     eax, [ebp+var_48]
  0040820D: push    ebx
  0040820E: push    eax
  0040820F: call    ?getOperatorName@UnDecorator@@CA?AVDName@@_NPA_N@Z; UnDecorator::getOperatorName(bool,bool *)
  00408214: add     esp, 0Ch
  00408217: push    eax
  00408218: lea     ecx, [ebp+var_10]
  0040821B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408220: lea     ecx, [ebp+var_10]; this
  00408223: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408228: test    eax, eax
  0040822A: jnz     short loc_40823B
  0040822C: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408231: test    eax, eax
  00408233: jnz     short loc_40823B
  00408235: test    byte ptr [ebp+var_C], 40h
  00408239: jnz     short loc_408275
  0040823B: lea     eax, [ebp+var_10]
  0040823E: push    eax
  0040823F: push    [ebp+arg_0]
  00408242: lea     ecx, [ebp+var_8]
  00408245: jmp     loc_4083B6
  0040824A: cmp     ecx, 56h ; 'V'
  0040824D: jg      loc_40840D
  00408253: cmp     ecx, 55h ; 'U'
  00408256: jge     loc_4083BD
  0040825C: cmp     ecx, 51h ; 'Q'
  0040825F: jz      loc_4083D0
  00408265: cmp     ecx, 52h ; 'R'
  00408268: jz      short loc_408284
  0040826A: jle     short loc_408275
  0040826C: cmp     ecx, 54h ; 'T'
  0040826F: jle     loc_40844C
  00408275: push    1
  00408277: mov     ecx, [ebp+arg_0]
  0040827A: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040827F: jmp     loc_408406
  00408284: movsx   eax, byte ptr [eax-1]
  00408288: push    dword ptr ds:41112Ch[eax*4]; char *
  0040828F: lea     ecx, [ebp+var_8]; this
  00408292: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00408297: mov     eax, ds:41E06Ch
  0040829C: movsx   eax, byte ptr [eax]
  0040829F: push    dword ptr ds:4111E8h[eax*4]; char *
  004082A6: lea     ecx, [ebp+var_10]; this
  004082A9: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  004082AE: mov     eax, ds:41E06Ch
  004082B3: movsx   eax, byte ptr [eax]
  004082B6: inc     dword ptr ds:41E06Ch
  004082BC: cmp     eax, 30h ; '0'
  004082BF: jz      loc_408384
  004082C5: cmp     eax, 31h ; '1'
  004082C8: jz      short loc_4082E0
  004082CA: jle     short loc_4082D5
  004082CC: cmp     eax, 34h ; '4'
  004082CF: jle     loc_40823B
  004082D5: dec     dword ptr ds:41E06Ch
  004082DB: jmp     loc_40810E
  004082E0: lea     eax, [ebp+var_10]
  004082E3: push    eax; DName *
  004082E4: lea     eax, [ebp+var_18]
  004082E7: push    eax; DName *
  004082E8: lea     ecx, [ebp+var_8]; struct DName *
  004082EB: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004082F0: push    2Ch ; ','; int
  004082F2: lea     eax, [ebp+var_28]
  004082F5: push    eax; DName *
  004082F6: lea     eax, [ebp+var_58]
  004082F9: push    eax
  004082FA: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  004082FF: pop     ecx
  00408300: mov     ecx, eax; struct DName *
  00408302: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408307: push    eax; DName *
  00408308: lea     ecx, [ebp+var_18]; this
  0040830B: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408310: push    2Ch ; ','; int
  00408312: lea     eax, [ebp+var_78]
  00408315: push    eax; DName *
  00408316: lea     eax, [ebp+var_30]
  00408319: push    eax
  0040831A: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  0040831F: pop     ecx
  00408320: mov     ecx, eax; struct DName *
  00408322: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408327: push    eax; DName *
  00408328: lea     ecx, [ebp+var_18]; this
  0040832B: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408330: push    2Ch ; ','; int
  00408332: lea     eax, [ebp+var_40]
  00408335: push    eax; DName *
  00408336: lea     eax, [ebp+var_50]
  00408339: push    eax
  0040833A: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  0040833F: pop     ecx
  00408340: mov     ecx, eax; struct DName *
  00408342: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408347: push    eax; DName *
  00408348: lea     ecx, [ebp+var_18]; this
  0040834B: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408350: push    29h ; ')'; int
  00408352: lea     eax, [ebp+var_60]
  00408355: push    eax; DName *
  00408356: lea     eax, [ebp+var_70]
  00408359: push    ebx
  0040835A: push    eax
  0040835B: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00408360: pop     ecx
  00408361: pop     ecx
  00408362: mov     ecx, eax; struct DName *
  00408364: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408369: push    eax; DName *
  0040836A: lea     ecx, [ebp+var_18]; this
  0040836D: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408372: push    27h ; '''; int
  00408374: push    [ebp+arg_0]; DName *
  00408377: lea     ecx, [ebp+var_18]; struct DName *
  0040837A: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040837F: jmp     loc_408406
  00408384: lea     eax, [ebp+var_18]
  00408387: push    ebx
  00408388: push    eax
  00408389: call    ?getDataType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getDataType(DName *)
  0040838E: pop     ecx
  0040838F: pop     ecx
  00408390: lea     eax, [ebp+var_10]
  00408393: push    eax; DName *
  00408394: push    [ebp+arg_0]; DName *
  00408397: lea     eax, [ebp+var_8]
  0040839A: push    eax; DName *
  0040839B: lea     eax, [ebp+var_80]
  0040839E: push    eax; DName *
  0040839F: push    20h ; ' '; int
  004083A1: lea     eax, [ebp+var_20]
  004083A4: push    eax; DName *
  004083A5: lea     ecx, [ebp+var_18]; struct DName *
  004083A8: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  004083AD: mov     ecx, eax; struct DName *
  004083AF: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004083B4: mov     ecx, eax; struct DName *
  004083B6: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004083BB: jmp     short loc_408406
  004083BD: movsx   eax, byte ptr [eax-1]
  004083C1: push    dword ptr ds:41112Ch[eax*4]; char *
  004083C8: lea     ecx, [ebp+var_8]; this
  004083CB: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  004083D0: lea     ecx, [ebp+var_8]; this
  004083D3: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004083D8: test    eax, eax
  004083DA: jnz     short loc_4083FA
  004083DC: lea     eax, [ebp+var_8]
  004083DF: push    eax; DName *
  004083E0: lea     eax, [ebp+var_20]
  004083E3: push    4116D8h; char *
  004083E8: push    eax; DName *
  004083E9: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  004083EE: add     esp, 0Ch
  004083F1: push    eax
  004083F2: lea     ecx, [ebp+var_8]
  004083F5: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004083FA: lea     eax, [ebp+var_8]
  004083FD: mov     ecx, [ebp+arg_0]; this
  00408400: push    eax; struct DName *
  00408401: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00408406: mov     eax, [ebp+arg_0]
  00408409: pop     esi
  0040840A: pop     ebx
  0040840B: leave
  0040840C: retn
  0040840D: cmp     ecx, 58h ; 'X'
  00408410: jl      loc_408275
  00408416: cmp     ecx, 59h ; 'Y'
  00408419: jle     short loc_40844C
  0040841B: cmp     ecx, 5Fh ; '_'
  0040841E: jnz     loc_408275
  00408424: movsx   ecx, byte ptr [eax]
  00408427: inc     eax
  00408428: cmp     ecx, 41h ; 'A'
  0040842B: mov     ds:41E06Ch, eax
  00408430: jl      loc_408275
  00408436: cmp     ecx, 44h ; 'D'
  00408439: jg      loc_408275
  0040843F: movsx   eax, byte ptr [eax-1]
  00408443: push    dword ptr ds:411190h[eax*4]
  0040844A: jmp     short loc_408457
  0040844C: movsx   eax, byte ptr [eax-1]
  00408450: push    dword ptr ds:41112Ch[eax*4]; char *
  00408457: mov     ecx, [ebp+arg_0]; this
  0040845A: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  0040845F: jmp     short loc_408406
  00408461: xor     esi, esi
  00408463: inc     esi
  00408464: movsx   eax, byte ptr [eax-1]
  00408468: push    dword ptr ds:41109Ch[eax*4]; char *
  0040846F: lea     ecx, [ebp+var_8]; this
  00408472: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00408477: cmp     esi, ebx
  00408479: jz      loc_4083D0
  0040847F: lea     ecx, [ebp+var_8]; this
  00408482: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408487: test    eax, eax
  00408489: jnz     loc_4083FA
  0040848F: or      [ebp+var_4], 20h
  00408493: jmp     loc_4083FA

Function: ?getTemplateName@UnDecorator@@CA?AVDName@@_N@Z
  00408498: push    ebp
  00408499: lea     ebp, [esp-70h]
  0040849D: sub     esp, 0D0h
  004084A3: mov     eax, ds:41E06Ch
  004084A8: cmp     byte ptr [eax], 3Fh ; '?'
  004084AB: jnz     loc_4085D8
  004084B1: cmp     byte ptr [eax+1], 24h ; '$'
  004084B5: jnz     loc_4085D8
  004084BB: push    ebx
  004084BC: mov     ebx, ds:41E068h
  004084C2: push    esi
  004084C3: mov     esi, ds:41E060h
  004084C9: inc     eax
  004084CA: inc     eax
  004084CB: push    edi
  004084CC: mov     edi, ds:41E064h
  004084D2: lea     ecx, [ebp+70h+var_94]; this
  004084D5: mov     ds:41E06Ch, eax
  004084DA: call    ??0Replicator@@QAE@XZ; Replicator::Replicator(void)
  004084DF: lea     ecx, [ebp+70h+var_58]; this
  004084E2: call    ??0Replicator@@QAE@XZ; Replicator::Replicator(void)
  004084E7: lea     ecx, [ebp+70h+var_D0]; this
  004084EA: call    ??0Replicator@@QAE@XZ; Replicator::Replicator(void)
  004084EF: and     [ebp+70h+var_C], 0
  004084F3: and     [ebp+70h+var_8], 0FE00h
  004084F9: lea     eax, [ebp+70h+var_94]
  004084FC: mov     ds:41E060h, eax
  00408501: lea     eax, [ebp+70h+var_58]
  00408504: mov     ds:41E064h, eax
  00408509: lea     eax, [ebp+70h+var_D0]
  0040850C: mov     ds:41E068h, eax
  00408511: mov     eax, ds:41E06Ch
  00408516: cmp     byte ptr [eax], 3Fh ; '?'
  00408519: mov     [ebp+70h+var_1], 0
  0040851D: jnz     short loc_408539
  0040851F: inc     dword ptr ds:41E06Ch
  00408525: lea     eax, [ebp+70h+var_1]
  00408528: push    eax
  00408529: lea     eax, [ebp+70h+var_14]
  0040852C: push    1
  0040852E: push    eax
  0040852F: call    ?getOperatorName@UnDecorator@@CA?AVDName@@_NPA_N@Z; UnDecorator::getOperatorName(bool,bool *)
  00408534: add     esp, 0Ch
  00408537: jmp     short loc_408546
  00408539: lea     eax, [ebp+70h+var_14]
  0040853C: push    1
  0040853E: push    eax
  0040853F: call    ?getZName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getZName(bool)
  00408544: pop     ecx
  00408545: pop     ecx
  00408546: lea     ecx, [ebp+70h+var_C]
  00408549: push    eax
  0040854A: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040854F: lea     ecx, [ebp+70h+var_C]; this
  00408552: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408557: test    eax, eax
  00408559: jz      short loc_408562
  0040855B: mov     byte ptr ds:41E084h, 1
  00408562: cmp     [ebp+70h+var_1], 0
  00408566: jnz     short loc_4085B5
  00408568: lea     eax, [ebp+70h+var_14]
  0040856B: push    eax
  0040856C: call    ?getTemplateArgumentList@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getTemplateArgumentList(void)
  00408571: push    eax; DName *
  00408572: lea     eax, [ebp+70h+var_1C]
  00408575: push    3Ch ; '<'; char
  00408577: push    eax; DName *
  00408578: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040857D: add     esp, 10h
  00408580: push    eax; DName *
  00408581: lea     ecx, [ebp+70h+var_C]; this
  00408584: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408589: lea     ecx, [ebp+70h+var_C]; this
  0040858C: call    ?getLastChar@DName@@QBEDXZ; DName::getLastChar(void)
  00408591: cmp     al, 3Eh ; '>'
  00408593: jnz     short loc_40859F
  00408595: push    20h ; ' '
  00408597: lea     ecx, [ebp+70h+var_C]
  0040859A: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  0040859F: push    3Eh ; '>'
  004085A1: lea     ecx, [ebp+70h+var_C]
  004085A4: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  004085A9: cmp     [ebp+70h+arg_4], 0
  004085AD: jz      short loc_4085B5
  004085AF: inc     dword ptr ds:41E06Ch
  004085B5: mov     ecx, [ebp+70h+arg_0]; this
  004085B8: lea     eax, [ebp+70h+var_C]
  004085BB: push    eax; struct DName *
  004085BC: mov     ds:41E060h, esi
  004085C2: mov     ds:41E064h, edi
  004085C8: mov     ds:41E068h, ebx
  004085CE: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004085D3: pop     edi
  004085D4: pop     esi
  004085D5: pop     ebx
  004085D6: jmp     short loc_4085E2
  004085D8: mov     ecx, [ebp+70h+arg_0]
  004085DB: push    1
  004085DD: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004085E2: mov     eax, [ebp+70h+arg_0]
  004085E5: add     ebp, 70h ; 'p'
  004085E8: leave
  004085E9: retn

Function: ?getZName@UnDecorator@@CA?AVDName@@_N@Z
  004085EA: push    ebp
  004085EB: mov     ebp, esp
  004085ED: sub     esp, 34h
  004085F0: mov     eax, ds:413390h
  004085F5: mov     [ebp+StackCookie], eax
  004085F8: mov     eax, ds:41E06Ch
  004085FD: mov     dl, [eax]
  004085FF: movsx   ecx, dl
  00408602: sub     ecx, 30h ; '0'
  00408605: js      short loc_408623
  00408607: cmp     ecx, 9
  0040860A: jg      short loc_408623
  0040860C: inc     eax
  0040860D: push    ecx
  0040860E: mov     ecx, ds:41E064h
  00408614: mov     ds:41E06Ch, eax
  00408619: call    ??AReplicator@@QBEABVDName@@H@Z; Replicator::operator[](int)
  0040861E: jmp     loc_4087AF
  00408623: and     [ebp+var_1C], 0
  00408627: and     [ebp+var_18], 0FE00h
  0040862D: cmp     dl, 3Fh ; '?'
  00408630: jnz     short loc_40867A
  00408632: lea     eax, [ebp+var_24]
  00408635: push    0
  00408637: push    eax
  00408638: call    ?getTemplateName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getTemplateName(bool)
  0040863D: pop     ecx
  0040863E: pop     ecx
  0040863F: push    eax
  00408640: lea     ecx, [ebp+var_1C]
  00408643: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408648: mov     eax, ds:41E06Ch
  0040864D: mov     cl, [eax]
  0040864F: inc     eax
  00408650: cmp     cl, 40h ; '@'
  00408653: mov     ds:41E06Ch, eax
  00408658: jz      loc_408792
  0040865E: dec     eax
  0040865F: xor     ecx, ecx
  00408661: mov     ds:41E06Ch, eax
  00408666: cmp     [eax], cl
  00408668: setz    cl
  0040866B: inc     ecx
  0040866C: push    ecx
  0040866D: lea     ecx, [ebp+var_1C]
  00408670: call    ??4DName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator=(DNameStatus)
  00408675: jmp     loc_408792
  0040867A: push    ebx
  0040867B: push    esi
  0040867C: push    edi
  0040867D: mov     ecx, 411894h
  00408682: push    12h
  00408684: mov     edi, ecx
  00408686: mov     esi, eax
  00408688: pop     ebx
  00408689: mov     dl, [esi]
  0040868B: test    dl, dl
  0040868D: jz      short loc_408698
  0040868F: cmp     dl, [edi]
  00408691: jnz     short loc_408698
  00408693: inc     esi
  00408694: inc     edi
  00408695: dec     ebx
  00408696: jnz     short loc_408689
  00408698: movzx   edx, byte ptr [esi]
  0040869B: movzx   esi, byte ptr [edi]
  0040869E: sub     edx, esi
  004086A0: mov     [ebp+var_20], edx
  004086A3: jnz     short loc_4086AA
  004086A5: add     eax, 13h
  004086A8: jmp     short loc_4086D9
  004086AA: mov     ecx, 411884h
  004086AF: push    0Ch
  004086B1: mov     edi, ecx
  004086B3: mov     esi, eax
  004086B5: pop     ebx
  004086B6: mov     dl, [esi]
  004086B8: test    dl, dl
  004086BA: jz      short loc_4086C5
  004086BC: cmp     dl, [edi]
  004086BE: jnz     short loc_4086C5
  004086C0: inc     esi
  004086C1: inc     edi
  004086C2: dec     ebx
  004086C3: jnz     short loc_4086B6
  004086C5: movzx   edx, byte ptr [edi]
  004086C8: movzx   esi, byte ptr [esi]
  004086CB: sub     esi, edx
  004086CD: mov     [ebp+var_20], esi
  004086D0: jnz     loc_408777
  004086D6: add     eax, 0Dh
  004086D9: mov     ds:41E06Ch, eax
  004086DE: lea     eax, [ebp+var_24]
  004086E1: push    eax
  004086E2: mov     esi, ecx
  004086E4: call    ?getSignedDimension@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSignedDimension(void)
  004086E9: test    byte ptr ds:41E07Dh, 40h
  004086F0: pop     ecx
  004086F1: jz      short loc_408758
  004086F3: push    10h; int
  004086F5: lea     eax, [ebp+String]
  004086F8: push    eax; char *
  004086F9: lea     ecx, [ebp+var_24]; this
  004086FC: call    ?getString@DName@@QBEPADPADH@Z; DName::getString(char *,int)
  00408701: lea     eax, [ebp+String]
  00408704: push    eax; String
  00408705: call    _atol
  0040870A: push    eax
  0040870B: call    dword ptr ds:41E080h
  00408711: test    eax, eax
  00408713: pop     ecx
  00408714: pop     ecx
  00408715: lea     ecx, [ebp+var_1C]; this
  00408718: jz      short loc_408722
  0040871A: push    eax; char *
  0040871B: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00408720: jmp     short loc_40878F
  00408722: push    411880h; char *
  00408727: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040872C: push    41184Ch; char *
  00408731: lea     eax, [ebp+var_34]
  00408734: push    eax; DName *
  00408735: lea     eax, [ebp+var_24]
  00408738: push    eax; DName *
  00408739: lea     eax, [ebp+var_2C]
  0040873C: push    esi; char *
  0040873D: push    eax; DName *
  0040873E: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00408743: add     esp, 0Ch
  00408746: mov     ecx, eax; struct DName *
  00408748: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  0040874D: push    eax; DName *
  0040874E: lea     ecx, [ebp+var_1C]; this
  00408751: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408756: jmp     short loc_40878F
  00408758: push    411880h; char *
  0040875D: lea     ecx, [ebp+var_1C]; this
  00408760: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00408765: push    41184Ch
  0040876A: lea     eax, [ebp+var_2C]
  0040876D: push    eax
  0040876E: lea     eax, [ebp+var_24]
  00408771: push    eax
  00408772: lea     eax, [ebp+var_34]
  00408775: jmp     short loc_40873C
  00408777: push    40h ; '@'; char
  00408779: push    41E06Ch; char **
  0040877E: lea     ecx, [ebp+var_2C]; this
  00408781: call    ??0DName@@QAE@AAPBDD@Z; DName::DName(char const * &,char)
  00408786: push    eax
  00408787: lea     ecx, [ebp+var_1C]
  0040878A: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040878F: pop     edi
  00408790: pop     esi
  00408791: pop     ebx
  00408792: cmp     [ebp+arg_4], 0
  00408796: jz      short loc_4087AC
  00408798: mov     ecx, ds:41E064h
  0040879E: cmp     dword ptr [ecx], 9
  004087A1: jz      short loc_4087AC
  004087A3: lea     eax, [ebp+var_1C]
  004087A6: push    eax; struct DName *
  004087A7: call    ??YReplicator@@QAEAAV0@ABVDName@@@Z; Replicator::operator+=(DName const &)
  004087AC: lea     eax, [ebp+var_1C]
  004087AF: mov     ecx, [ebp+arg_0]; this
  004087B2: push    eax; struct DName *
  004087B3: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004087B8: mov     ecx, [ebp+StackCookie]; StackCookie
  004087BB: mov     eax, [ebp+arg_0]
  004087BE: call    @__security_check_cookie@4; __security_check_cookie(x)
  004087C3: leave
  004087C4: retn

Function: ?getScopedName@UnDecorator@@CA?AVDName@@XZ
  004087C5: push    ebp
  004087C6: mov     ebp, esp
  004087C8: sub     esp, 20h
  004087CB: and     [ebp+var_8], 0
  004087CF: and     word ptr [ebp+var_4], 0FE00h
  004087D5: push    esi
  004087D6: lea     eax, [ebp+var_10]
  004087D9: push    1
  004087DB: push    eax
  004087DC: call    ?getZName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getZName(bool)
  004087E1: pop     ecx
  004087E2: pop     ecx
  004087E3: push    eax
  004087E4: lea     ecx, [ebp+var_8]
  004087E7: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004087EC: mov     eax, [ebp+var_4]
  004087EF: test    al, 0Fh
  004087F1: mov     esi, 4118A8h
  004087F6: jnz     short loc_40883A
  004087F8: mov     ecx, ds:41E06Ch
  004087FE: mov     cl, [ecx]
  00408800: test    cl, cl
  00408802: jz      short loc_40883A
  00408804: cmp     cl, 40h ; '@'
  00408807: jz      short loc_408847
  00408809: lea     eax, [ebp+var_8]
  0040880C: push    eax; DName *
  0040880D: lea     eax, [ebp+var_10]
  00408810: push    eax; DName *
  00408811: push    esi; char *
  00408812: lea     eax, [ebp+var_18]
  00408815: push    eax; DName *
  00408816: lea     eax, [ebp+var_20]
  00408819: push    eax
  0040881A: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  0040881F: pop     ecx
  00408820: mov     ecx, eax; struct DName *
  00408822: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00408827: mov     ecx, eax; struct DName *
  00408829: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  0040882E: push    eax
  0040882F: lea     ecx, [ebp+var_8]
  00408832: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408837: mov     eax, [ebp+var_4]
  0040883A: mov     ecx, ds:41E06Ch
  00408840: mov     cl, [ecx]
  00408842: cmp     cl, 40h ; '@'
  00408845: jnz     short loc_40884F
  00408847: inc     dword ptr ds:41E06Ch
  0040884D: jmp     short loc_4088AF
  0040884F: test    cl, cl
  00408851: jz      short loc_40886C
  00408853: and     [ebp+var_8], 0
  00408857: mov     ecx, eax
  00408859: and     ecx, 0Fh
  0040885C: cmp     cl, 3
  0040885F: jz      short loc_4088AF
  00408861: and     eax, 0FFFFFFF1h
  00408864: or      eax, 1
  00408867: mov     [ebp+var_4], eax
  0040886A: jmp     short loc_4088AF
  0040886C: lea     ecx, [ebp+var_8]; this
  0040886F: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408874: test    eax, eax
  00408876: jz      short loc_408881
  00408878: push    2
  0040887A: call    ??4DName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator=(DNameStatus)
  0040887F: jmp     short loc_4088AF
  00408881: lea     eax, [ebp+var_8]
  00408884: push    eax; DName *
  00408885: lea     eax, [ebp+var_20]
  00408888: push    eax; DName *
  00408889: push    esi; char *
  0040888A: lea     eax, [ebp+var_18]
  0040888D: push    eax; DName *
  0040888E: push    2
  00408890: lea     ecx, [ebp+var_10]
  00408893: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00408898: mov     ecx, eax; struct DName *
  0040889A: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  0040889F: mov     ecx, eax; struct DName *
  004088A1: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004088A6: push    eax
  004088A7: lea     ecx, [ebp+var_8]
  004088AA: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004088AF: mov     ecx, [ebp+arg_0]; this
  004088B2: lea     eax, [ebp+var_8]
  004088B5: push    eax; struct DName *
  004088B6: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004088BB: mov     eax, [ebp+arg_0]
  004088BE: pop     esi
  004088BF: leave
  004088C0: retn

Function: ?getECSUDataType@UnDecorator@@CA?AVDName@@XZ
  004088C1: push    ebp
  004088C2: mov     ebp, esp
  004088C4: sub     esp, 18h
  004088C7: mov     eax, ds:41E07Ch
  004088CC: push    ebx
  004088CD: mov     ecx, eax
  004088CF: shr     ecx, 0Fh
  004088D2: xor     ebx, ebx
  004088D4: not     ecx
  004088D6: inc     ebx
  004088D7: and     ecx, ebx
  004088D9: push    esi
  004088DA: jz      short loc_4088E1
  004088DC: test    ah, 10h
  004088DF: jz      short loc_4088E3
  004088E1: xor     ebx, ebx
  004088E3: mov     eax, ds:41E06Ch
  004088E8: movsx   eax, byte ptr [eax]
  004088EB: and     [ebp+var_8], 0
  004088EF: mov     esi, 0FFFFFE00h
  004088F4: and     [ebp+var_4], esi
  004088F7: inc     dword ptr ds:41E06Ch
  004088FD: sub     eax, 0
  00408900: jz      loc_4089A6
  00408906: sub     eax, 54h ; 'T'
  00408909: jz      short loc_40895E
  0040890B: dec     eax
  0040890C: jz      short loc_408957
  0040890E: dec     eax
  0040890F: jz      short loc_408950
  00408911: dec     eax
  00408912: jz      short loc_408928
  00408914: dec     eax
  00408915: jz      short loc_408921
  00408917: dec     eax
  00408918: jnz     short loc_40896B
  0040891A: push    4118E8h
  0040891F: jmp     short loc_408963
  00408921: push    4118DCh
  00408926: jmp     short loc_408963
  00408928: lea     eax, [ebp+var_10]
  0040892B: push    eax
  0040892C: mov     ebx, ecx
  0040892E: call    ?getEnumType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getEnumType(void)
  00408933: push    eax; DName *
  00408934: lea     eax, [ebp+var_18]
  00408937: push    4118D4h; char *
  0040893C: push    eax; DName *
  0040893D: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00408942: add     esp, 10h
  00408945: push    eax
  00408946: lea     ecx, [ebp+var_8]
  00408949: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040894E: jmp     short loc_40896B
  00408950: push    4118CCh
  00408955: jmp     short loc_408963
  00408957: push    4118C4h
  0040895C: jmp     short loc_408963
  0040895E: push    4118BCh; char *
  00408963: lea     ecx, [ebp+var_8]; this
  00408966: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040896B: and     [ebp+var_10], 0
  0040896F: and     [ebp+var_C], esi
  00408972: test    ebx, ebx
  00408974: jz      short loc_408982
  00408976: lea     eax, [ebp+var_8]
  00408979: push    eax
  0040897A: lea     ecx, [ebp+var_10]
  0040897D: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408982: lea     eax, [ebp+var_8]
  00408985: push    eax
  00408986: call    ?getScopedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScopedName(void)
  0040898B: pop     ecx
  0040898C: lea     eax, [ebp+var_8]
  0040898F: push    eax; DName *
  00408990: lea     ecx, [ebp+var_10]; this
  00408993: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408998: mov     ecx, [ebp+arg_0]; this
  0040899B: lea     eax, [ebp+var_10]
  0040899E: push    eax; struct DName *
  0040899F: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004089A4: jmp     short loc_4089B9
  004089A6: mov     ecx, [ebp+arg_0]; this
  004089A9: dec     dword ptr ds:41E06Ch
  004089AF: push    4118AEh; char *
  004089B4: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  004089B9: mov     eax, [ebp+arg_0]
  004089BC: pop     esi
  004089BD: pop     ebx
  004089BE: leave
  004089BF: retn

Function: ?getSymbolName@UnDecorator@@CA?AVDName@@XZ
  004089C0: push    ebp
  004089C1: mov     ebp, esp
  004089C3: mov     eax, ds:41E06Ch
  004089C8: cmp     byte ptr [eax], 3Fh ; '?'
  004089CB: jnz     short loc_4089F5
  004089CD: inc     eax
  004089CE: cmp     byte ptr [eax], 24h ; '$'
  004089D1: jnz     short loc_4089DF
  004089D3: push    1
  004089D5: push    [ebp+arg_0]
  004089D8: call    ?getTemplateName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getTemplateName(bool)
  004089DD: jmp     short loc_4089FF
  004089DF: push    0
  004089E1: push    0
  004089E3: push    [ebp+arg_0]
  004089E6: mov     ds:41E06Ch, eax
  004089EB: call    ?getOperatorName@UnDecorator@@CA?AVDName@@_NPA_N@Z; UnDecorator::getOperatorName(bool,bool *)
  004089F0: add     esp, 0Ch
  004089F3: jmp     short loc_408A01
  004089F5: push    1
  004089F7: push    [ebp+arg_0]
  004089FA: call    ?getZName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getZName(bool)
  004089FF: pop     ecx
  00408A00: pop     ecx
  00408A01: mov     eax, [ebp+arg_0]
  00408A04: pop     ebp
  00408A05: retn

Function: ?getBasedType@UnDecorator@@CA?AVDName@@XZ
  00408A06: push    ebp
  00408A07: mov     ebp, esp
  00408A09: sub     esp, 10h
  00408A0C: push    0
  00408A0E: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00408A13: add     esp, 4
  00408A16: push    eax; char *
  00408A17: lea     ecx, [ebp+var_8]; this
  00408A1A: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  00408A1F: mov     eax, ds:41E06Ch
  00408A24: cmp     byte ptr [eax], 0
  00408A27: jz      short loc_408A70
  00408A29: movsx   ecx, byte ptr [eax]
  00408A2C: inc     eax
  00408A2D: sub     ecx, 30h ; '0'
  00408A30: mov     ds:41E06Ch, eax
  00408A35: jz      short loc_408A61
  00408A37: dec     ecx
  00408A38: dec     ecx
  00408A39: jz      short loc_408A4C
  00408A3B: sub     ecx, 3
  00408A3E: jnz     short loc_408A7A
  00408A40: mov     ecx, [ebp+arg_0]
  00408A43: push    1
  00408A45: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00408A4A: jmp     short loc_408A93
  00408A4C: lea     eax, [ebp+var_10]
  00408A4F: push    eax
  00408A50: call    ?getScopedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScopedName(void)
  00408A55: pop     ecx
  00408A56: push    eax; DName *
  00408A57: lea     ecx, [ebp+var_8]; this
  00408A5A: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408A5F: jmp     short loc_408A7A
  00408A61: push    411814h; char *
  00408A66: lea     ecx, [ebp+var_8]
  00408A69: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  00408A6E: jmp     short loc_408A7A
  00408A70: push    2
  00408A72: lea     ecx, [ebp+var_8]
  00408A75: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  00408A7A: push    4118F8h; char *
  00408A7F: lea     ecx, [ebp+var_8]
  00408A82: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  00408A87: mov     ecx, [ebp+arg_0]; this
  00408A8A: lea     eax, [ebp+var_8]
  00408A8D: push    eax; struct DName *
  00408A8E: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00408A93: mov     eax, [ebp+arg_0]
  00408A96: leave
  00408A97: retn

Function: ?composeDeclaration@UnDecorator@@CA?AVDName@@ABV2@@Z
  00408A98: push    ebp
  00408A99: mov     ebp, esp
  00408A9B: sub     esp, 40h
  00408A9E: and     [ebp+var_20], 0
  00408AA2: push    esi
  00408AA3: push    edi
  00408AA4: mov     edi, 0FFFFFE00h
  00408AA9: and     [ebp+var_1C], edi
  00408AAC: call    ?getTypeEncoding@UnDecorator@@CAHXZ; UnDecorator::getTypeEncoding(void)
  00408AB1: mov     ecx, [ebp+arg_4]; this
  00408AB4: mov     esi, eax
  00408AB6: call    ?isUDC@DName@@QBEHXZ; DName::isUDC(void)
  00408ABB: cmp     esi, 0FFFFh
  00408AC1: mov     [ebp+var_14], eax
  00408AC4: jnz     short loc_408AD5
  00408AC6: mov     ecx, [ebp+arg_0]
  00408AC9: push    1
  00408ACB: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00408AD0: jmp     loc_4094A5
  00408AD5: cmp     esi, 0FFFEh
  00408ADB: jnz     short loc_408AF2
  00408ADD: push    [ebp+arg_4]; DName *
  00408AE0: push    2; int
  00408AE2: push    [ebp+arg_0]; DName *
  00408AE5: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  00408AEA: add     esp, 0Ch
  00408AED: jmp     loc_4094A5
  00408AF2: cmp     esi, 0FFFDh
  00408AF8: jnz     short loc_408B0A
  00408AFA: push    [ebp+arg_4]; struct DName *
  00408AFD: mov     ecx, [ebp+arg_0]; this
  00408B00: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00408B05: jmp     loc_4094A5
  00408B0A: mov     [ebp+var_4], esi
  00408B0D: and     [ebp+var_4], 8000h
  00408B14: push    ebx
  00408B15: mov     ebx, 800h
  00408B1A: mov     ecx, 1000h
  00408B1F: jz      loc_408FC2
  00408B25: xor     eax, eax
  00408B27: mov     [ebp+var_C], esi
  00408B2A: and     [ebp+var_C], 1800h
  00408B31: cmp     [ebp+var_C], ebx
  00408B34: setz    al
  00408B37: mov     [ebp+var_8], eax
  00408B3A: cmp     [ebp+var_8], 0
  00408B3E: mov     eax, esi
  00408B40: jz      short loc_408B49
  00408B42: and     eax, 400h
  00408B47: jmp     short loc_408B4B
  00408B49: and     eax, ecx
  00408B4B: test    eax, eax
  00408B4D: jz      short loc_408B5E
  00408B4F: mov     eax, esi
  00408B51: and     eax, 1B00h
  00408B56: cmp     eax, ecx
  00408B58: jz      loc_408FC2
  00408B5E: cmp     [ebp+var_8], 0
  00408B62: mov     eax, esi
  00408B64: jz      short loc_408B6D
  00408B66: and     eax, 400h
  00408B6B: jmp     short loc_408B6F
  00408B6D: and     eax, ecx
  00408B6F: test    eax, eax
  00408B71: jz      short loc_408B90
  00408B73: mov     eax, esi
  00408B75: and     eax, 1B00h
  00408B7A: cmp     eax, 1100h
  00408B7F: jz      loc_408FC2
  00408B85: cmp     eax, 1200h
  00408B8A: jz      loc_408FC2
  00408B90: test    esi, 4000h
  00408B96: jz      short loc_408BE7
  00408B98: mov     eax, ds:41E07Ch
  00408B9D: mov     ecx, eax
  00408B9F: shr     ecx, 1
  00408BA1: not     ecx
  00408BA3: test    cl, 1
  00408BA6: jz      short loc_408BD4
  00408BA8: shr     eax, 3
  00408BAB: not     eax
  00408BAD: test    al, 1
  00408BAF: jz      short loc_408BD4
  00408BB1: lea     eax, [ebp+var_38]
  00408BB4: push    eax
  00408BB5: call    ?getBasedType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getBasedType(void)
  00408BBA: push    eax; DName *
  00408BBB: lea     eax, [ebp+var_30]
  00408BBE: push    20h ; ' '; char
  00408BC0: push    eax; DName *
  00408BC1: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00408BC6: add     esp, 10h
  00408BC9: push    eax
  00408BCA: lea     ecx, [ebp+var_20]
  00408BCD: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408BD2: jmp     short loc_408BE7
  00408BD4: lea     eax, [ebp+var_38]
  00408BD7: push    eax
  00408BD8: call    ?getBasedType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getBasedType(void)
  00408BDD: pop     ecx
  00408BDE: push    eax; DName *
  00408BDF: lea     ecx, [ebp+var_20]
  00408BE2: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00408BE7: cmp     [ebp+var_8], 0
  00408BEB: mov     ebx, 1000h
  00408BF0: mov     eax, esi
  00408BF2: jz      short loc_408BFB
  00408BF4: and     eax, 400h
  00408BF9: jmp     short loc_408BFD
  00408BFB: and     eax, ebx
  00408BFD: xor     ecx, ecx
  00408BFF: cmp     eax, ecx
  00408C01: jz      loc_408CE0
  00408C07: cmp     [ebp+var_C], 1800h
  00408C0E: jnz     loc_408CE0
  00408C14: push    ecx
  00408C15: lea     eax, [ebp+var_38]
  00408C18: push    eax
  00408C19: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00408C1E: pop     ecx
  00408C1F: pop     ecx
  00408C20: mov     ecx, [ebp+arg_4]; struct DName *
  00408C23: push    2Ch ; ','; int
  00408C25: lea     eax, [ebp+var_30]
  00408C28: push    eax; DName *
  00408C29: lea     eax, [ebp+var_38]
  00408C2C: push    eax; DName *
  00408C2D: lea     eax, [ebp+var_28]
  00408C30: push    eax; DName *
  00408C31: push    7Bh ; '{'; int
  00408C33: lea     eax, [ebp+var_18]
  00408C36: push    eax; DName *
  00408C37: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408C3C: mov     ecx, eax; struct DName *
  00408C3E: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00408C43: mov     ecx, eax; struct DName *
  00408C45: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408C4A: push    eax; DName *
  00408C4B: lea     ecx, [ebp+var_20]; this
  00408C4E: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408C53: push    4119E8h; char *
  00408C58: lea     eax, [ebp+var_38]
  00408C5B: push    eax; DName *
  00408C5C: lea     eax, [ebp+var_30]
  00408C5F: push    eax
  00408C60: call    ?getVCallThunkType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getVCallThunkType(void)
  00408C65: pop     ecx
  00408C66: mov     ecx, eax; struct DName *
  00408C68: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00408C6D: push    eax; DName *
  00408C6E: lea     ecx, [ebp+var_20]; this
  00408C71: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408C76: mov     eax, ds:41E07Ch
  00408C7B: mov     ecx, eax
  00408C7D: shr     ecx, 1
  00408C7F: not     ecx
  00408C81: test    cl, 1
  00408C84: jz      short loc_408CC8
  00408C86: shr     eax, 4
  00408C89: not     eax
  00408C8B: test    al, 1
  00408C8D: jz      short loc_408CC8
  00408C8F: lea     eax, [ebp+var_20]
  00408C92: push    eax; DName *
  00408C93: lea     eax, [ebp+var_38]
  00408C96: push    eax; DName *
  00408C97: push    20h ; ' '; int
  00408C99: lea     eax, [ebp+var_30]
  00408C9C: push    eax; DName *
  00408C9D: lea     eax, [ebp+var_28]
  00408CA0: push    eax
  00408CA1: call    ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getCallingConvention(void)
  00408CA6: push    eax; DName *
  00408CA7: lea     eax, [ebp+var_18]
  00408CAA: push    20h ; ' '; char
  00408CAC: push    eax; DName *
  00408CAD: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00408CB2: add     esp, 10h
  00408CB5: mov     ecx, eax; struct DName *
  00408CB7: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408CBC: mov     ecx, eax; struct DName *
  00408CBE: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00408CC3: jmp     loc_409217
  00408CC8: lea     eax, [ebp+var_38]
  00408CCB: push    eax
  00408CCC: call    ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getCallingConvention(void)
  00408CD1: pop     ecx
  00408CD2: push    eax; DName *
  00408CD3: lea     ecx, [ebp+var_20]
  00408CD6: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00408CDB: jmp     loc_409220
  00408CE0: and     [ebp+var_24], edi
  00408CE3: and     [ebp+var_2C], edi
  00408CE6: and     [ebp+var_C], edi
  00408CE9: cmp     [ebp+var_8], ecx
  00408CEC: mov     [ebp+var_28], ecx
  00408CEF: mov     [ebp+var_30], ecx
  00408CF2: mov     [ebp+var_10], ecx
  00408CF5: mov     eax, esi
  00408CF7: jz      short loc_408D00
  00408CF9: and     eax, 400h
  00408CFE: jmp     short loc_408D02
  00408D00: and     eax, ebx
  00408D02: cmp     eax, ecx
  00408D04: jz      short loc_408D4D
  00408D06: cmp     [ebp+var_8], ecx
  00408D09: jz      short loc_408D32
  00408D0B: mov     eax, esi
  00408D0D: and     eax, 700h
  00408D12: cmp     eax, 500h
  00408D17: jnz     short loc_408D32
  00408D19: lea     eax, [ebp+var_38]
  00408D1C: push    1
  00408D1E: push    eax
  00408D1F: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00408D24: pop     ecx
  00408D25: pop     ecx
  00408D26: lea     eax, [ebp+var_38]
  00408D29: push    eax
  00408D2A: lea     ecx, [ebp+var_28]
  00408D2D: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408D32: lea     eax, [ebp+var_38]
  00408D35: push    1
  00408D37: push    eax
  00408D38: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00408D3D: pop     ecx
  00408D3E: pop     ecx
  00408D3F: lea     eax, [ebp+var_38]
  00408D42: push    eax
  00408D43: lea     ecx, [ebp+var_30]
  00408D46: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408D4B: xor     ecx, ecx
  00408D4D: cmp     [ebp+var_8], ecx
  00408D50: jz      short loc_408D90
  00408D52: mov     eax, esi
  00408D54: and     eax, 700h
  00408D59: cmp     eax, 200h
  00408D5E: jz      short loc_408D90
  00408D60: mov     eax, ds:41E07Ch
  00408D65: and     eax, 60h
  00408D68: cmp     al, 60h ; '`'
  00408D6A: lea     eax, [ebp+var_38]
  00408D6D: push    eax
  00408D6E: jz      short loc_408D81
  00408D70: call    ?getThisType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThisType(void)
  00408D75: pop     ecx
  00408D76: push    eax
  00408D77: lea     ecx, [ebp+var_10]
  00408D7A: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408D7F: jmp     short loc_408D90
  00408D81: call    ?getThisType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThisType(void)
  00408D86: pop     ecx
  00408D87: push    eax; DName *
  00408D88: lea     ecx, [ebp+var_10]
  00408D8B: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00408D90: mov     eax, ds:41E07Ch
  00408D95: mov     ecx, eax
  00408D97: shr     ecx, 1
  00408D99: not     ecx
  00408D9B: test    cl, 1
  00408D9E: jz      short loc_408DCD
  00408DA0: shr     eax, 4
  00408DA3: not     eax
  00408DA5: test    al, 1
  00408DA7: jz      short loc_408DCD
  00408DA9: lea     eax, [ebp+var_20]
  00408DAC: push    eax; DName *
  00408DAD: lea     eax, [ebp+var_38]
  00408DB0: push    eax; DName *
  00408DB1: lea     eax, [ebp+var_40]
  00408DB4: push    eax
  00408DB5: call    ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getCallingConvention(void)
  00408DBA: pop     ecx
  00408DBB: mov     ecx, eax; struct DName *
  00408DBD: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00408DC2: push    eax
  00408DC3: lea     ecx, [ebp+var_20]
  00408DC6: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408DCB: jmp     short loc_408DE0
  00408DCD: lea     eax, [ebp+var_40]
  00408DD0: push    eax
  00408DD1: call    ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getCallingConvention(void)
  00408DD6: pop     ecx
  00408DD7: lea     ecx, [ebp+var_20]
  00408DDA: push    eax; DName *
  00408DDB: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00408DE0: mov     ecx, [ebp+arg_4]; this
  00408DE3: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408DE8: test    eax, eax
  00408DEA: jnz     short loc_408E27
  00408DEC: lea     ecx, [ebp+var_20]; this
  00408DEF: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00408DF4: test    eax, eax
  00408DF6: jnz     short loc_408E1C
  00408DF8: test    ds:41E07Ch, ebx
  00408DFE: jnz     short loc_408E1C
  00408E00: push    [ebp+arg_4]; DName *
  00408E03: lea     eax, [ebp+var_40]
  00408E06: push    20h ; ' '; char
  00408E08: push    eax; DName *
  00408E09: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00408E0E: add     esp, 0Ch
  00408E11: push    eax; DName *
  00408E12: lea     ecx, [ebp+var_20]; this
  00408E15: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408E1A: jmp     short loc_408E27
  00408E1C: push    [ebp+arg_4]
  00408E1F: lea     ecx, [ebp+var_20]
  00408E22: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408E27: and     [ebp+var_34], edi
  00408E2A: xor     ebx, ebx
  00408E2C: cmp     [ebp+var_14], ebx
  00408E2F: mov     [ebp+var_38], ebx
  00408E32: push    ebx; int
  00408E33: jz      short loc_408E67
  00408E35: lea     eax, [ebp+var_40]
  00408E38: push    eax
  00408E39: call    ?getReturnType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getReturnType(DName *)
  00408E3E: push    eax; DName *
  00408E3F: lea     eax, [ebp+var_18]
  00408E42: push    4119E4h; char *
  00408E47: push    eax; DName *
  00408E48: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00408E4D: add     esp, 14h
  00408E50: push    eax; DName *
  00408E51: lea     ecx, [ebp+var_20]; this
  00408E54: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408E59: test    byte ptr ds:41E07Dh, 10h
  00408E60: jz      short loc_408E98
  00408E62: jmp     loc_409498
  00408E67: push    8; unsigned int
  00408E69: mov     ecx, 41E04Ch; this
  00408E6E: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00408E73: test    eax, eax
  00408E75: jz      short loc_408E81
  00408E77: and     dword ptr [eax], 0
  00408E7A: and     [eax+4], edi
  00408E7D: mov     ebx, eax
  00408E7F: jmp     short loc_408E83
  00408E81: xor     ebx, ebx
  00408E83: lea     eax, [ebp+var_40]
  00408E86: push    ebx
  00408E87: push    eax
  00408E88: call    ?getReturnType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getReturnType(DName *)
  00408E8D: pop     ecx
  00408E8E: pop     ecx
  00408E8F: push    eax
  00408E90: lea     ecx, [ebp+var_38]
  00408E93: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408E98: mov     edi, [ebp+var_8]
  00408E9B: test    edi, edi
  00408E9D: mov     eax, esi
  00408E9F: jz      short loc_408EA8
  00408EA1: and     eax, 400h
  00408EA6: jmp     short loc_408EAD
  00408EA8: and     eax, 1000h
  00408EAD: test    eax, eax
  00408EAF: jz      short loc_408F17
  00408EB1: test    edi, edi
  00408EB3: jz      short loc_408EF0
  00408EB5: mov     eax, esi
  00408EB7: and     eax, 700h
  00408EBC: cmp     eax, 500h
  00408EC1: jnz     short loc_408EF0
  00408EC3: push    2Ch ; ','; int
  00408EC5: lea     eax, [ebp+var_40]
  00408EC8: push    eax; DName *
  00408EC9: lea     eax, [ebp+var_28]
  00408ECC: push    eax; DName *
  00408ECD: lea     eax, [ebp+var_18]
  00408ED0: push    4119D8h; char *
  00408ED5: push    eax; DName *
  00408ED6: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00408EDB: add     esp, 0Ch
  00408EDE: mov     ecx, eax; struct DName *
  00408EE0: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408EE5: push    eax; DName *
  00408EE6: lea     ecx, [ebp+var_20]; this
  00408EE9: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408EEE: jmp     short loc_408EFD
  00408EF0: push    4119CCh; char *
  00408EF5: lea     ecx, [ebp+var_20]
  00408EF8: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  00408EFD: push    4119E8h; char *
  00408F02: lea     eax, [ebp+var_40]
  00408F05: push    eax; DName *
  00408F06: lea     ecx, [ebp+var_30]; struct DName *
  00408F09: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00408F0E: push    eax; DName *
  00408F0F: lea     ecx, [ebp+var_20]; this
  00408F12: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408F17: push    29h ; ')'; int
  00408F19: lea     eax, [ebp+var_40]
  00408F1C: push    eax; DName *
  00408F1D: lea     eax, [ebp+var_30]
  00408F20: push    eax
  00408F21: call    ?getArgumentTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getArgumentTypes(void)
  00408F26: push    eax; DName *
  00408F27: lea     eax, [ebp+var_28]
  00408F2A: push    28h ; '('; char
  00408F2C: push    eax; DName *
  00408F2D: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00408F32: add     esp, 10h
  00408F35: mov     ecx, eax; struct DName *
  00408F37: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00408F3C: push    eax; DName *
  00408F3D: lea     ecx, [ebp+var_20]; this
  00408F40: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408F45: test    edi, edi
  00408F47: jz      short loc_408F63
  00408F49: mov     eax, esi
  00408F4B: and     eax, 700h
  00408F50: cmp     eax, 200h
  00408F55: jz      short loc_408F63
  00408F57: lea     eax, [ebp+var_10]
  00408F5A: push    eax; DName *
  00408F5B: lea     ecx, [ebp+var_20]; this
  00408F5E: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408F63: mov     eax, ds:41E07Ch
  00408F68: shr     eax, 8
  00408F6B: not     eax
  00408F6D: test    al, 1
  00408F6F: lea     eax, [ebp+var_40]
  00408F72: push    eax
  00408F73: jz      short loc_408F86
  00408F75: call    ?getThrowTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThrowTypes(void)
  00408F7A: pop     ecx
  00408F7B: push    eax; DName *
  00408F7C: lea     ecx, [ebp+var_20]; this
  00408F7F: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408F84: jmp     short loc_408F95
  00408F86: call    ?getThrowTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThrowTypes(void)
  00408F8B: pop     ecx
  00408F8C: push    eax; DName *
  00408F8D: lea     ecx, [ebp+var_20]
  00408F90: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00408F95: mov     eax, ds:41E07Ch
  00408F9A: shr     eax, 2
  00408F9D: not     eax
  00408F9F: test    al, 1
  00408FA1: jz      loc_409220
  00408FA7: test    ebx, ebx
  00408FA9: jz      loc_409220
  00408FAF: lea     eax, [ebp+var_20]
  00408FB2: push    eax
  00408FB3: mov     ecx, ebx
  00408FB5: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00408FBA: lea     eax, [ebp+var_38]
  00408FBD: jmp     loc_409217
  00408FC2: push    [ebp+arg_4]; DName *
  00408FC5: lea     ecx, [ebp+var_20]; this
  00408FC8: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00408FCD: mov     eax, [ebp+var_4]
  00408FD0: test    eax, eax
  00408FD2: mov     ecx, 7C00h
  00408FD7: jnz     loc_409077
  00408FDD: mov     edx, esi
  00408FDF: and     edx, ecx
  00408FE1: cmp     edx, 6800h
  00408FE7: jnz     short loc_408FF7
  00408FE9: lea     eax, [ebp+var_20]
  00408FEC: push    eax
  00408FED: push    [ebp+arg_0]
  00408FF0: call    ?getVfTableType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getVfTableType(DName const &)
  00408FF5: jmp     short loc_40906C
  00408FF7: test    eax, eax
  00408FF9: jnz     short loc_409077
  00408FFB: mov     edx, esi
  00408FFD: and     edx, ecx
  00408FFF: cmp     edx, 7000h
  00409005: jz      short loc_408FE9
  00409007: test    eax, eax
  00409009: jnz     short loc_409077
  0040900B: mov     edx, esi
  0040900D: and     edx, ecx
  0040900F: cmp     edx, 6000h
  00409015: jnz     short loc_409054
  00409017: push    eax
  00409018: lea     eax, [ebp+var_38]
  0040901B: push    eax
  0040901C: call    ?getDimension@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getDimension(bool)
  00409021: pop     ecx
  00409022: pop     ecx
  00409023: push    4119C8h; char *
  00409028: push    [ebp+arg_0]; DName *
  0040902B: lea     eax, [ebp+var_38]
  0040902E: push    eax; DName *
  0040902F: lea     eax, [ebp+var_40]
  00409032: push    eax; DName *
  00409033: push    7Bh ; '{'; int
  00409035: lea     eax, [ebp+var_30]
  00409038: push    eax; DName *
  00409039: lea     ecx, [ebp+var_20]; struct DName *
  0040903C: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409041: mov     ecx, eax; struct DName *
  00409043: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409048: mov     ecx, eax; struct DName *
  0040904A: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  0040904F: jmp     loc_4094A4
  00409054: test    eax, eax
  00409056: jnz     short loc_409077
  00409058: mov     edx, esi
  0040905A: and     edx, ecx
  0040905C: cmp     edx, ecx
  0040905E: jnz     short loc_409073
  00409060: lea     eax, [ebp+var_20]
  00409063: push    eax
  00409064: push    [ebp+arg_0]
  00409067: call    ?getVdispMapType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getVdispMapType(DName const &)
  0040906C: pop     ecx
  0040906D: pop     ecx
  0040906E: jmp     loc_4094A4
  00409073: test    eax, eax
  00409075: jz      short loc_409082
  00409077: mov     eax, esi
  00409079: and     eax, 1800h
  0040907E: sub     eax, ebx
  00409080: jmp     short loc_409089
  00409082: mov     eax, esi
  00409084: and     eax, 6000h
  00409089: neg     eax
  0040908B: sbb     eax, eax
  0040908D: inc     eax
  0040908E: test    eax, eax
  00409090: mov     edi, 1000h
  00409095: mov     eax, esi
  00409097: jz      short loc_4090A0
  00409099: and     eax, 400h
  0040909E: jmp     short loc_4090A2
  004090A0: and     eax, edi
  004090A2: test    eax, eax
  004090A4: jz      short loc_4090D2
  004090A6: mov     eax, [ebp+var_4]
  004090A9: mov     edx, esi
  004090AB: and     edx, 1B00h
  004090B1: sub     edx, edi
  004090B3: neg     edx
  004090B5: sbb     edx, edx
  004090B7: inc     edx
  004090B8: neg     eax
  004090BA: sbb     eax, eax
  004090BC: test    edx, eax
  004090BE: jz      short loc_4090D2
  004090C0: push    4119A4h; char *
  004090C5: lea     ecx, [ebp+var_20]
  004090C8: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  004090CD: jmp     loc_409190
  004090D2: cmp     [ebp+var_4], 0
  004090D6: mov     eax, esi
  004090D8: jz      short loc_4090E3
  004090DA: and     eax, 1800h
  004090DF: sub     eax, ebx
  004090E1: jmp     short loc_4090E8
  004090E3: and     eax, 6000h
  004090E8: neg     eax
  004090EA: sbb     eax, eax
  004090EC: inc     eax
  004090ED: test    eax, eax
  004090EF: mov     eax, esi
  004090F1: jz      short loc_4090FA
  004090F3: and     eax, 400h
  004090F8: jmp     short loc_4090FC
  004090FA: and     eax, edi
  004090FC: test    eax, eax
  004090FE: jz      short loc_409125
  00409100: mov     eax, [ebp+var_4]
  00409103: mov     edx, esi
  00409105: and     edx, 1B00h
  0040910B: sub     edx, 1100h
  00409111: neg     edx
  00409113: sbb     edx, edx
  00409115: inc     edx
  00409116: neg     eax
  00409118: sbb     eax, eax
  0040911A: test    edx, eax
  0040911C: jz      short loc_409125
  0040911E: push    411970h
  00409123: jmp     short loc_4090C5
  00409125: cmp     [ebp+var_4], 0
  00409129: mov     eax, esi
  0040912B: jz      short loc_409136
  0040912D: and     eax, 1800h
  00409132: sub     eax, ebx
  00409134: jmp     short loc_40913B
  00409136: and     eax, 6000h
  0040913B: neg     eax
  0040913D: sbb     eax, eax
  0040913F: inc     eax
  00409140: test    eax, eax
  00409142: mov     eax, esi
  00409144: jz      short loc_40914D
  00409146: and     eax, 400h
  0040914B: jmp     short loc_40914F
  0040914D: and     eax, edi
  0040914F: test    eax, eax
  00409151: jz      short loc_40917B
  00409153: mov     eax, [ebp+var_4]
  00409156: mov     edx, esi
  00409158: and     edx, 1B00h
  0040915E: sub     edx, 1200h
  00409164: neg     edx
  00409166: sbb     edx, edx
  00409168: inc     edx
  00409169: neg     eax
  0040916B: sbb     eax, eax
  0040916D: test    edx, eax
  0040916F: jz      short loc_40917B
  00409171: push    411940h
  00409176: jmp     loc_4090C5
  0040917B: cmp     [ebp+var_4], 0
  0040917F: jnz     short loc_409196
  00409181: mov     eax, esi
  00409183: and     eax, ecx
  00409185: cmp     eax, 7800h
  0040918A: jz      loc_409498
  00409190: cmp     [ebp+var_4], 0
  00409194: jz      short loc_4091A1
  00409196: mov     eax, esi
  00409198: and     eax, 1800h
  0040919D: sub     eax, ebx
  0040919F: jmp     short loc_4091A8
  004091A1: mov     eax, esi
  004091A3: and     eax, 6000h
  004091A8: neg     eax
  004091AA: sbb     eax, eax
  004091AC: inc     eax
  004091AD: test    eax, eax
  004091AF: mov     eax, esi
  004091B1: jz      short loc_4091BA
  004091B3: and     eax, 400h
  004091B8: jmp     short loc_4091BC
  004091BA: and     eax, edi
  004091BC: test    eax, eax
  004091BE: jz      short loc_409208
  004091C0: mov     ecx, [ebp+var_4]
  004091C3: mov     eax, esi
  004091C5: and     eax, 1B00h
  004091CA: xor     edx, edx
  004091CC: cmp     eax, 1100h
  004091D1: setz    dl
  004091D4: neg     ecx
  004091D6: sbb     ecx, ecx
  004091D8: test    edx, ecx
  004091DA: jnz     short loc_4091F1
  004091DC: mov     ecx, [ebp+var_4]
  004091DF: xor     edx, edx
  004091E1: cmp     eax, 1200h
  004091E6: setz    dl
  004091E9: neg     ecx
  004091EB: sbb     ecx, ecx
  004091ED: test    edx, ecx
  004091EF: jz      short loc_409208
  004091F1: lea     eax, [ebp+var_20]
  004091F4: push    eax; DName *
  004091F5: lea     eax, [ebp+var_40]
  004091F8: push    4119E4h; char *
  004091FD: push    eax; DName *
  004091FE: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00409203: add     esp, 0Ch
  00409206: jmp     short loc_409217
  00409208: lea     eax, [ebp+var_20]
  0040920B: push    eax
  0040920C: lea     eax, [ebp+var_40]
  0040920F: push    eax
  00409210: call    ?getExternalDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getExternalDataType(DName const &)
  00409215: pop     ecx
  00409216: pop     ecx
  00409217: lea     ecx, [ebp+var_20]
  0040921A: push    eax
  0040921B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409220: xor     edx, edx
  00409222: cmp     [ebp+var_4], edx
  00409225: mov     ecx, 6000h
  0040922A: mov     ebx, 800h
  0040922F: mov     edi, 1800h
  00409234: mov     eax, esi
  00409236: jz      short loc_40923E
  00409238: and     eax, edi
  0040923A: sub     eax, ebx
  0040923C: jmp     short loc_409240
  0040923E: and     eax, ecx
  00409240: neg     eax
  00409242: sbb     eax, eax
  00409244: inc     eax
  00409245: cmp     eax, edx
  00409247: jz      loc_40944F
  0040924D: mov     eax, ds:41E07Ch
  00409252: shr     eax, 9
  00409255: not     eax
  00409257: test    al, 1
  00409259: jz      loc_409366
  0040925F: cmp     [ebp+var_4], edx
  00409262: mov     eax, esi
  00409264: jz      short loc_40926C
  00409266: and     eax, edi
  00409268: sub     eax, ebx
  0040926A: jmp     short loc_40926E
  0040926C: and     eax, ecx
  0040926E: neg     eax
  00409270: sbb     eax, eax
  00409272: inc     eax
  00409273: cmp     eax, edx
  00409275: jz      short loc_4092B9
  00409277: cmp     [ebp+var_4], edx
  0040927A: jz      short loc_40928F
  0040927C: mov     eax, esi
  0040927E: and     eax, 700h
  00409283: sub     eax, 200h
  00409288: neg     eax
  0040928A: sbb     eax, eax
  0040928C: inc     eax
  0040928D: jmp     short loc_409292
  0040928F: xor     eax, eax
  00409291: inc     eax
  00409292: cmp     eax, edx
  00409294: jz      short loc_4092B9
  00409296: lea     eax, [ebp+var_20]
  00409299: push    eax; DName *
  0040929A: lea     eax, [ebp+var_40]
  0040929D: push    411938h; char *
  004092A2: push    eax; DName *
  004092A3: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  004092A8: add     esp, 0Ch
  004092AB: push    eax
  004092AC: lea     ecx, [ebp+var_20]
  004092AF: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004092B4: mov     ecx, 6000h
  004092B9: mov     edx, [ebp+var_4]
  004092BC: test    edx, edx
  004092BE: jz      short loc_4092DA
  004092C0: mov     eax, esi
  004092C2: and     eax, 700h
  004092C7: cmp     eax, 100h
  004092CC: jz      short loc_409343
  004092CE: test    edx, edx
  004092D0: jz      short loc_4092DA
  004092D2: mov     eax, esi
  004092D4: and     eax, edi
  004092D6: sub     eax, ebx
  004092D8: jmp     short loc_4092DE
  004092DA: mov     eax, esi
  004092DC: and     eax, ecx
  004092DE: neg     eax
  004092E0: sbb     eax, eax
  004092E2: inc     eax
  004092E3: test    eax, eax
  004092E5: mov     eax, esi
  004092E7: jz      short loc_4092F0
  004092E9: and     eax, 400h
  004092EE: jmp     short loc_4092F5
  004092F0: and     eax, 1000h
  004092F5: test    eax, eax
  004092F7: jz      short loc_409366
  004092F9: test    edx, edx
  004092FB: mov     eax, esi
  004092FD: jz      short loc_409305
  004092FF: and     eax, edi
  00409301: sub     eax, ebx
  00409303: jmp     short loc_409307
  00409305: and     eax, ecx
  00409307: neg     eax
  00409309: sbb     eax, eax
  0040930B: inc     eax
  0040930C: test    eax, eax
  0040930E: jz      short loc_40931E
  00409310: mov     eax, esi
  00409312: and     eax, 700h
  00409317: cmp     eax, 500h
  0040931C: jz      short loc_409343
  0040931E: test    edx, edx
  00409320: mov     eax, esi
  00409322: jz      short loc_40932A
  00409324: and     eax, edi
  00409326: sub     eax, ebx
  00409328: jmp     short loc_40932C
  0040932A: and     eax, ecx
  0040932C: neg     eax
  0040932E: sbb     eax, eax
  00409330: inc     eax
  00409331: test    eax, eax
  00409333: jz      short loc_409366
  00409335: mov     eax, esi
  00409337: and     eax, 700h
  0040933C: cmp     eax, 400h
  00409341: jnz     short loc_409366
  00409343: lea     eax, [ebp+var_20]
  00409346: push    eax; DName *
  00409347: lea     eax, [ebp+var_40]
  0040934A: push    41192Ch; char *
  0040934F: push    eax; DName *
  00409350: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00409355: add     esp, 0Ch
  00409358: push    eax
  00409359: lea     ecx, [ebp+var_20]
  0040935C: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409361: mov     ecx, 6000h
  00409366: mov     eax, ds:41E07Ch
  0040936B: shr     eax, 7
  0040936E: not     eax
  00409370: test    al, 1
  00409372: jz      loc_40944F
  00409378: mov     edx, [ebp+var_4]
  0040937B: test    edx, edx
  0040937D: mov     eax, esi
  0040937F: jz      short loc_409387
  00409381: and     eax, edi
  00409383: sub     eax, ebx
  00409385: jmp     short loc_409389
  00409387: and     eax, ecx
  00409389: neg     eax
  0040938B: sbb     eax, eax
  0040938D: inc     eax
  0040938E: test    eax, eax
  00409390: jz      short loc_4093BA
  00409392: test    edx, edx
  00409394: mov     eax, esi
  00409396: jz      short loc_4093A2
  00409398: and     al, 0C0h
  0040939A: sub     al, 40h ; '@'
  0040939C: neg     al
  0040939E: sbb     eax, eax
  004093A0: jmp     short loc_4093AA
  004093A2: and     eax, edi
  004093A4: sub     eax, ebx
  004093A6: neg     eax
  004093A8: sbb     eax, eax
  004093AA: inc     eax
  004093AB: test    eax, eax
  004093AD: jz      short loc_4093BA
  004093AF: lea     eax, [ebp+var_20]
  004093B2: push    eax
  004093B3: push    411920h
  004093B8: jmp     short loc_409435
  004093BA: test    edx, edx
  004093BC: mov     eax, esi
  004093BE: jz      short loc_4093C6
  004093C0: and     eax, edi
  004093C2: sub     eax, ebx
  004093C4: jmp     short loc_4093C8
  004093C6: and     eax, ecx
  004093C8: neg     eax
  004093CA: sbb     eax, eax
  004093CC: inc     eax
  004093CD: test    eax, eax
  004093CF: jz      short loc_4093FC
  004093D1: test    edx, edx
  004093D3: mov     eax, esi
  004093D5: jz      short loc_4093E1
  004093D7: and     al, 0C0h
  004093D9: sub     al, 80h ; '€'
  004093DB: neg     al
  004093DD: sbb     eax, eax
  004093DF: jmp     short loc_4093EC
  004093E1: and     eax, edi
  004093E3: sub     eax, 1000h
  004093E8: neg     eax
  004093EA: sbb     eax, eax
  004093EC: inc     eax
  004093ED: test    eax, eax
  004093EF: jz      short loc_4093FC
  004093F1: lea     eax, [ebp+var_20]
  004093F4: push    eax
  004093F5: push    411914h
  004093FA: jmp     short loc_409435
  004093FC: test    edx, edx
  004093FE: mov     eax, esi
  00409400: jz      short loc_409408
  00409402: and     eax, edi
  00409404: sub     eax, ebx
  00409406: jmp     short loc_40940A
  00409408: and     eax, ecx
  0040940A: neg     eax
  0040940C: sbb     eax, eax
  0040940E: inc     eax
  0040940F: test    eax, eax
  00409411: jz      short loc_40944F
  00409413: test    edx, edx
  00409415: mov     eax, esi
  00409417: jz      short loc_409421
  00409419: and     al, 0C0h
  0040941B: neg     al
  0040941D: sbb     eax, eax
  0040941F: jmp     short loc_409427
  00409421: and     eax, edi
  00409423: neg     eax
  00409425: sbb     eax, eax
  00409427: inc     eax
  00409428: test    eax, eax
  0040942A: jz      short loc_40944F
  0040942C: lea     eax, [ebp+var_20]
  0040942F: push    eax; DName *
  00409430: push    411908h; char *
  00409435: lea     eax, [ebp+var_40]
  00409438: push    eax; DName *
  00409439: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040943E: add     esp, 0Ch
  00409441: lea     ecx, [ebp+var_20]
  00409444: push    eax
  00409445: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040944A: mov     ecx, 6000h
  0040944F: cmp     [ebp+var_4], 0
  00409453: mov     eax, esi
  00409455: jz      short loc_40945D
  00409457: and     eax, edi
  00409459: sub     eax, ebx
  0040945B: jmp     short loc_40945F
  0040945D: and     eax, ecx
  0040945F: neg     eax
  00409461: sbb     eax, eax
  00409463: inc     eax
  00409464: test    eax, eax
  00409466: jz      short loc_409470
  00409468: and     esi, 400h
  0040946E: jmp     short loc_409476
  00409470: and     esi, 1000h
  00409476: test    esi, esi
  00409478: jz      short loc_409498
  0040947A: lea     eax, [ebp+var_20]
  0040947D: push    eax; DName *
  0040947E: lea     eax, [ebp+var_40]
  00409481: push    4118FCh; char *
  00409486: push    eax; DName *
  00409487: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040948C: add     esp, 0Ch
  0040948F: push    eax
  00409490: lea     ecx, [ebp+var_20]
  00409493: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409498: mov     ecx, [ebp+arg_0]; this
  0040949B: lea     eax, [ebp+var_20]
  0040949E: push    eax; struct DName *
  0040949F: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004094A4: pop     ebx
  004094A5: mov     eax, [ebp+arg_0]
  004094A8: pop     edi
  004094A9: pop     esi
  004094AA: leave
  004094AB: retn

Function: ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ
  004094AC: push    ebp
  004094AD: mov     ebp, esp
  004094AF: sub     esp, 20h
  004094B2: push    esi
  004094B3: mov     esi, 2000h
  004094B8: test    ds:41E07Ch, esi
  004094BE: jz      short loc_4094E2
  004094C0: and     byte ptr ds:41E07Dh, 0DFh
  004094C7: lea     eax, [ebp+var_10]
  004094CA: push    0
  004094CC: push    eax
  004094CD: call    ?getDataType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getDataType(DName *)
  004094D2: or      ds:41E07Ch, esi
  004094D8: pop     ecx
  004094D9: pop     ecx
  004094DA: lea     eax, [ebp+var_10]
  004094DD: jmp     loc_409633
  004094E2: mov     eax, ds:41E06Ch
  004094E7: mov     al, [eax]
  004094E9: cmp     al, 3Fh ; '?'
  004094EB: jnz     loc_40964E
  004094F1: inc     dword ptr ds:41E06Ch
  004094F7: lea     eax, [ebp+var_8]
  004094FA: push    eax
  004094FB: call    ?getSymbolName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getSymbolName(void)
  00409500: pop     ecx
  00409501: lea     ecx, [ebp+var_8]; this
  00409504: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409509: test    eax, eax
  0040950B: jnz     short loc_409518
  0040950D: test    byte ptr [ebp+var_4], 20h
  00409511: jz      short loc_409518
  00409513: xor     esi, esi
  00409515: inc     esi
  00409516: jmp     short loc_40951A
  00409518: xor     esi, esi
  0040951A: lea     ecx, [ebp+var_8]; this
  0040951D: call    ?isValid@DName@@QBEHXZ; DName::isValid(void)
  00409522: test    eax, eax
  00409524: jz      loc_409630
  0040952A: mov     eax, ds:41E06Ch
  0040952F: mov     al, [eax]
  00409531: test    al, al
  00409533: jz      loc_4095D0
  00409539: cmp     al, 40h ; '@'
  0040953B: jz      loc_4095D0
  00409541: lea     eax, [ebp+var_10]
  00409544: push    eax
  00409545: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  0040954A: pop     ecx
  0040954B: lea     ecx, [ebp+var_10]; this
  0040954E: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409553: test    eax, eax
  00409555: jnz     short loc_4095D0
  00409557: cmp     ds:41E084h, al
  0040955D: jz      short loc_4095A7
  0040955F: mov     ds:41E084h, al
  00409564: lea     eax, [ebp+var_10]
  00409567: push    eax; DName *
  00409568: lea     eax, [ebp+var_18]
  0040956B: push    eax; DName *
  0040956C: lea     ecx, [ebp+var_8]; struct DName *
  0040956F: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409574: push    eax
  00409575: lea     ecx, [ebp+var_8]
  00409578: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040957D: mov     eax, ds:41E06Ch
  00409582: cmp     byte ptr [eax], 40h ; '@'
  00409585: jz      short loc_4095D0
  00409587: lea     eax, [ebp+var_18]
  0040958A: push    eax
  0040958B: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  00409590: pop     ecx
  00409591: push    eax
  00409592: lea     ecx, [ebp+var_10]
  00409595: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040959A: lea     eax, [ebp+var_8]
  0040959D: push    eax
  0040959E: lea     eax, [ebp+var_18]
  004095A1: push    eax
  004095A2: lea     eax, [ebp+var_20]
  004095A5: jmp     short loc_4095B2
  004095A7: lea     eax, [ebp+var_8]
  004095AA: push    eax; DName *
  004095AB: lea     eax, [ebp+var_20]
  004095AE: push    eax; DName *
  004095AF: lea     eax, [ebp+var_18]
  004095B2: push    4118A8h; char *
  004095B7: lea     ecx, [ebp+var_10]; struct DName *
  004095BA: push    eax; DName *
  004095BB: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  004095C0: mov     ecx, eax; struct DName *
  004095C2: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004095C7: lea     ecx, [ebp+var_8]
  004095CA: push    eax
  004095CB: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004095D0: test    esi, esi
  004095D2: jz      short loc_4095E4
  004095D4: lea     ecx, [ebp+var_8]; this
  004095D7: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004095DC: test    eax, eax
  004095DE: jnz     short loc_4095E4
  004095E0: or      [ebp+var_4], 20h
  004095E4: lea     ecx, [ebp+var_8]; this
  004095E7: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004095EC: test    eax, eax
  004095EE: jnz     short loc_409630
  004095F0: test    byte ptr [ebp+var_4+1], 1
  004095F4: jnz     short loc_409630
  004095F6: mov     eax, ds:41E06Ch
  004095FB: mov     al, [eax]
  004095FD: test    al, al
  004095FF: jz      short loc_40960B
  00409601: cmp     al, 40h ; '@'
  00409603: jnz     short loc_409652
  00409605: inc     dword ptr ds:41E06Ch
  0040960B: test    byte ptr ds:41E07Dh, 10h
  00409612: jz      short loc_40963E
  00409614: test    esi, esi
  00409616: jnz     short loc_40963E
  00409618: and     [ebp+var_10], esi
  0040961B: and     [ebp+var_C], 0FE00h
  00409621: lea     eax, [ebp+var_10]
  00409624: push    eax
  00409625: lea     eax, [ebp+var_20]
  00409628: push    eax
  00409629: call    ?composeDeclaration@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::composeDeclaration(DName const &)
  0040962E: pop     ecx
  0040962F: pop     ecx
  00409630: lea     eax, [ebp+var_8]
  00409633: mov     ecx, [ebp+arg_0]; this
  00409636: push    eax; struct DName *
  00409637: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040963C: jmp     short loc_409660
  0040963E: lea     eax, [ebp+var_8]
  00409641: push    eax
  00409642: push    [ebp+arg_0]
  00409645: call    ?composeDeclaration@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::composeDeclaration(DName const &)
  0040964A: pop     ecx
  0040964B: pop     ecx
  0040964C: jmp     short loc_409660
  0040964E: test    al, al
  00409650: jz      short loc_409656
  00409652: push    1
  00409654: jmp     short loc_409658
  00409656: push    2
  00409658: mov     ecx, [ebp+arg_0]
  0040965B: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00409660: mov     eax, [ebp+arg_0]
  00409663: pop     esi
  00409664: leave
  00409665: retn

Function: ?getScope@UnDecorator@@CA?AVDName@@XZ
  00409666: push    ebp
  00409667: lea     ebp, [esp-74h]
  0040966B: sub     esp, 9Ch
  00409671: mov     eax, [ebp+74h+var_8]
  00409674: push    ebx
  00409675: xor     ebx, ebx
  00409677: and     eax, 0FFFFFE00h
  0040967C: push    esi
  0040967D: mov     [ebp+74h+var_C], ebx
  00409680: mov     [ebp+74h+var_8], eax
  00409683: mov     [ebp+74h+var_1], bl
  00409686: mov     esi, 4118A8h
  0040968B: jmp     loc_409883
  00409690: mov     ecx, ds:41E06Ch
  00409696: mov     cl, [ecx]
  00409698: cmp     cl, bl
  0040969A: jz      loc_40988B
  004096A0: cmp     cl, 40h ; '@'
  004096A3: jz      loc_40988B
  004096A9: cmp     ds:41E084h, bl
  004096AF: jz      short loc_4096BD
  004096B1: cmp     ds:41E085h, bl
  004096B7: jz      loc_4098F7
  004096BD: lea     ecx, [ebp+74h+var_C]; this
  004096C0: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004096C5: test    eax, eax
  004096C7: jnz     short loc_409706
  004096C9: lea     eax, [ebp+74h+var_C]
  004096CC: push    eax; DName *
  004096CD: lea     eax, [ebp+74h+var_54]
  004096D0: push    esi; char *
  004096D1: push    eax; DName *
  004096D2: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  004096D7: add     esp, 0Ch
  004096DA: push    eax
  004096DB: lea     ecx, [ebp+74h+var_C]
  004096DE: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004096E3: cmp     [ebp+74h+var_1], bl
  004096E6: jz      short loc_409706
  004096E8: lea     eax, [ebp+74h+var_C]
  004096EB: push    eax; DName *
  004096EC: lea     eax, [ebp+74h+var_7C]
  004096EF: push    5Bh ; '['; char
  004096F1: push    eax; DName *
  004096F2: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  004096F7: add     esp, 0Ch
  004096FA: push    eax
  004096FB: lea     ecx, [ebp+74h+var_C]
  004096FE: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409703: mov     [ebp+74h+var_1], bl
  00409706: mov     edx, ds:41E06Ch
  0040970C: cmp     byte ptr [edx], 3Fh ; '?'
  0040970F: jnz     loc_40985B
  00409715: inc     edx
  00409716: mov     ds:41E06Ch, edx
  0040971C: mov     cl, [edx]
  0040971E: movsx   eax, cl
  00409721: sub     eax, 24h ; '$'
  00409724: jz      loc_409847
  0040972A: dec     eax
  0040972B: jz      loc_409818
  00409731: sub     eax, 1Ah
  00409734: jz      short loc_409797
  00409736: dec     eax
  00409737: dec     eax
  00409738: jz      loc_409818
  0040973E: sub     eax, 8
  00409741: lea     eax, [ebp+74h+var_C]
  00409744: push    eax; DName *
  00409745: jz      short loc_409759
  00409747: lea     eax, [ebp+74h+var_8C]
  0040974A: push    eax
  0040974B: lea     eax, [ebp+74h+var_9C]
  0040974E: push    eax
  0040974F: call    ?getLexicalFrame@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getLexicalFrame(void)
  00409754: jmp     loc_40986F
  00409759: lea     eax, [ebp+74h+var_84]
  0040975C: push    eax; DName *
  0040975D: push    5Dh ; ']'; int
  0040975F: lea     eax, [ebp+74h+var_44]
  00409762: push    eax; DName *
  00409763: lea     eax, [ebp+74h+var_74]
  00409766: inc     edx
  00409767: push    1
  00409769: push    eax
  0040976A: mov     ds:41E06Ch, edx
  00409770: call    ?getZName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getZName(bool)
  00409775: pop     ecx
  00409776: pop     ecx
  00409777: mov     ecx, eax; struct DName *
  00409779: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040977E: mov     ecx, eax; struct DName *
  00409780: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409785: push    eax
  00409786: lea     ecx, [ebp+74h+var_C]
  00409789: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040978E: mov     [ebp+74h+var_1], 1
  00409792: jmp     loc_409880
  00409797: lea     eax, [edx+1]
  0040979A: cmp     byte ptr [eax], 5Fh ; '_'
  0040979D: jnz     short loc_4097E9
  0040979F: cmp     byte ptr [edx+2], 3Fh ; '?'
  004097A3: jnz     short loc_4097E9
  004097A5: mov     ds:41E06Ch, eax
  004097AA: lea     eax, [ebp+74h+var_C]
  004097AD: push    eax; DName *
  004097AE: lea     eax, [ebp+74h+var_2C]
  004097B1: push    eax; DName *
  004097B2: push    ebx
  004097B3: lea     eax, [ebp+74h+var_94]
  004097B6: push    ebx
  004097B7: push    eax
  004097B8: call    ?getOperatorName@UnDecorator@@CA?AVDName@@_NPA_N@Z; UnDecorator::getOperatorName(bool,bool *)
  004097BD: add     esp, 0Ch
  004097C0: mov     ecx, eax; struct DName *
  004097C2: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004097C7: push    eax
  004097C8: lea     ecx, [ebp+74h+var_C]
  004097CB: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004097D0: mov     eax, ds:41E06Ch
  004097D5: cmp     byte ptr [eax], 40h ; '@'
  004097D8: jnz     loc_409880
  004097DE: inc     dword ptr ds:41E06Ch
  004097E4: jmp     loc_409880
  004097E9: lea     eax, [ebp+74h+var_C]
  004097EC: push    eax
  004097ED: lea     eax, [ebp+74h+var_64]
  004097F0: push    eax
  004097F1: push    27h ; '''; int
  004097F3: lea     eax, [ebp+74h+var_34]
  004097F6: push    eax; DName *
  004097F7: lea     eax, [ebp+74h+var_3C]
  004097FA: push    eax
  004097FB: call    ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDecoratedName(void)
  00409800: push    eax; DName *
  00409801: lea     eax, [ebp+74h+var_4C]
  00409804: push    60h ; '`'; char
  00409806: push    eax; DName *
  00409807: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040980C: add     esp, 10h
  0040980F: mov     ecx, eax; struct DName *
  00409811: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409816: jmp     short loc_409870
  00409818: cmp     cl, 40h ; '@'
  0040981B: jz      short loc_409829
  0040981D: inc     edx
  0040981E: mov     ds:41E06Ch, edx
  00409824: cmp     byte ptr [edx], 40h ; '@'
  00409827: jnz     short loc_40981D
  00409829: lea     eax, [ebp+74h+var_C]
  0040982C: push    eax; DName *
  0040982D: lea     eax, [ebp+74h+var_5C]
  00409830: inc     edx
  00409831: push    411868h; char *
  00409836: push    eax; DName *
  00409837: mov     ds:41E06Ch, edx
  0040983D: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00409842: add     esp, 0Ch
  00409845: jmp     short loc_409877
  00409847: lea     eax, [ebp+74h+var_C]
  0040984A: push    eax
  0040984B: lea     eax, [ebp+74h+var_6C]
  0040984E: dec     edx
  0040984F: push    eax
  00409850: mov     ds:41E06Ch, edx
  00409856: lea     eax, [ebp+74h+var_1C]
  00409859: jmp     short loc_409866
  0040985B: lea     eax, [ebp+74h+var_C]
  0040985E: push    eax; DName *
  0040985F: lea     eax, [ebp+74h+var_24]
  00409862: push    eax; DName *
  00409863: lea     eax, [ebp+74h+var_14]
  00409866: push    1
  00409868: push    eax
  00409869: call    ?getZName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getZName(bool)
  0040986E: pop     ecx
  0040986F: pop     ecx
  00409870: mov     ecx, eax; struct DName *
  00409872: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409877: lea     ecx, [ebp+74h+var_C]
  0040987A: push    eax
  0040987B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409880: mov     eax, [ebp+74h+var_8]
  00409883: test    al, 0Fh
  00409885: jz      loc_409690
  0040988B: mov     ecx, ds:41E06Ch
  00409891: mov     cl, [ecx]
  00409893: cmp     cl, bl
  00409895: jz      short loc_4098B4
  00409897: cmp     cl, 40h ; '@'
  0040989A: jz      short loc_4098F7
  0040989C: mov     ecx, eax
  0040989E: and     ecx, 0Fh
  004098A1: cmp     cl, 3
  004098A4: mov     [ebp+74h+var_C], ebx
  004098A7: jz      short loc_4098F7
  004098A9: and     eax, 0FFFFFFF1h
  004098AC: or      eax, 1
  004098AF: mov     [ebp+74h+var_8], eax
  004098B2: jmp     short loc_4098F7
  004098B4: lea     ecx, [ebp+74h+var_C]; this
  004098B7: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  004098BC: test    eax, eax
  004098BE: jz      short loc_4098C9
  004098C0: push    2
  004098C2: call    ??4DName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator=(DNameStatus)
  004098C7: jmp     short loc_4098F7
  004098C9: lea     eax, [ebp+74h+var_C]
  004098CC: push    eax; DName *
  004098CD: lea     eax, [ebp+74h+var_14]
  004098D0: push    eax; DName *
  004098D1: push    esi; char *
  004098D2: lea     eax, [ebp+74h+var_24]
  004098D5: push    eax; DName *
  004098D6: push    2
  004098D8: lea     ecx, [ebp+74h+var_1C]
  004098DB: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004098E0: mov     ecx, eax; struct DName *
  004098E2: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  004098E7: mov     ecx, eax; struct DName *
  004098E9: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  004098EE: push    eax
  004098EF: lea     ecx, [ebp+74h+var_C]
  004098F2: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004098F7: mov     ecx, [ebp+74h+arg_0]; this
  004098FA: lea     eax, [ebp+74h+var_C]
  004098FD: push    eax; struct DName *
  004098FE: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00409903: mov     eax, [ebp+74h+arg_0]
  00409906: pop     esi
  00409907: pop     ebx
  00409908: add     ebp, 74h ; 't'
  0040990B: leave
  0040990C: retn

Function: ?getFunctionIndirectType@UnDecorator@@CA?AVDName@@ABV2@@Z
  0040990D: push    ebp
  0040990E: mov     ebp, esp
  00409910: sub     esp, 30h
  00409913: mov     eax, ds:41E06Ch
  00409918: mov     cl, [eax]
  0040991A: test    cl, cl
  0040991C: jnz     short loc_409933
  0040991E: push    [ebp+arg_4]; DName *
  00409921: push    2; int
  00409923: push    [ebp+arg_0]; DName *
  00409926: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040992B: add     esp, 0Ch
  0040992E: jmp     loc_409C49
  00409933: cmp     cl, 36h ; '6'
  00409936: jl      short loc_40993D
  00409938: cmp     cl, 39h ; '9'
  0040993B: jle     short loc_409951
  0040993D: cmp     cl, 5Fh ; '_'
  00409940: jz      short loc_409951
  00409942: mov     ecx, [ebp+arg_0]
  00409945: push    1
  00409947: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040994C: jmp     loc_409C49
  00409951: push    ebx
  00409952: movsx   ebx, cl
  00409955: sub     ebx, 36h ; '6'
  00409958: inc     eax
  00409959: cmp     ebx, 29h ; ')'
  0040995C: mov     ds:41E06Ch, eax
  00409961: jnz     short loc_409994
  00409963: mov     cl, [eax]
  00409965: test    cl, cl
  00409967: jz      short loc_40997F
  00409969: movsx   ebx, cl
  0040996C: sub     ebx, 3Dh ; '='
  0040996F: inc     eax
  00409970: cmp     ebx, 4
  00409973: mov     ds:41E06Ch, eax
  00409978: jl      short loc_40999D
  0040997A: cmp     ebx, 7
  0040997D: jmp     short loc_40999B
  0040997F: push    [ebp+arg_4]; DName *
  00409982: push    2; int
  00409984: push    [ebp+arg_0]; DName *
  00409987: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040998C: add     esp, 0Ch
  0040998F: jmp     loc_409C48
  00409994: test    ebx, ebx
  00409996: jl      short loc_40999D
  00409998: cmp     ebx, 3
  0040999B: jle     short loc_4099A0
  0040999D: or      ebx, 0FFFFFFFFh
  004099A0: cmp     ebx, 0FFFFFFFFh
  004099A3: jnz     short loc_4099B4
  004099A5: mov     ecx, [ebp+arg_0]
  004099A8: push    1
  004099AA: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  004099AF: jmp     loc_409C48
  004099B4: and     [ebp+var_10], 0
  004099B8: push    esi
  004099B9: push    edi
  004099BA: push    [ebp+arg_4]; struct DName *
  004099BD: mov     esi, 0FFFFFE00h
  004099C2: and     [ebp+var_C], esi
  004099C5: lea     ecx, [ebp+var_8]; this
  004099C8: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  004099CD: mov     edi, ebx
  004099CF: and     edi, 2
  004099D2: jz      loc_409A78
  004099D8: lea     eax, [ebp+var_8]
  004099DB: push    eax; DName *
  004099DC: lea     eax, [ebp+var_20]
  004099DF: push    4118A8h; char *
  004099E4: push    eax; DName *
  004099E5: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  004099EA: add     esp, 0Ch
  004099ED: push    eax
  004099EE: lea     ecx, [ebp+var_8]
  004099F1: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  004099F6: mov     eax, ds:41E06Ch
  004099FB: cmp     byte ptr [eax], 0
  004099FE: lea     eax, [ebp+var_8]
  00409A01: push    eax; DName *
  00409A02: jz      short loc_409A29
  00409A04: lea     eax, [ebp+var_20]
  00409A07: push    eax; DName *
  00409A08: lea     eax, [ebp+var_28]
  00409A0B: push    eax
  00409A0C: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  00409A11: push    eax; DName *
  00409A12: lea     eax, [ebp+var_30]
  00409A15: push    20h ; ' '; char
  00409A17: push    eax; DName *
  00409A18: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00409A1D: add     esp, 10h
  00409A20: mov     ecx, eax; struct DName *
  00409A22: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409A27: jmp     short loc_409A37
  00409A29: lea     eax, [ebp+var_30]
  00409A2C: push    2; int
  00409A2E: push    eax; DName *
  00409A2F: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  00409A34: add     esp, 0Ch
  00409A37: lea     ecx, [ebp+var_8]
  00409A3A: push    eax
  00409A3B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409A40: mov     eax, ds:41E06Ch
  00409A45: mov     al, [eax]
  00409A47: test    al, al
  00409A49: jz      loc_409AD8
  00409A4F: cmp     al, 40h ; '@'
  00409A51: jnz     short loc_409AD1
  00409A53: mov     eax, ds:41E07Ch
  00409A58: inc     dword ptr ds:41E06Ch
  00409A5E: and     eax, 60h
  00409A61: cmp     al, 60h ; '`'
  00409A63: lea     eax, [ebp+var_30]
  00409A66: push    eax
  00409A67: jz      short loc_409AC0
  00409A69: call    ?getThisType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThisType(void)
  00409A6E: pop     ecx
  00409A6F: push    eax
  00409A70: lea     ecx, [ebp+var_10]
  00409A73: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409A78: test    bl, 4
  00409A7B: jz      loc_409B01
  00409A81: mov     eax, ds:41E07Ch
  00409A86: shr     eax, 1
  00409A88: not     eax
  00409A8A: test    al, 1
  00409A8C: jz      short loc_409AEE
  00409A8E: lea     eax, [ebp+var_8]
  00409A91: push    eax; DName *
  00409A92: lea     eax, [ebp+var_30]
  00409A95: push    eax; DName *
  00409A96: lea     eax, [ebp+var_28]
  00409A99: push    eax
  00409A9A: call    ?getBasedType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getBasedType(void)
  00409A9F: push    eax; DName *
  00409AA0: lea     eax, [ebp+var_20]
  00409AA3: push    20h ; ' '; char
  00409AA5: push    eax; DName *
  00409AA6: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00409AAB: add     esp, 10h
  00409AAE: mov     ecx, eax; struct DName *
  00409AB0: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409AB5: push    eax
  00409AB6: lea     ecx, [ebp+var_8]
  00409AB9: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409ABE: jmp     short loc_409B01
  00409AC0: call    ?getThisType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThisType(void)
  00409AC5: pop     ecx
  00409AC6: push    eax; DName *
  00409AC7: lea     ecx, [ebp+var_10]
  00409ACA: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00409ACF: jmp     short loc_409A78
  00409AD1: push    1
  00409AD3: jmp     loc_409C3E
  00409AD8: lea     eax, [ebp+var_8]
  00409ADB: push    eax; DName *
  00409ADC: push    2; int
  00409ADE: push    [ebp+arg_0]; DName *
  00409AE1: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  00409AE6: add     esp, 0Ch
  00409AE9: jmp     loc_409C46
  00409AEE: lea     eax, [ebp+var_30]
  00409AF1: push    eax
  00409AF2: call    ?getBasedType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getBasedType(void)
  00409AF7: pop     ecx
  00409AF8: push    eax; DName *
  00409AF9: lea     ecx, [ebp+var_8]
  00409AFC: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00409B01: mov     eax, ds:41E07Ch
  00409B06: shr     eax, 1
  00409B08: not     eax
  00409B0A: test    al, 1
  00409B0C: jz      short loc_409B32
  00409B0E: lea     eax, [ebp+var_8]
  00409B11: push    eax; DName *
  00409B12: lea     eax, [ebp+var_30]
  00409B15: push    eax; DName *
  00409B16: lea     eax, [ebp+var_28]
  00409B19: push    eax
  00409B1A: call    ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getCallingConvention(void)
  00409B1F: pop     ecx
  00409B20: mov     ecx, eax; struct DName *
  00409B22: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409B27: push    eax
  00409B28: lea     ecx, [ebp+var_8]
  00409B2B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409B30: jmp     short loc_409B45
  00409B32: lea     eax, [ebp+var_30]
  00409B35: push    eax
  00409B36: call    ?getCallingConvention@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getCallingConvention(void)
  00409B3B: pop     ecx
  00409B3C: push    eax; DName *
  00409B3D: lea     ecx, [ebp+var_8]
  00409B40: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00409B45: mov     ecx, [ebp+arg_4]; this
  00409B48: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409B4D: test    eax, eax
  00409B4F: jnz     short loc_409B79
  00409B51: push    29h ; ')'; int
  00409B53: lea     eax, [ebp+var_30]
  00409B56: push    eax; DName *
  00409B57: lea     eax, [ebp+var_8]
  00409B5A: push    eax; DName *
  00409B5B: lea     eax, [ebp+var_28]
  00409B5E: push    28h ; '('; char
  00409B60: push    eax; DName *
  00409B61: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00409B66: add     esp, 0Ch
  00409B69: mov     ecx, eax; struct DName *
  00409B6B: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409B70: push    eax
  00409B71: lea     ecx, [ebp+var_8]
  00409B74: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409B79: push    0; int
  00409B7B: push    8; unsigned int
  00409B7D: mov     ecx, 41E04Ch; this
  00409B82: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  00409B87: test    eax, eax
  00409B89: jz      short loc_409B95
  00409B8B: and     dword ptr [eax], 0
  00409B8E: and     [eax+4], esi
  00409B91: mov     esi, eax
  00409B93: jmp     short loc_409B97
  00409B95: xor     esi, esi
  00409B97: lea     eax, [ebp+var_18]
  00409B9A: push    esi
  00409B9B: push    eax
  00409B9C: call    ?getReturnType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getReturnType(DName *)
  00409BA1: pop     ecx
  00409BA2: pop     ecx
  00409BA3: push    29h ; ')'; int
  00409BA5: lea     eax, [ebp+var_30]
  00409BA8: push    eax; DName *
  00409BA9: lea     eax, [ebp+var_28]
  00409BAC: push    eax
  00409BAD: call    ?getArgumentTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getArgumentTypes(void)
  00409BB2: push    eax; DName *
  00409BB3: lea     eax, [ebp+var_20]
  00409BB6: push    28h ; '('; char
  00409BB8: push    eax; DName *
  00409BB9: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00409BBE: add     esp, 10h
  00409BC1: mov     ecx, eax; struct DName *
  00409BC3: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409BC8: push    eax; DName *
  00409BC9: lea     ecx, [ebp+var_8]; this
  00409BCC: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00409BD1: mov     eax, ds:41E07Ch
  00409BD6: and     eax, 60h
  00409BD9: cmp     al, 60h ; '`'
  00409BDB: jz      short loc_409BED
  00409BDD: test    edi, edi
  00409BDF: jz      short loc_409BED
  00409BE1: lea     eax, [ebp+var_10]
  00409BE4: push    eax; DName *
  00409BE5: lea     ecx, [ebp+var_8]; this
  00409BE8: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00409BED: mov     eax, ds:41E07Ch
  00409BF2: shr     eax, 8
  00409BF5: not     eax
  00409BF7: test    al, 1
  00409BF9: lea     eax, [ebp+var_30]
  00409BFC: push    eax
  00409BFD: jz      short loc_409C10
  00409BFF: call    ?getThrowTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThrowTypes(void)
  00409C04: pop     ecx
  00409C05: push    eax; DName *
  00409C06: lea     ecx, [ebp+var_8]; this
  00409C09: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  00409C0E: jmp     short loc_409C1F
  00409C10: call    ?getThrowTypes@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getThrowTypes(void)
  00409C15: pop     ecx
  00409C16: push    eax; DName *
  00409C17: lea     ecx, [ebp+var_8]
  00409C1A: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00409C1F: test    esi, esi
  00409C21: jz      short loc_409C3C
  00409C23: lea     eax, [ebp+var_8]
  00409C26: push    eax
  00409C27: mov     ecx, esi
  00409C29: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409C2E: mov     ecx, [ebp+arg_0]; this
  00409C31: lea     eax, [ebp+var_18]
  00409C34: push    eax; struct DName *
  00409C35: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  00409C3A: jmp     short loc_409C46
  00409C3C: push    3
  00409C3E: mov     ecx, [ebp+arg_0]
  00409C41: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  00409C46: pop     edi
  00409C47: pop     esi
  00409C48: pop     ebx
  00409C49: mov     eax, [ebp+arg_0]
  00409C4C: leave
  00409C4D: retn

Function: ?getDataIndirectType@UnDecorator@@CA?AVDName@@ABV2@D0H@Z
  00409C4E: push    ebp
  00409C4F: mov     ebp, esp
  00409C51: sub     esp, 48h
  00409C54: mov     eax, ds:41E06Ch
  00409C59: mov     al, [eax]
  00409C5B: and     [ebp+var_10], 0
  00409C5F: push    ebx
  00409C60: push    esi
  00409C61: mov     esi, 0FFFFFE00h
  00409C66: and     [ebp+var_C], esi
  00409C69: test    al, al
  00409C6B: jz      loc_40A141
  00409C71: cmp     al, 24h ; '$'
  00409C73: jnz     loc_409D72
  00409C79: inc     dword ptr ds:41E06Ch
  00409C7F: mov     eax, ds:41E06Ch
  00409C84: movsx   eax, byte ptr [eax]
  00409C87: mov     ecx, eax
  00409C89: sub     ecx, 41h ; 'A'
  00409C8C: jz      loc_409D5F
  00409C92: dec     ecx
  00409C93: lea     ecx, [ebp+var_10]; this
  00409C96: jz      loc_409D58
  00409C9C: lea     esi, [eax+0FFFFFCDh]
  00409CA2: mov     eax, ds:41E06Ch
  00409CA7: movsx   eax, byte ptr [eax+1]
  00409CAB: add     dword ptr ds:41E06Ch, 2
  00409CB2: shl     esi, 4
  00409CB5: push    411A14h; char *
  00409CBA: add     esi, eax
  00409CBC: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00409CC1: cmp     esi, 1
  00409CC4: jbe     short loc_409CE4
  00409CC6: dec     esi
  00409CC7: push    41169Ch; char *
  00409CCC: lea     eax, [ebp+var_20]
  00409CCF: push    eax; DName *
  00409CD0: lea     ecx, [ebp+var_10]; struct DName *
  00409CD3: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00409CD8: push    eax
  00409CD9: lea     ecx, [ebp+var_10]
  00409CDC: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409CE1: dec     esi
  00409CE2: jnz     short loc_409CC7
  00409CE4: push    411A10h; char *
  00409CE9: lea     eax, [ebp+var_18]
  00409CEC: push    eax; DName *
  00409CED: lea     ecx, [ebp+var_10]; struct DName *
  00409CF0: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00409CF5: push    eax
  00409CF6: lea     ecx, [ebp+var_10]
  00409CF9: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409CFE: mov     ecx, [ebp+arg_4]; this
  00409D01: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409D06: test    eax, eax
  00409D08: jnz     short loc_409D4A
  00409D0A: test    byte ptr [ecx+4], 80h
  00409D0E: lea     eax, [ebp+var_10]
  00409D11: push    eax; DName *
  00409D12: jz      short loc_409D1A
  00409D14: lea     eax, [ebp+var_8]
  00409D17: push    eax
  00409D18: jmp     short loc_409D3C
  00409D1A: lea     eax, [ebp+var_28]
  00409D1D: push    eax; DName *
  00409D1E: push    29h ; ')'; int
  00409D20: lea     eax, [ebp+var_30]
  00409D23: push    eax; DName *
  00409D24: push    ecx; DName *
  00409D25: lea     eax, [ebp+var_38]
  00409D28: push    28h ; '('; char
  00409D2A: push    eax; DName *
  00409D2B: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  00409D30: add     esp, 0Ch
  00409D33: mov     ecx, eax; struct DName *
  00409D35: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409D3A: mov     ecx, eax; struct DName *
  00409D3C: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409D41: lea     ecx, [ebp+var_10]
  00409D44: push    eax
  00409D45: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409D4A: inc     dword ptr ds:41E06Ch
  00409D50: lea     eax, [ebp+var_10]
  00409D53: jmp     loc_40A132
  00409D58: push    411A08h
  00409D5D: jmp     short loc_409D67
  00409D5F: push    411A00h; char *
  00409D64: lea     ecx, [ebp+var_10]; this
  00409D67: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00409D6C: inc     dword ptr ds:41E06Ch
  00409D72: mov     eax, ds:41E06Ch
  00409D77: mov     al, [eax]
  00409D79: xor     ecx, ecx
  00409D7B: cmp     al, 41h ; 'A'
  00409D7D: setl    cl
  00409D80: and     [ebp+var_14], esi
  00409D83: and     [ebp+var_18], 0
  00409D87: and     [ebp+var_20], 0
  00409D8B: movsx   ebx, al
  00409D8E: dec     ecx
  00409D8F: and     ecx, 2Bh
  00409D92: add     ecx, 16h
  00409D95: sub     ebx, ecx
  00409D97: and     [ebp+var_1C], esi
  00409D9A: push    20h ; ' '
  00409D9C: pop     esi
  00409D9D: mov     eax, ebx
  00409D9F: sub     eax, 4
  00409DA2: jz      loc_409E5F
  00409DA8: dec     eax
  00409DA9: jz      short loc_409DE8
  00409DAB: sub     eax, 3
  00409DAE: jnz     loc_409EBF
  00409DB4: mov     eax, ds:41E07Ch
  00409DB9: shr     eax, 1
  00409DBB: not     eax
  00409DBD: test    al, 1
  00409DBF: jz      short loc_409E3A
  00409DC1: lea     ecx, [ebp+var_18]; this
  00409DC4: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409DC9: test    eax, eax
  00409DCB: push    8
  00409DCD: jnz     loc_409EB2
  00409DD3: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00409DD8: add     esp, 4
  00409DDB: push    eax
  00409DDC: lea     eax, [ebp+var_38]
  00409DDF: push    eax
  00409DE0: lea     eax, [ebp+var_30]
  00409DE3: jmp     loc_409E96
  00409DE8: mov     eax, ds:41E07Ch
  00409DED: shr     eax, 1
  00409DEF: not     eax
  00409DF1: test    al, 1
  00409DF3: jz      short loc_409E3A
  00409DF5: lea     ecx, [ebp+var_20]; this
  00409DF8: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409DFD: test    eax, eax
  00409DFF: push    9
  00409E01: jnz     short loc_409E29
  00409E03: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00409E08: add     esp, 4
  00409E0B: push    eax; char *
  00409E0C: lea     eax, [ebp+var_28]
  00409E0F: push    eax; DName *
  00409E10: push    esi; int
  00409E11: lea     eax, [ebp+var_8]
  00409E14: push    eax; DName *
  00409E15: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409E1A: mov     ecx, eax; struct DName *
  00409E1C: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00409E21: lea     ecx, [ebp+var_20]
  00409E24: jmp     loc_409EAA
  00409E29: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00409E2E: lea     ecx, [ebp+var_20]; this
  00409E31: add     esp, 4
  00409E34: push    eax; char *
  00409E35: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  00409E3A: inc     dword ptr ds:41E06Ch
  00409E40: mov     eax, ds:41E06Ch
  00409E45: mov     al, [eax]
  00409E47: xor     ecx, ecx
  00409E49: cmp     al, 41h ; 'A'
  00409E4B: setl    cl
  00409E4E: movsx   ebx, al
  00409E51: dec     ecx
  00409E52: and     ecx, 2Bh
  00409E55: add     ecx, 16h
  00409E58: sub     ebx, ecx
  00409E5A: jmp     loc_409D9D
  00409E5F: mov     eax, ds:41E07Ch
  00409E64: mov     ecx, eax
  00409E66: shr     ecx, 1
  00409E68: not     ecx
  00409E6A: test    cl, 1
  00409E6D: jz      short loc_409E3A
  00409E6F: shr     eax, 11h
  00409E72: not     eax
  00409E74: test    al, 1
  00409E76: jz      short loc_409E3A
  00409E78: lea     ecx, [ebp+var_18]; this
  00409E7B: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409E80: test    eax, eax
  00409E82: push    7
  00409E84: jnz     short loc_409EB2
  00409E86: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00409E8B: add     esp, 4
  00409E8E: push    eax; char *
  00409E8F: lea     eax, [ebp+var_40]
  00409E92: push    eax; DName *
  00409E93: lea     eax, [ebp+var_48]
  00409E96: push    esi; int
  00409E97: push    eax; DName *
  00409E98: lea     ecx, [ebp+var_18]; struct DName *
  00409E9B: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409EA0: mov     ecx, eax; struct DName *
  00409EA2: call    ??HDName@@QBE?AV0@PBD@Z; DName::operator+(char const *)
  00409EA7: lea     ecx, [ebp+var_18]
  00409EAA: push    eax
  00409EAB: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409EB0: jmp     short loc_409E3A
  00409EB2: call    ?UScore@UnDecorator@@SAPBDW4Tokens@@@Z; UnDecorator::UScore(Tokens)
  00409EB7: lea     ecx, [ebp+var_18]
  00409EBA: jmp     loc_409E31
  00409EBF: inc     dword ptr ds:41E06Ch
  00409EC5: cmp     ebx, 1Fh
  00409EC8: ja      loc_40A13D
  00409ECE: push    dword ptr [ebp+arg_8]; char
  00409ED1: lea     ecx, [ebp+var_8]; this
  00409ED4: call    ??0DName@@QAE@D@Z; DName::DName(char)
  00409ED9: lea     eax, [ebp+var_8]
  00409EDC: push    eax; DName *
  00409EDD: lea     eax, [ebp+var_48]
  00409EE0: push    eax; DName *
  00409EE1: lea     ecx, [ebp+var_10]; struct DName *
  00409EE4: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409EE9: push    eax
  00409EEA: lea     ecx, [ebp+var_8]
  00409EED: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409EF2: lea     ecx, [ebp+var_18]; this
  00409EF5: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409EFA: test    eax, eax
  00409EFC: jnz     short loc_409F23
  00409EFE: lea     eax, [ebp+var_18]
  00409F01: push    eax; DName *
  00409F02: lea     eax, [ebp+var_48]
  00409F05: push    eax; DName *
  00409F06: push    esi; int
  00409F07: lea     eax, [ebp+var_40]
  00409F0A: push    eax; DName *
  00409F0B: lea     ecx, [ebp+var_8]; struct DName *
  00409F0E: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409F13: mov     ecx, eax; struct DName *
  00409F15: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409F1A: push    eax
  00409F1B: lea     ecx, [ebp+var_8]
  00409F1E: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409F23: lea     ecx, [ebp+var_20]; this
  00409F26: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  00409F2B: test    eax, eax
  00409F2D: jnz     short loc_409F51
  00409F2F: lea     eax, [ebp+var_8]
  00409F32: push    eax; DName *
  00409F33: lea     eax, [ebp+var_48]
  00409F36: push    eax; DName *
  00409F37: push    esi; int
  00409F38: lea     eax, [ebp+var_40]
  00409F3B: push    eax; DName *
  00409F3C: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  00409F41: mov     ecx, eax; struct DName *
  00409F43: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409F48: push    eax
  00409F49: lea     ecx, [ebp+var_8]
  00409F4C: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409F51: test    bl, 10h
  00409F54: jz      loc_40A005
  00409F5A: cmp     [ebp+arg_10], 0
  00409F5E: jnz     loc_40A13D
  00409F64: cmp     [ebp+arg_8], 0
  00409F68: jz      short loc_409FC3
  00409F6A: lea     eax, [ebp+var_8]
  00409F6D: push    eax; DName *
  00409F6E: lea     eax, [ebp+var_48]
  00409F71: push    4118A8h; char *
  00409F76: push    eax; DName *
  00409F77: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  00409F7C: add     esp, 0Ch
  00409F7F: push    eax
  00409F80: lea     ecx, [ebp+var_8]
  00409F83: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409F88: mov     eax, ds:41E06Ch
  00409F8D: cmp     byte ptr [eax], 0
  00409F90: lea     eax, [ebp+var_8]
  00409F93: push    eax; DName *
  00409F94: lea     eax, [ebp+var_48]
  00409F97: jz      short loc_409FB6
  00409F99: push    eax; DName *
  00409F9A: lea     eax, [ebp+var_40]
  00409F9D: push    eax
  00409F9E: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  00409FA3: pop     ecx
  00409FA4: mov     ecx, eax; struct DName *
  00409FA6: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  00409FAB: push    eax
  00409FAC: lea     ecx, [ebp+var_8]
  00409FAF: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  00409FB4: jmp     short loc_409FE0
  00409FB6: push    2; int
  00409FB8: push    eax; DName *
  00409FB9: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  00409FBE: add     esp, 0Ch
  00409FC1: jmp     short loc_409FAB
  00409FC3: mov     eax, ds:41E06Ch
  00409FC8: cmp     byte ptr [eax], 0
  00409FCB: jz      short loc_409FEB
  00409FCD: lea     eax, [ebp+var_48]
  00409FD0: push    eax
  00409FD1: call    ?getScope@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getScope(void)
  00409FD6: pop     ecx
  00409FD7: push    eax; DName *
  00409FD8: lea     ecx, [ebp+var_8]
  00409FDB: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  00409FE0: mov     eax, ds:41E06Ch
  00409FE5: mov     al, [eax]
  00409FE7: test    al, al
  00409FE9: jnz     short loc_409FF7
  00409FEB: push    2
  00409FED: lea     ecx, [ebp+var_8]
  00409FF0: call    ??YDName@@QAEAAV0@W4DNameStatus@@@Z; DName::operator+=(DNameStatus)
  00409FF5: jmp     short loc_40A005
  00409FF7: inc     dword ptr ds:41E06Ch
  00409FFD: cmp     al, 40h ; '@'
  00409FFF: jnz     loc_40A13D
  0040A005: mov     eax, ds:41E07Ch
  0040A00A: shr     eax, 1
  0040A00C: not     eax
  0040A00E: test    al, 1
  0040A010: mov     eax, ebx
  0040A012: jz      short loc_40A049
  0040A014: and     eax, 0Ch
  0040A017: cmp     al, 0Ch
  0040A019: jnz     short loc_40A063
  0040A01B: cmp     [ebp+arg_10], 0
  0040A01F: jnz     loc_40A13D
  0040A025: lea     eax, [ebp+var_8]
  0040A028: push    eax; DName *
  0040A029: lea     eax, [ebp+var_48]
  0040A02C: push    eax; DName *
  0040A02D: lea     eax, [ebp+var_40]
  0040A030: push    eax
  0040A031: call    ?getBasedType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getBasedType(void)
  0040A036: pop     ecx
  0040A037: mov     ecx, eax; struct DName *
  0040A039: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  0040A03E: push    eax
  0040A03F: lea     ecx, [ebp+var_8]
  0040A042: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A047: jmp     short loc_40A063
  0040A049: and     eax, 0Ch
  0040A04C: cmp     al, 0Ch
  0040A04E: jnz     short loc_40A063
  0040A050: lea     eax, [ebp+var_48]
  0040A053: push    eax
  0040A054: call    ?getBasedType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getBasedType(void)
  0040A059: pop     ecx
  0040A05A: push    eax; DName *
  0040A05B: lea     ecx, [ebp+var_8]
  0040A05E: call    ??_5DName@@QAEAAV0@ABV0@@Z; DName::operator=|(DName const &)
  0040A063: test    bl, 2
  0040A066: jz      short loc_40A086
  0040A068: lea     eax, [ebp+var_8]
  0040A06B: push    eax; DName *
  0040A06C: lea     eax, [ebp+var_48]
  0040A06F: push    4119F4h; char *
  0040A074: push    eax; DName *
  0040A075: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040A07A: add     esp, 0Ch
  0040A07D: push    eax
  0040A07E: lea     ecx, [ebp+var_8]
  0040A081: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A086: test    bl, 1
  0040A089: jz      short loc_40A0A9
  0040A08B: lea     eax, [ebp+var_8]
  0040A08E: push    eax; DName *
  0040A08F: lea     eax, [ebp+var_48]
  0040A092: push    4119ECh; char *
  0040A097: push    eax; DName *
  0040A098: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040A09D: add     esp, 0Ch
  0040A0A0: push    eax
  0040A0A1: lea     ecx, [ebp+var_8]
  0040A0A4: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A0A9: cmp     [ebp+arg_10], 0
  0040A0AD: jnz     short loc_40A12B
  0040A0AF: mov     edx, [ebp+arg_4]
  0040A0B2: mov     ecx, edx; this
  0040A0B4: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A0B9: test    eax, eax
  0040A0BB: jnz     short loc_40A108
  0040A0BD: mov     ebx, [edx+4]
  0040A0C0: test    bl, 10h
  0040A0C3: jnz     short loc_40A0F9
  0040A0C5: mov     ecx, [ebp+arg_C]; this
  0040A0C8: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A0CD: test    eax, eax
  0040A0CF: jnz     short loc_40A0F9
  0040A0D1: push    edx; DName *
  0040A0D2: lea     eax, [ebp+var_48]
  0040A0D5: push    eax; DName *
  0040A0D6: push    esi; int
  0040A0D7: lea     eax, [ebp+var_40]
  0040A0DA: push    eax; DName *
  0040A0DB: push    ecx; DName *
  0040A0DC: lea     eax, [ebp+var_38]
  0040A0DF: push    esi; char
  0040A0E0: push    eax; DName *
  0040A0E1: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040A0E6: add     esp, 0Ch
  0040A0E9: mov     ecx, eax; struct DName *
  0040A0EB: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040A0F0: mov     ecx, eax; struct DName *
  0040A0F2: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  0040A0F7: jmp     short loc_40A122
  0040A0F9: test    bl, bl
  0040A0FB: push    edx
  0040A0FC: jns     short loc_40A115
  0040A0FE: lea     ecx, [ebp+var_8]
  0040A101: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A106: jmp     short loc_40A12B
  0040A108: mov     ecx, [ebp+arg_C]; this
  0040A10B: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A110: test    eax, eax
  0040A112: jnz     short loc_40A12B
  0040A114: push    ecx; DName *
  0040A115: lea     eax, [ebp+var_48]
  0040A118: push    esi; char
  0040A119: push    eax; DName *
  0040A11A: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040A11F: add     esp, 0Ch
  0040A122: lea     ecx, [ebp+var_8]; this
  0040A125: push    eax; DName *
  0040A126: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040A12B: or      [ebp+var_4], 10h
  0040A12F: lea     eax, [ebp+var_8]
  0040A132: mov     ecx, [ebp+arg_0]; this
  0040A135: push    eax; struct DName *
  0040A136: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040A13B: jmp     short loc_40A1B9
  0040A13D: push    1
  0040A13F: jmp     short loc_40A1B1
  0040A141: cmp     [ebp+arg_10], 0
  0040A145: jnz     short loc_40A1AF
  0040A147: mov     edx, [ebp+arg_4]
  0040A14A: mov     ecx, edx; this
  0040A14C: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A151: test    eax, eax
  0040A153: jnz     short loc_40A193
  0040A155: test    byte ptr [edx+4], 10h
  0040A159: jnz     short loc_40A190
  0040A15B: mov     ecx, [ebp+arg_C]; this
  0040A15E: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A163: test    eax, eax
  0040A165: jnz     short loc_40A190
  0040A167: push    edx; DName *
  0040A168: push    [ebp+arg_0]; DName *
  0040A16B: lea     eax, [ebp+var_48]
  0040A16E: push    20h ; ' '; int
  0040A170: push    eax; DName *
  0040A171: push    ecx; DName *
  0040A172: lea     eax, [ebp+var_40]
  0040A175: push    2; int
  0040A177: push    eax; DName *
  0040A178: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040A17D: add     esp, 0Ch
  0040A180: mov     ecx, eax; struct DName *
  0040A182: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040A187: mov     ecx, eax; struct DName *
  0040A189: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  0040A18E: jmp     short loc_40A1B9
  0040A190: push    edx
  0040A191: jmp     short loc_40A1A0
  0040A193: mov     ecx, [ebp+arg_C]; this
  0040A196: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A19B: test    eax, eax
  0040A19D: jnz     short loc_40A1AF
  0040A19F: push    ecx; DName *
  0040A1A0: push    2; int
  0040A1A2: push    [ebp+arg_0]; DName *
  0040A1A5: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040A1AA: add     esp, 0Ch
  0040A1AD: jmp     short loc_40A1B9
  0040A1AF: push    2
  0040A1B1: mov     ecx, [ebp+arg_0]
  0040A1B4: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040A1B9: mov     eax, [ebp+arg_0]
  0040A1BC: pop     esi
  0040A1BD: pop     ebx
  0040A1BE: leave
  0040A1BF: retn

Function: ??BUnDecorator@@QAEPADXZ
  0040A1C0: push    ebp
  0040A1C1: mov     ebp, esp
  0040A1C3: sub     esp, 20h
  0040A1C6: and     [ebp+var_8], 0
  0040A1CA: and     [ebp+var_10], 0
  0040A1CE: mov     eax, 0FFFFFE00h
  0040A1D3: and     [ebp+var_4], eax
  0040A1D6: and     [ebp+var_C], eax
  0040A1D9: mov     eax, ds:41E070h
  0040A1DE: test    eax, eax
  0040A1E0: jz      short loc_40A256
  0040A1E2: cmp     byte ptr [eax], 3Fh ; '?'
  0040A1E5: jnz     short loc_40A243
  0040A1E7: mov     al, [eax+1]
  0040A1EA: cmp     al, 40h ; '@'
  0040A1EC: jnz     short loc_40A212
  0040A1EE: add     dword ptr ds:41E06Ch, 2
  0040A1F5: lea     eax, [ebp+var_18]
  0040A1F8: push    eax
  0040A1F9: call    ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDecoratedName(void)
  0040A1FE: push    eax; DName *
  0040A1FF: lea     eax, [ebp+var_20]
  0040A202: push    411A1Ch; char *
  0040A207: push    eax; DName *
  0040A208: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040A20D: add     esp, 10h
  0040A210: jmp     short loc_40A24D
  0040A212: cmp     al, 24h ; '$'
  0040A214: jnz     short loc_40A243
  0040A216: lea     eax, [ebp+var_20]
  0040A219: push    0
  0040A21B: push    eax
  0040A21C: call    ?getTemplateName@UnDecorator@@CA?AVDName@@_N@Z; UnDecorator::getTemplateName(bool)
  0040A221: pop     ecx
  0040A222: pop     ecx
  0040A223: push    eax
  0040A224: lea     ecx, [ebp+var_8]
  0040A227: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A22C: mov     eax, [ebp+var_4]
  0040A22F: and     al, 0Fh
  0040A231: cmp     al, 1
  0040A233: jnz     short loc_40A256
  0040A235: mov     eax, ds:41E070h
  0040A23A: and     [ebp+var_4], 0FFFFFFF0h
  0040A23E: mov     ds:41E06Ch, eax
  0040A243: lea     eax, [ebp+var_20]
  0040A246: push    eax
  0040A247: call    ?getDecoratedName@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDecoratedName(void)
  0040A24C: pop     ecx
  0040A24D: lea     ecx, [ebp+var_8]
  0040A250: push    eax
  0040A251: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A256: mov     eax, [ebp+var_4]
  0040A259: shl     eax, 1Ch
  0040A25C: sar     eax, 1Ch
  0040A25F: cmp     eax, 3
  0040A262: jnz     short loc_40A268
  0040A264: xor     eax, eax
  0040A266: leave
  0040A267: retn
  0040A268: mov     ecx, ds:41E06Ch
  0040A26E: cmp     byte ptr [ecx], 0
  0040A271: jz      short loc_40A27C
  0040A273: test    byte ptr ds:41E07Dh, 10h
  0040A27A: jz      short loc_40A281
  0040A27C: cmp     eax, 1
  0040A27F: jnz     short loc_40A291
  0040A281: push    dword ptr ds:41E070h; char *
  0040A287: lea     ecx, [ebp+var_10]; this
  0040A28A: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040A28F: jmp     short loc_40A29D
  0040A291: lea     eax, [ebp+var_8]
  0040A294: push    eax
  0040A295: lea     ecx, [ebp+var_10]
  0040A298: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A29D: mov     eax, ds:41E074h
  0040A2A2: test    eax, eax
  0040A2A4: jnz     short loc_40A2CB
  0040A2A6: lea     ecx, [ebp+var_10]; this
  0040A2A9: call    ?length@DName@@QBEHXZ; DName::length(void)
  0040A2AE: inc     eax
  0040A2AF: mov     ds:41E078h, eax
  0040A2B4: add     eax, 7
  0040A2B7: and     eax, 0FFFFFFF8h
  0040A2BA: push    eax
  0040A2BB: call    dword ptr ds:41E04Ch
  0040A2C1: test    eax, eax
  0040A2C3: pop     ecx
  0040A2C4: mov     ds:41E074h, eax
  0040A2C9: jz      short locret_A309
  0040A2CB: push    dword ptr ds:41E078h; int
  0040A2D1: lea     ecx, [ebp+var_10]; this
  0040A2D4: push    eax; char *
  0040A2D5: call    ?getString@DName@@QBEPADPADH@Z; DName::getString(char *,int)
  0040A2DA: mov     eax, ds:41E074h
  0040A2DF: mov     edx, eax
  0040A2E1: jmp     short loc_40A2FA
  0040A2E3: cmp     cl, 20h ; ' '
  0040A2E6: jnz     short loc_40A2F6
  0040A2E8: inc     eax
  0040A2E9: mov     [edx], cl
  0040A2EB: inc     edx
  0040A2EC: jmp     short loc_40A2EF
  0040A2EE: inc     eax
  0040A2EF: cmp     byte ptr [eax], 20h ; ' '
  0040A2F2: jz      short loc_40A2EE
  0040A2F4: jmp     short loc_40A2FA
  0040A2F6: mov     [edx], cl
  0040A2F8: inc     edx
  0040A2F9: inc     eax
  0040A2FA: mov     cl, [eax]
  0040A2FC: test    cl, cl
  0040A2FE: jnz     short loc_40A2E3
  0040A300: mov     al, cl
  0040A302: mov     [edx], al
  0040A304: mov     eax, ds:41E074h
  0040A309: leave
  0040A30A: retn

Function: ?getPtrRefType@UnDecorator@@CA?AVDName@@ABV2@0D@Z
  0040A30B: push    ebp
  0040A30C: mov     ebp, esp
  0040A30E: push    ecx
  0040A30F: push    ecx
  0040A310: mov     eax, ds:41E06Ch
  0040A315: mov     al, [eax]
  0040A317: test    al, al
  0040A319: jz      loc_40A3B9
  0040A31F: cmp     al, 36h ; '6'
  0040A321: jl      short loc_40A327
  0040A323: cmp     al, 39h ; '9'
  0040A325: jle     short loc_40A32B
  0040A327: cmp     al, 5Fh ; '_'
  0040A329: jnz     short loc_40A38A
  0040A32B: push    esi
  0040A32C: push    dword ptr [ebp+arg_C]; char
  0040A32F: lea     ecx, [ebp+var_8]; this
  0040A332: call    ??0DName@@QAE@D@Z; DName::DName(char)
  0040A337: mov     ecx, [ebp+arg_4]; this
  0040A33A: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A33F: test    eax, eax
  0040A341: mov     esi, [ebp+arg_8]
  0040A344: jnz     short loc_40A362
  0040A346: mov     ecx, esi; this
  0040A348: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A34D: test    eax, eax
  0040A34F: jnz     short loc_40A357
  0040A351: test    byte ptr [esi+4], 10h
  0040A355: jnz     short loc_40A362
  0040A357: push    [ebp+arg_4]; DName *
  0040A35A: lea     ecx, [ebp+var_8]; this
  0040A35D: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040A362: mov     ecx, esi; this
  0040A364: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A369: test    eax, eax
  0040A36B: jnz     short loc_40A376
  0040A36D: push    esi; DName *
  0040A36E: lea     ecx, [ebp+var_8]; this
  0040A371: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040A376: lea     eax, [ebp+var_8]
  0040A379: push    eax
  0040A37A: push    [ebp+arg_0]
  0040A37D: call    ?getFunctionIndirectType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getFunctionIndirectType(DName const &)
  0040A382: pop     ecx
  0040A383: pop     ecx
  0040A384: pop     esi
  0040A385: jmp     loc_40A41C
  0040A38A: push    0
  0040A38C: push    [ebp+arg_4]
  0040A38F: lea     eax, [ebp+var_8]
  0040A392: push    dword ptr [ebp+arg_C]
  0040A395: push    [ebp+arg_8]
  0040A398: push    eax
  0040A399: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@ABV2@D0H@Z; UnDecorator::getDataIndirectType(DName const &,char,DName const &,int)
  0040A39E: xor     eax, eax
  0040A3A0: cmp     [ebp+arg_C], 2Ah ; '*'
  0040A3A4: setz    al
  0040A3A7: push    eax
  0040A3A8: lea     eax, [ebp+var_8]
  0040A3AB: push    eax
  0040A3AC: push    [ebp+arg_0]
  0040A3AF: call    ?getPtrRefDataType@UnDecorator@@CA?AVDName@@ABV2@H@Z; UnDecorator::getPtrRefDataType(DName const &,int)
  0040A3B4: add     esp, 20h
  0040A3B7: jmp     short loc_40A41C
  0040A3B9: push    2
  0040A3BB: lea     ecx, [ebp+var_8]
  0040A3BE: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040A3C3: push    dword ptr [ebp+arg_C]
  0040A3C6: lea     ecx, [ebp+var_8]
  0040A3C9: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  0040A3CE: mov     ecx, [ebp+arg_4]; this
  0040A3D1: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A3D6: test    eax, eax
  0040A3D8: jnz     short loc_40A3E3
  0040A3DA: push    ecx; DName *
  0040A3DB: lea     ecx, [ebp+var_8]; this
  0040A3DE: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040A3E3: mov     ecx, [ebp+arg_8]; this
  0040A3E6: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A3EB: test    eax, eax
  0040A3ED: jnz     short loc_40A410
  0040A3EF: mov     ecx, [ebp+arg_4]; this
  0040A3F2: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A3F7: test    eax, eax
  0040A3F9: jnz     short loc_40A405
  0040A3FB: push    20h ; ' '
  0040A3FD: lea     ecx, [ebp+var_8]
  0040A400: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  0040A405: push    [ebp+arg_8]; DName *
  0040A408: lea     ecx, [ebp+var_8]; this
  0040A40B: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040A410: mov     ecx, [ebp+arg_0]; this
  0040A413: lea     eax, [ebp+var_8]
  0040A416: push    eax; struct DName *
  0040A417: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040A41C: mov     eax, [ebp+arg_0]
  0040A41F: leave
  0040A420: retn

Function: ___unDName
  0040A421: push    ebp
  0040A422: mov     ebp, esp
  0040A424: sub     esp, 78h
  0040A427: mov     ecx, [ebp+arg_C]
  0040A42A: xor     eax, eax
  0040A42C: cmp     ecx, eax
  0040A42E: jnz     short loc_40A432
  0040A430: leave
  0040A431: retn
  0040A432: mov     ds:41E04Ch, ecx
  0040A438: mov     ecx, [ebp+arg_10]
  0040A43B: push    esi
  0040A43C: mov     ds:41E050h, ecx
  0040A442: movzx   ecx, [ebp+arg_14]
  0040A446: push    ecx; unsigned int
  0040A447: push    eax; char *(__cdecl *)(int)
  0040A448: push    [ebp+arg_8]; int
  0040A44B: lea     ecx, [ebp+var_78]; this
  0040A44E: push    [ebp+arg_4]; char *
  0040A451: mov     ds:41E05Ch, eax
  0040A456: push    [ebp+arg_0]; char *
  0040A459: mov     ds:41E054h, eax
  0040A45E: mov     ds:41E058h, eax
  0040A463: call    ??0UnDecorator@@QAE@PADPBDHP6APADJ@ZK@Z; UnDecorator::UnDecorator(char *,char const *,int,char * (*)(long),ulong)
  0040A468: lea     ecx, [ebp+var_78]
  0040A46B: call    ??BUnDecorator@@QAEPADXZ; UnDecorator::operator char *(void)
  0040A470: mov     ecx, 41E04Ch; this
  0040A475: mov     esi, eax
  0040A477: call    ?Destructor@HeapManager@@QAEXXZ; HeapManager::Destructor(void)
  0040A47C: mov     eax, esi
  0040A47E: pop     esi
  0040A47F: leave
  0040A480: retn

Function: ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z
  0040A481: push    ebp
  0040A482: mov     ebp, esp
  0040A484: sub     esp, 24h
  0040A487: mov     eax, ds:41E06Ch
  0040A48C: mov     al, [eax]
  0040A48E: test    al, al
  0040A490: push    ebx
  0040A491: push    esi
  0040A492: push    edi
  0040A493: jz      loc_40A7B8
  0040A499: inc     dword ptr ds:41E06Ch
  0040A49F: and     [ebp+var_C], 0
  0040A4A3: movzx   edi, al
  0040A4A6: mov     esi, 0FFFFFE00h
  0040A4AB: and     [ebp+var_8], esi
  0040A4AE: mov     eax, edi
  0040A4B0: or      ebx, 0FFFFFFFFh
  0040A4B3: cmp     eax, 4Dh ; 'M'
  0040A4B6: jg      short loc_40A4FB
  0040A4B8: jz      short loc_40A4F4
  0040A4BA: sub     eax, 43h ; 'C'; switch with an invalid jump table
  0040A4BD: cmp     eax, 8
  0040A4C0: ja      def_A4C6; jumptable 0040A4C6 default case
  0040A4C6: jmp     dword ptr [eax*4+40A7D0h]; switch jump
  0040A4CD: push    411ABCh; jumptable 0040A4C6 cases 67-69
  0040A4D2: lea     ecx, [ebp+var_C]; this
  0040A4D5: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040A4DA: jmp     loc_40A6BE
  0040A4DF: push    411AB4h; jumptable 0040A4C6 cases 70,71
  0040A4E4: jmp     short loc_40A4D2
  0040A4E6: push    411AB0h; jumptable 0040A4C6 cases 72,73
  0040A4EB: jmp     short loc_40A4D2
  0040A4ED: push    411AA8h; jumptable 0040A4C6 cases 74,75
  0040A4F2: jmp     short loc_40A4D2
  0040A4F4: push    411AA0h
  0040A4F9: jmp     short loc_40A4D2
  0040A4FB: cmp     eax, 4Eh ; 'N'
  0040A4FE: jz      loc_40A6A8
  0040A504: cmp     eax, 4Fh ; 'O'
  0040A507: jz      loc_40A69B
  0040A50D: jle     def_A4C6; jumptable 0040A4C6 default case
  0040A513: cmp     eax, 53h ; 'S'
  0040A516: jle     loc_40A68C
  0040A51C: cmp     eax, 5Fh ; '_'
  0040A51F: jnz     def_A4C6; jumptable 0040A4C6 default case
  0040A525: mov     eax, ds:41E06Ch
  0040A52A: mov     al, [eax]
  0040A52C: inc     dword ptr ds:41E06Ch
  0040A532: mov     [ebp+var_1], al
  0040A535: movzx   eax, al
  0040A538: cmp     eax, 4Dh ; 'M'
  0040A53B: jg      loc_40A5CA
  0040A541: cmp     eax, 4Ch ; 'L'
  0040A544: jge     short loc_40A5C0
  0040A546: cmp     eax, 47h ; 'G'
  0040A549: jg      short loc_40A59D
  0040A54B: cmp     eax, 46h ; 'F'
  0040A54E: jge     short loc_40A593
  0040A550: cmp     eax, 24h ; '$'
  0040A553: jz      short loc_40A571
  0040A555: cmp     eax, 43h ; 'C'
  0040A558: jle     loc_40A612
  0040A55E: cmp     eax, 45h ; 'E'
  0040A561: jg      loc_40A612
  0040A567: push    411A98h
  0040A56C: jmp     loc_40A4D2
  0040A571: push    [ebp+arg_4]
  0040A574: lea     eax, [ebp+var_1C]
  0040A577: push    eax
  0040A578: call    ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getBasicDataType(DName const &)
  0040A57D: push    eax; DName *
  0040A57E: push    411A90h; char *
  0040A583: push    [ebp+arg_0]; DName *
  0040A586: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040A58B: add     esp, 14h
  0040A58E: jmp     loc_40A7C8
  0040A593: push    411A88h
  0040A598: jmp     loc_40A4D2
  0040A59D: cmp     eax, 48h ; 'H'
  0040A5A0: jl      short loc_40A612
  0040A5A2: cmp     eax, 49h ; 'I'
  0040A5A5: jle     short loc_40A5B6
  0040A5A7: cmp     eax, 4Bh ; 'K'
  0040A5AA: jg      short loc_40A612
  0040A5AC: push    411A80h
  0040A5B1: jmp     loc_40A4D2
  0040A5B6: push    411A78h
  0040A5BB: jmp     loc_40A4D2
  0040A5C0: push    411A6Ch
  0040A5C5: jmp     loc_40A4D2
  0040A5CA: cmp     eax, 4Eh ; 'N'
  0040A5CD: jz      loc_40A682
  0040A5D3: cmp     eax, 4Fh ; 'O'
  0040A5D6: jz      short loc_40A626
  0040A5D8: cmp     eax, 57h ; 'W'
  0040A5DB: jz      short loc_40A61C
  0040A5DD: jle     short loc_40A612
  0040A5DF: cmp     eax, 59h ; 'Y'
  0040A5E2: jg      short loc_40A612
  0040A5E4: lea     eax, [ebp+var_14]
  0040A5E7: dec     dword ptr ds:41E06Ch
  0040A5ED: push    eax
  0040A5EE: call    ?getECSUDataType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getECSUDataType(void)
  0040A5F3: pop     ecx
  0040A5F4: push    eax
  0040A5F5: lea     ecx, [ebp+var_C]
  0040A5F8: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A5FD: lea     ecx, [ebp+var_C]; this
  0040A600: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A605: test    eax, eax
  0040A607: jz      loc_40A6BE
  0040A60D: lea     eax, [ebp+var_C]
  0040A610: jmp     short loc_40A674
  0040A612: push    411A64h
  0040A617: jmp     loc_40A4D2
  0040A61C: push    411A5Ch
  0040A621: jmp     loc_40A4D2
  0040A626: push    0FFFFFFFEh
  0040A628: pop     ebx
  0040A629: push    [ebp+arg_4]; struct DName *
  0040A62C: and     [ebp+var_C], 0
  0040A630: and     [ebp+var_8], esi
  0040A633: lea     ecx, [ebp+var_14]; this
  0040A636: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040A63B: cmp     ebx, 0FFFFFFFEh
  0040A63E: jnz     loc_40A75D
  0040A644: or      [ebp+var_10], 80h
  0040A648: push    0
  0040A64A: lea     eax, [ebp+var_14]
  0040A64D: push    eax
  0040A64E: lea     eax, [ebp+var_C]
  0040A651: push    eax
  0040A652: lea     eax, [ebp+var_1C]
  0040A655: push    eax
  0040A656: call    ?getPtrRefType@UnDecorator@@CA?AVDName@@ABV2@0D@Z; UnDecorator::getPtrRefType(DName const &,DName const &,char)
  0040A65B: add     esp, 10h
  0040A65E: test    [ebp+var_18], 80h
  0040A662: jnz     short loc_40A671
  0040A664: push    4116E4h; char *
  0040A669: lea     ecx, [ebp+var_1C]
  0040A66C: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  0040A671: lea     eax, [ebp+var_1C]
  0040A674: mov     ecx, [ebp+arg_0]; this
  0040A677: push    eax; struct DName *
  0040A678: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040A67D: jmp     loc_40A7C8
  0040A682: push    411A54h
  0040A687: jmp     loc_40A4D2
  0040A68C: mov     ebx, edi
  0040A68E: and     ebx, 3
  0040A691: jmp     short loc_40A6B5
  0040A693: lea     eax, [ebp+var_24]; jumptable 0040A4C6 default case
  0040A696: jmp     loc_40A5E7
  0040A69B: push    4117F4h; char *
  0040A6A0: lea     ecx, [ebp+var_C]; this
  0040A6A3: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040A6A8: push    411A4Ch; char *
  0040A6AD: lea     ecx, [ebp+var_C]
  0040A6B0: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  0040A6B5: cmp     ebx, 0FFFFFFFFh
  0040A6B8: jnz     loc_40A629
  0040A6BE: mov     eax, edi
  0040A6C0: sub     eax, 43h ; 'C'
  0040A6C3: jz      short loc_40A712
  0040A6C5: push    2
  0040A6C7: pop     ecx
  0040A6C8: sub     eax, ecx
  0040A6CA: jz      short loc_40A704
  0040A6CC: sub     eax, ecx
  0040A6CE: jz      short loc_40A704
  0040A6D0: sub     eax, ecx
  0040A6D2: jz      short loc_40A704
  0040A6D4: sub     eax, ecx
  0040A6D6: jz      short loc_40A704
  0040A6D8: sub     eax, 14h
  0040A6DB: jnz     short loc_40A730
  0040A6DD: movzx   eax, [ebp+var_1]
  0040A6E1: sub     eax, 45h ; 'E'
  0040A6E4: jz      short loc_40A6F6
  0040A6E6: sub     eax, ecx
  0040A6E8: jz      short loc_40A6F6
  0040A6EA: sub     eax, ecx
  0040A6EC: jz      short loc_40A6F6
  0040A6EE: sub     eax, ecx
  0040A6F0: jz      short loc_40A6F6
  0040A6F2: sub     eax, ecx
  0040A6F4: jnz     short loc_40A730
  0040A6F6: lea     eax, [ebp+var_C]
  0040A6F9: push    eax
  0040A6FA: push    4117E8h
  0040A6FF: lea     eax, [ebp+var_24]
  0040A702: jmp     short loc_40A71E
  0040A704: lea     eax, [ebp+var_C]
  0040A707: push    eax
  0040A708: push    4117E8h
  0040A70D: lea     eax, [ebp+var_1C]
  0040A710: jmp     short loc_40A71E
  0040A712: lea     eax, [ebp+var_C]
  0040A715: push    eax; DName *
  0040A716: push    411A44h; char *
  0040A71B: lea     eax, [ebp+var_14]
  0040A71E: push    eax; DName *
  0040A71F: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040A724: add     esp, 0Ch
  0040A727: lea     ecx, [ebp+var_C]
  0040A72A: push    eax
  0040A72B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A730: mov     ecx, [ebp+arg_4]; this
  0040A733: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A738: test    eax, eax
  0040A73A: jnz     loc_40A60D
  0040A740: push    ecx; DName *
  0040A741: lea     eax, [ebp+var_24]
  0040A744: push    20h ; ' '; char
  0040A746: push    eax; DName *
  0040A747: call    ??H@YA?AVDName@@DABV0@@Z; operator+(char,DName const &)
  0040A74C: add     esp, 0Ch
  0040A74F: push    eax; DName *
  0040A750: lea     ecx, [ebp+var_C]; this
  0040A753: call    ??YDName@@QAEAAV0@ABV0@@Z; DName::operator+=(DName const &)
  0040A758: jmp     loc_40A60D
  0040A75D: mov     ecx, [ebp+arg_4]; this
  0040A760: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A765: test    eax, eax
  0040A767: jz      short loc_40A7A1
  0040A769: test    bl, 1
  0040A76C: jz      short loc_40A78F
  0040A76E: push    411A3Ch; char *
  0040A773: lea     ecx, [ebp+var_C]; this
  0040A776: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040A77B: test    bl, 2
  0040A77E: jz      short loc_40A7A1
  0040A780: push    411A30h; char *
  0040A785: lea     ecx, [ebp+var_C]
  0040A788: call    ??YDName@@QAEAAV0@PBD@Z; DName::operator+=(char const *)
  0040A78D: jmp     short loc_40A7A1
  0040A78F: test    bl, 2
  0040A792: jz      short loc_40A7A1
  0040A794: push    411A24h; char *
  0040A799: lea     ecx, [ebp+var_C]; this
  0040A79C: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040A7A1: push    2Ah ; '*'
  0040A7A3: lea     eax, [ebp+var_14]
  0040A7A6: push    eax
  0040A7A7: lea     eax, [ebp+var_C]
  0040A7AA: push    eax
  0040A7AB: push    [ebp+arg_0]
  0040A7AE: call    ?getPtrRefType@UnDecorator@@CA?AVDName@@ABV2@0D@Z; UnDecorator::getPtrRefType(DName const &,DName const &,char)
  0040A7B3: add     esp, 10h
  0040A7B6: jmp     short loc_40A7C8
  0040A7B8: push    [ebp+arg_4]; DName *
  0040A7BB: push    2; int
  0040A7BD: push    [ebp+arg_0]; DName *
  0040A7C0: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040A7C5: add     esp, 0Ch
  0040A7C8: mov     eax, [ebp+arg_0]
  0040A7CB: pop     edi
  0040A7CC: pop     esi
  0040A7CD: pop     ebx
  0040A7CE: leave
  0040A7CF: retn

Function: ?getPrimaryDataType@UnDecorator@@CA?AVDName@@ABV2@@Z
  0040A7F4: push    ebp
  0040A7F5: mov     ebp, esp
  0040A7F7: sub     esp, 18h
  0040A7FA: push    esi
  0040A7FB: mov     esi, ds:41E06Ch
  0040A801: movsx   eax, byte ptr [esi]
  0040A804: xor     edx, edx
  0040A806: mov     ecx, 0FFFFFE00h
  0040A80B: and     [ebp+var_4], ecx
  0040A80E: sub     eax, edx
  0040A810: mov     [ebp+var_8], edx
  0040A813: jz      short loc_40A88C
  0040A815: sub     eax, 24h ; '$'
  0040A818: jz      short loc_40A881
  0040A81A: sub     eax, 1Dh
  0040A81D: jz      short loc_40A855
  0040A81F: dec     eax
  0040A820: jz      short loc_40A832
  0040A822: push    [ebp+arg_4]
  0040A825: push    [ebp+arg_0]
  0040A828: call    ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getBasicDataType(DName const &)
  0040A82D: jmp     loc_40A91D
  0040A832: push    411A24h; char *
  0040A837: lea     ecx, [ebp+var_8]; this
  0040A83A: call    ??4DName@@QAEAAV0@PBD@Z; DName::operator=(char const *)
  0040A83F: mov     ecx, [ebp+arg_4]; this
  0040A842: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A847: test    eax, eax
  0040A849: jnz     short loc_40A855
  0040A84B: push    20h ; ' '
  0040A84D: lea     ecx, [ebp+var_8]
  0040A850: call    ??YDName@@QAEAAV0@D@Z; DName::operator+=(char)
  0040A855: push    [ebp+arg_4]; struct DName *
  0040A858: lea     ecx, [ebp+var_10]; this
  0040A85B: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040A860: inc     dword ptr ds:41E06Ch
  0040A866: or      [ebp+var_C], 10h
  0040A86A: push    26h ; '&'
  0040A86C: lea     eax, [ebp+var_10]
  0040A86F: push    eax
  0040A870: lea     eax, [ebp+var_8]
  0040A873: push    eax
  0040A874: push    [ebp+arg_0]
  0040A877: call    ?getPtrRefType@UnDecorator@@CA?AVDName@@ABV2@0D@Z; UnDecorator::getPtrRefType(DName const &,DName const &,char)
  0040A87C: add     esp, 10h
  0040A87F: jmp     short loc_40A89C
  0040A881: mov     al, [esi+1]
  0040A884: cmp     al, 24h ; '$'
  0040A886: jz      short loc_40A8A2
  0040A888: cmp     al, dl
  0040A88A: jnz     short loc_40A8BC
  0040A88C: push    [ebp+arg_4]; DName *
  0040A88F: push    2; int
  0040A891: push    [ebp+arg_0]; DName *
  0040A894: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040A899: add     esp, 0Ch
  0040A89C: mov     eax, [ebp+arg_0]
  0040A89F: pop     esi
  0040A8A0: leave
  0040A8A1: retn
  0040A8A2: inc     esi
  0040A8A3: inc     esi
  0040A8A4: mov     ds:41E06Ch, esi
  0040A8AA: movsx   eax, byte ptr [esi]
  0040A8AD: sub     eax, edx
  0040A8AF: jz      short loc_40A88C
  0040A8B1: sub     eax, 41h ; 'A'
  0040A8B4: jz      short loc_40A90B
  0040A8B6: dec     eax
  0040A8B7: jz      short loc_40A8F5
  0040A8B9: dec     eax
  0040A8BA: jz      short loc_40A8C8
  0040A8BC: mov     ecx, [ebp+arg_0]
  0040A8BF: push    1
  0040A8C1: call    ??0DName@@QAE@W4DNameStatus@@@Z; DName::DName(DNameStatus)
  0040A8C6: jmp     short loc_40A89C
  0040A8C8: and     [ebp+var_C], ecx
  0040A8CB: push    edx
  0040A8CC: lea     eax, [ebp+var_10]
  0040A8CF: push    eax
  0040A8D0: push    edx
  0040A8D1: push    [ebp+arg_4]
  0040A8D4: lea     eax, [ebp+var_18]
  0040A8D7: inc     esi
  0040A8D8: push    eax
  0040A8D9: mov     ds:41E06Ch, esi
  0040A8DF: mov     [ebp+var_10], edx
  0040A8E2: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@ABV2@D0H@Z; UnDecorator::getDataIndirectType(DName const &,char,DName const &,int)
  0040A8E7: push    eax
  0040A8E8: push    [ebp+arg_0]
  0040A8EB: call    ?getBasicDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getBasicDataType(DName const &)
  0040A8F0: add     esp, 1Ch
  0040A8F3: jmp     short loc_40A89C
  0040A8F5: push    1
  0040A8F7: push    [ebp+arg_4]
  0040A8FA: inc     esi
  0040A8FB: push    [ebp+arg_0]
  0040A8FE: mov     ds:41E06Ch, esi
  0040A904: call    ?getPtrRefDataType@UnDecorator@@CA?AVDName@@ABV2@H@Z; UnDecorator::getPtrRefDataType(DName const &,int)
  0040A909: jmp     short loc_40A899
  0040A90B: push    [ebp+arg_4]
  0040A90E: inc     esi
  0040A90F: push    [ebp+arg_0]
  0040A912: mov     ds:41E06Ch, esi
  0040A918: call    ?getFunctionIndirectType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getFunctionIndirectType(DName const &)
  0040A91D: pop     ecx
  0040A91E: pop     ecx
  0040A91F: jmp     loc_40A89C

Function: ?getDataType@UnDecorator@@CA?AVDName@@PAV2@@Z
  0040A924: push    ebp
  0040A925: mov     ebp, esp
  0040A927: sub     esp, 18h
  0040A92A: push    [ebp+arg_4]; struct DName *
  0040A92D: lea     ecx, [ebp+var_8]; this
  0040A930: call    ??0DName@@QAE@PAV0@@Z; DName::DName(DName *)
  0040A935: mov     eax, ds:41E06Ch
  0040A93A: mov     al, [eax]
  0040A93C: xor     ecx, ecx
  0040A93E: cmp     al, cl
  0040A940: jz      short loc_40A9BC
  0040A942: cmp     al, 3Fh ; '?'
  0040A944: jz      short loc_40A97E
  0040A946: cmp     al, 58h ; 'X'
  0040A948: jnz     short loc_40A9AC
  0040A94A: inc     dword ptr ds:41E06Ch
  0040A950: lea     ecx, [ebp+var_8]; this
  0040A953: call    ?isEmpty@DName@@QBEHXZ; DName::isEmpty(void)
  0040A958: test    eax, eax
  0040A95A: jz      short loc_40A96B
  0040A95C: mov     ecx, [ebp+arg_0]; this
  0040A95F: push    411814h; char *
  0040A964: call    ??0DName@@QAE@PBD@Z; DName::DName(char const *)
  0040A969: jmp     short loc_40A9CD
  0040A96B: lea     eax, [ebp+var_8]
  0040A96E: push    eax; DName *
  0040A96F: push    411860h; char *
  0040A974: push    [ebp+arg_0]; DName *
  0040A977: call    ??H@YA?AVDName@@PBDABV0@@Z; operator+(char const *,DName const &)
  0040A97C: jmp     short loc_40A9CA
  0040A97E: inc     dword ptr ds:41E06Ch
  0040A984: and     [ebp+var_C], 0FE00h
  0040A98A: push    ecx
  0040A98B: lea     eax, [ebp+var_10]
  0040A98E: push    eax
  0040A98F: push    ecx
  0040A990: lea     eax, [ebp+var_8]
  0040A993: push    eax
  0040A994: lea     eax, [ebp+var_18]
  0040A997: push    eax
  0040A998: mov     [ebp+var_10], ecx
  0040A99B: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@ABV2@D0H@Z; UnDecorator::getDataIndirectType(DName const &,char,DName const &,int)
  0040A9A0: add     esp, 14h
  0040A9A3: push    eax
  0040A9A4: lea     ecx, [ebp+var_8]
  0040A9A7: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040A9AC: lea     eax, [ebp+var_8]
  0040A9AF: push    eax
  0040A9B0: push    [ebp+arg_0]
  0040A9B3: call    ?getPrimaryDataType@UnDecorator@@CA?AVDName@@ABV2@@Z; UnDecorator::getPrimaryDataType(DName const &)
  0040A9B8: pop     ecx
  0040A9B9: pop     ecx
  0040A9BA: jmp     short loc_40A9CD
  0040A9BC: lea     eax, [ebp+var_8]
  0040A9BF: push    eax; DName *
  0040A9C0: push    2; int
  0040A9C2: push    [ebp+arg_0]; DName *
  0040A9C5: call    ??H@YA?AVDName@@W4DNameStatus@@ABV0@@Z; operator+(DNameStatus,DName const &)
  0040A9CA: add     esp, 0Ch
  0040A9CD: mov     eax, [ebp+arg_0]
  0040A9D0: leave
  0040A9D1: retn

Function: ?getExternalDataType@UnDecorator@@CA?AVDName@@ABV2@@Z
  0040A9D2: push    ebp
  0040A9D3: mov     ebp, esp
  0040A9D5: sub     esp, 20h
  0040A9D8: push    esi
  0040A9D9: xor     esi, esi
  0040A9DB: push    esi; int
  0040A9DC: push    8; unsigned int
  0040A9DE: mov     ecx, 41E04Ch; this
  0040A9E3: call    ?getMemory@HeapManager@@QAEPAXIH@Z; HeapManager::getMemory(uint,int)
  0040A9E8: cmp     eax, esi
  0040A9EA: jz      short loc_40A9F6
  0040A9EC: and     word ptr [eax+4], 0FE00h
  0040A9F2: mov     [eax], esi
  0040A9F4: mov     esi, eax
  0040A9F6: lea     eax, [ebp+var_10]
  0040A9F9: push    esi
  0040A9FA: push    eax
  0040A9FB: call    ?getDataType@UnDecorator@@CA?AVDName@@PAV2@@Z; UnDecorator::getDataType(DName *)
  0040AA00: lea     eax, [ebp+var_8]
  0040AA03: push    eax
  0040AA04: call    ?getDataIndirectType@UnDecorator@@CA?AVDName@@XZ; UnDecorator::getDataIndirectType(void)
  0040AA09: add     esp, 0Ch
  0040AA0C: push    [ebp+arg_4]; DName *
  0040AA0F: lea     eax, [ebp+var_18]
  0040AA12: push    eax; DName *
  0040AA13: push    20h ; ' '; int
  0040AA15: lea     eax, [ebp+var_20]
  0040AA18: push    eax; DName *
  0040AA19: lea     ecx, [ebp+var_8]; struct DName *
  0040AA1C: call    ??HDName@@QBE?AV0@D@Z; DName::operator+(char)
  0040AA21: mov     ecx, eax; struct DName *
  0040AA23: call    ??HDName@@QBE?AV0@ABV0@@Z; DName::operator+(DName const &)
  0040AA28: push    eax
  0040AA29: mov     ecx, esi
  0040AA2B: call    ??4DName@@QAEAAV0@ABV0@@Z; DName::operator=(DName const &)
  0040AA30: mov     ecx, [ebp+arg_0]; this
  0040AA33: lea     eax, [ebp+var_10]
  0040AA36: push    eax; struct DName *
  0040AA37: call    ??0DName@@QAE@ABV0@@Z; DName::DName(DName const &)
  0040AA3C: mov     eax, [ebp+arg_0]
  0040AA3F: pop     esi
  0040AA40: leave
  0040AA41: retn

Function: __heap_alloc
  0040AA42: cmp     dword ptr ds:41E680h, 3
  0040AA49: push    esi
  0040AA4A: mov     esi, [esp+4+dwBytes]
  0040AA4E: jnz     short loc_40AA63
  0040AA50: cmp     esi, ds:41E66Ch
  0040AA56: ja      short loc_40AA63
  0040AA58: push    esi
  0040AA59: call    ___sbh_alloc_block
  0040AA5E: test    eax, eax
  0040AA60: pop     ecx
  0040AA61: jnz     short loc_40AA86
  0040AA63: test    esi, esi
  0040AA65: jnz     short loc_40AA68
  0040AA67: inc     esi
  0040AA68: cmp     dword ptr ds:41E680h, 1
  0040AA6F: jz      short loc_40AA77
  0040AA71: add     esi, 0Fh
  0040AA74: and     esi, 0FFFFFFF0h
  0040AA77: push    esi; dwBytes
  0040AA78: push    0; dwFlags
  0040AA7A: push    dword ptr ds:41E67Ch; hHeap
  0040AA80: call    dword ptr ds:411050h
  0040AA86: pop     esi
  0040AA87: retn

Function: __nh_malloc
  0040AA88: cmp     [esp+Size], 0FFFFFFE0h
  0040AA8D: ja      short loc_40AAB1
  0040AA8F: push    [esp+Size]; dwBytes
  0040AA93: call    __heap_alloc
  0040AA98: test    eax, eax
  0040AA9A: pop     ecx
  0040AA9B: jnz     short locret_AAB3
  0040AA9D: cmp     [esp+arg_4], eax
  0040AAA1: jz      short locret_AAB3
  0040AAA3: push    [esp+Size]; Size
  0040AAA7: call    __callnewh
  0040AAAC: test    eax, eax
  0040AAAE: pop     ecx
  0040AAAF: jnz     short loc_40AA8F
  0040AAB1: xor     eax, eax
  0040AAB3: retn

Function: _malloc
  0040AAB4: push    dword ptr ds:41E254h; int
  0040AABA: push    [esp+4+Size]; Size
  0040AABE: call    __nh_malloc
  0040AAC3: pop     ecx
  0040AAC4: pop     ecx
  0040AAC5: retn

Function: __trandisp1
  0040AAD0: cmp     byte ptr [edx+0Eh], 5
  0040AAD4: jnz     short loc_40AAE7
  0040AAD6: mov     bx, [ebp-0A4h]
  0040AADD: or      bh, 2
  0040AAE0: and     bh, 0FEh
  0040AAE3: mov     bl, 3Fh ; '?'
  0040AAE5: jmp     short loc_40AAEB
  0040AAE7: mov     bx, 133Fh
  0040AAEB: mov     [ebp-0A2h], bx
  0040AAF2: fldcw   word ptr [ebp-0A2h]
  0040AAF8: mov     ebx, 41322Dh
  0040AAFD: fxam
  0040AAFF: mov     [ebp-94h], edx
  0040AB05: fstsw   word ptr [ebp-0A0h]
  0040AB0C: mov     byte ptr [ebp-90h], 0
  0040AB13: wait
  0040AB14: mov     cl, [ebp-9Fh]
  0040AB1A: shl     cl, 1
  0040AB1C: sar     cl, 1
  0040AB1E: rol     cl, 1
  0040AB20: mov     al, cl
  0040AB22: and     al, 0Fh
  0040AB24: xlat
  0040AB25: movsx   eax, al
  0040AB28: and     ecx, 404h
  0040AB2E: mov     ebx, edx
  0040AB30: add     ebx, eax
  0040AB32: add     ebx, 10h
  0040AB35: jmp     dword ptr [ebx]

Function: __rttosnpop
  0040ABCC: retn

Function: __rttosnpopde
  0040AC89: mov     byte ptr [ebp-90h], 1
  0040AC90: or      cl, cl
  0040AC92: retn

Function: chsifnegret
  0040AC99: retn

Function: __twoToTOS
  0040ACA0: fld     st
  0040ACA2: frndint
  0040ACA4: fsubr   st(1), st
  0040ACA6: fxch    st(1)
  0040ACA8: fchs
  0040ACAA: f2xm1
  0040ACAC: fld1
  0040ACAE: faddp   st(1), st
  0040ACB0: fscale
  0040ACB2: fstp    st(1)
  0040ACB4: retn

Function: __convertTOStoQNaN
  0040ACCC: test    eax, 80000h
  0040ACD1: jz      short tosIsSNaN
  0040ACD3: mov     eax, 7
  0040ACD8: retn
  0040ACD9: fadd    qword ptr ds:411AD0h
  0040ACDF: mov     eax, 1
  0040ACE4: retn

Function: __fload_withFB
  0040ACE5: mov     eax, [edx+4]
  0040ACE8: and     eax, 7FF00000h
  0040ACED: cmp     eax, 7FF00000h
  0040ACF2: jz      short fpload_special
  0040ACF4: fld     qword ptr [edx]
  0040ACF6: retn
  0040ACF7: mov     eax, [edx+4]
  0040ACFA: sub     esp, 0Ah
  0040ACFD: or      eax, 7FFF0000h
  0040AD02: mov     dword ptr [esp+0Ah+var_A+6], eax
  0040AD06: mov     eax, [edx+4]
  0040AD09: mov     ecx, [edx]
  0040AD0B: shld    eax, ecx, 0Bh
  0040AD0F: shl     ecx, 0Bh
  0040AD12: mov     dword ptr [esp+0Ah+var_A+4], eax
  0040AD16: mov     dword ptr [esp+0Ah+var_A], ecx
  0040AD19: fld     [esp+0Ah+var_A]
  0040AD1C: add     esp, 0Ah
  0040AD1F: test    eax, 0
  0040AD24: mov     eax, [edx+4]
  0040AD27: retn

Function: __checkTOS_withFB
  0040AD28: mov     eax, [esp+arg_4]
  0040AD2C: and     eax, 7FF00000h
  0040AD31: cmp     eax, 7FF00000h
  0040AD36: jz      short special_exp
  0040AD38: retn
  0040AD39: mov     eax, [esp+arg_4]
  0040AD3D: retn

Function: __check_overflow_exit
  0040AD75: sub     esp, 8
  0040AD78: fst     [esp+8+var_8]
  0040AD7B: mov     eax, dword ptr [esp+8+var_8+4]
  0040AD7F: add     esp, 8
  0040AD82: and     eax, 7FF00000h
  0040AD87: jmp     short _check_overflow_start
  0040AD89: sub     esp, 8
  0040AD8C: fst     [esp+8+var_8]
  0040AD8F: mov     eax, dword ptr [esp+8+var_8+4]
  0040AD93: add     esp, 8
  0040AD96: and     eax, 7FF00000h
  0040AD9B: jz      short haveunderflow
  0040AD9D: cmp     eax, 7FF00000h
  0040ADA2: jz      short haveoverflow
  0040ADA4: mov     ax, [esp+0]
  0040ADA8: cmp     ax, 27Fh
  0040ADAC: jz      short loc_40ADD8
  0040ADAE: and     ax, 20h
  0040ADB2: jnz     short loc_40ADD5
  0040ADB4: fstsw   ax
  0040ADB7: and     ax, 20h
  0040ADBB: jz      short loc_40ADD5
  0040ADBD: mov     eax, 8
  0040ADC2: cmp     edx, 1Dh
  0040ADC5: jz      short have_error_in_pow
  0040ADC7: call    __startOneArgErrorHandling
  0040ADCC: pop     edx
  0040ADCD: retn
  0040ADCE: call    __startTwoArgErrorHandling
  0040ADD3: pop     edx
  0040ADD4: retn
  0040ADD5: fldcw   word ptr [esp+0]
  0040ADD8: pop     edx
  0040ADD9: retn
  0040ADDA: fld     qword ptr ds:411AFCh
  0040ADE0: fxch    st(1)
  0040ADE2: fscale
  0040ADE4: fstp    st(1)
  0040ADE6: fld     st
  0040ADE8: fabs
  0040ADEA: fcomp   qword ptr ds:411AECh
  0040ADF0: fstsw   ax
  0040ADF3: sahf
  0040ADF4: mov     eax, 4
  0040ADF9: jnb     short have_error
  0040ADFB: fmul    qword ptr ds:411B0Ch
  0040AE01: jmp     short have_error
  0040AE03: fld     qword ptr ds:411AF4h
  0040AE09: fxch    st(1)
  0040AE0B: fscale
  0040AE0D: fstp    st(1)
  0040AE0F: fld     st
  0040AE11: fabs
  0040AE13: fcomp   qword ptr ds:411AE4h
  0040AE19: fstsw   ax
  0040AE1C: sahf
  0040AE1D: mov     eax, 3
  0040AE22: jbe     short have_error
  0040AE24: fmul    qword ptr ds:411B04h
  0040AE2A: jmp     short have_error

Function: __startTwoArgErrorHandling
  0040AE30: push    ebp
  0040AE31: mov     ebp, esp
  0040AE33: add     esp, 0FFFFFFE0h
  0040AE36: mov     [ebp+var_20], eax
  0040AE39: mov     eax, [ebp+arg_10]
  0040AE3C: mov     [ebp+var_10], eax
  0040AE3F: mov     eax, [ebp+arg_14]
  0040AE42: mov     [ebp+var_C], eax
  0040AE45: jmp     short _ContinueErrorHandling

Function: __startOneArgErrorHandling
  0040AE47: push    ebp
  0040AE48: mov     ebp, esp
  0040AE4A: add     esp, 0FFFFFFE0h
  0040AE4D: mov     [ebp+var_20], eax
  0040AE50: fstp    [ebp+var_8]
  0040AE53: mov     [ebp+var_1C], ecx
  0040AE56: mov     eax, [ebp+arg_8]
  0040AE59: mov     ecx, [ebp+arg_C]
  0040AE5C: mov     [ebp+var_18], eax
  0040AE5F: mov     [ebp+var_14], ecx
  0040AE62: lea     eax, [ebp+arg_0]
  0040AE65: lea     ecx, [ebp+var_20]
  0040AE68: push    eax
  0040AE69: push    ecx
  0040AE6A: push    edx
  0040AE6B: call    __87except
  0040AE70: add     esp, 0Ch
  0040AE73: fld     [ebp+var_8]
  0040AE76: cmp     [ebp+arg_0], 27Fh
  0040AE7C: jz      short CW_is_restored_0
  0040AE7E: fldcw   [ebp+arg_0]
  0040AE81: leave
  0040AE82: retn

Function: __forcdecpt
  0040AE83: push    esi
  0040AE84: mov     esi, [esp+4+arg_0]
  0040AE88: movsx   eax, byte ptr [esi]
  0040AE8B: push    eax; C
  0040AE8C: call    _tolower
  0040AE91: cmp     eax, 65h ; 'e'
  0040AE94: pop     ecx
  0040AE95: jz      short loc_40AEC1
  0040AE97: inc     esi
  0040AE98: cmp     dword ptr ds:4133A0h, 1
  0040AE9F: movsx   eax, byte ptr [esi]
  0040AEA2: jle     short loc_40AEB0
  0040AEA4: push    4; Type
  0040AEA6: push    eax; C
  0040AEA7: call    __isctype
  0040AEAC: pop     ecx
  0040AEAD: pop     ecx
  0040AEAE: jmp     short loc_40AEBD
  0040AEB0: mov     ecx, ds:4133ACh
  0040AEB6: movzx   eax, byte ptr [ecx+eax*2]
  0040AEBA: and     eax, 4
  0040AEBD: test    eax, eax
  0040AEBF: jnz     short loc_40AE97
  0040AEC1: mov     al, [esi]
  0040AEC3: mov     cl, ds:4133A4h
  0040AEC9: mov     [esi], cl
  0040AECB: inc     esi
  0040AECC: mov     cl, [esi]
  0040AECE: mov     [esi], al
  0040AED0: mov     al, cl
  0040AED2: mov     cl, [esi]
  0040AED4: inc     esi
  0040AED5: test    cl, cl
  0040AED7: jnz     short loc_40AECC
  0040AED9: pop     esi
  0040AEDA: retn

Function: __cropzeros
  0040AEDB: mov     eax, [esp+arg_0]
  0040AEDF: push    ebx
  0040AEE0: mov     bl, ds:4133A4h
  0040AEE6: jmp     short loc_40AEED
  0040AEE8: cmp     cl, bl
  0040AEEA: jz      short loc_40AEF3
  0040AEEC: inc     eax
  0040AEED: mov     cl, [eax]
  0040AEEF: test    cl, cl
  0040AEF1: jnz     short loc_40AEE8
  0040AEF3: mov     cl, [eax]
  0040AEF5: inc     eax
  0040AEF6: test    cl, cl
  0040AEF8: jz      short loc_40AF24
  0040AEFA: jmp     short loc_40AF07
  0040AEFC: cmp     cl, 65h ; 'e'
  0040AEFF: jz      short loc_40AF0D
  0040AF01: cmp     cl, 45h ; 'E'
  0040AF04: jz      short loc_40AF0D
  0040AF06: inc     eax
  0040AF07: mov     cl, [eax]
  0040AF09: test    cl, cl
  0040AF0B: jnz     short loc_40AEFC
  0040AF0D: mov     edx, eax
  0040AF0F: dec     eax
  0040AF10: cmp     byte ptr [eax], 30h ; '0'
  0040AF13: jz      short loc_40AF0F
  0040AF15: cmp     [eax], bl
  0040AF17: jnz     short loc_40AF1A
  0040AF19: dec     eax
  0040AF1A: mov     cl, [edx]
  0040AF1C: inc     eax
  0040AF1D: inc     edx
  0040AF1E: test    cl, cl
  0040AF20: mov     [eax], cl
  0040AF22: jnz     short loc_40AF1A
  0040AF24: pop     ebx
  0040AF25: retn

Function: __positive
  0040AF26: mov     eax, [esp+arg_0]
  0040AF2A: fld     qword ptr [eax]
  0040AF2C: fcomp   qword ptr ds:411120h
  0040AF32: fnstsw  ax
  0040AF34: test    ah, 1
  0040AF37: jnz     short loc_40AF3D
  0040AF39: xor     eax, eax
  0040AF3B: inc     eax
  0040AF3C: retn
  0040AF3D: xor     eax, eax
  0040AF3F: retn

Function: __fassign
  0040AF40: push    ebp
  0040AF41: mov     ebp, esp
  0040AF43: push    ecx
  0040AF44: push    ecx
  0040AF45: cmp     [ebp+arg_0], 0
  0040AF49: push    [ebp+arg_8]
  0040AF4C: jz      short loc_40AF69
  0040AF4E: lea     eax, [ebp+var_8]
  0040AF51: push    eax
  0040AF52: call    sub_40D4F6
  0040AF57: mov     eax, [ebp+arg_4]
  0040AF5A: pop     ecx
  0040AF5B: pop     ecx
  0040AF5C: mov     ecx, [ebp+var_8]
  0040AF5F: mov     [eax], ecx
  0040AF61: mov     ecx, [ebp+var_4]
  0040AF64: mov     [eax+4], ecx
  0040AF67: leave
  0040AF68: retn
  0040AF69: lea     eax, [ebp+arg_0]
  0040AF6C: push    eax
  0040AF6D: call    sub_40D533
  0040AF72: mov     eax, [ebp+arg_4]
  0040AF75: pop     ecx
  0040AF76: pop     ecx
  0040AF77: mov     ecx, [ebp+arg_0]
  0040AF7A: mov     [eax], ecx
  0040AF7C: leave
  0040AF7D: retn

Function: __shift
  0040AF7E: test    edi, edi
  0040AF80: push    esi
  0040AF81: mov     esi, eax
  0040AF83: jz      short loc_40AF99
  0040AF85: push    esi; Str
  0040AF86: call    _strlen
  0040AF8B: inc     eax
  0040AF8C: push    eax; Size
  0040AF8D: push    esi; Src
  0040AF8E: add     esi, edi
  0040AF90: push    esi; void *
  0040AF91: call    _memcpy_0
  0040AF96: add     esp, 10h
  0040AF99: pop     esi
  0040AF9A: retn

Function: __cftoe
  0040AF9B: push    ebp
  0040AF9C: mov     ebp, esp
  0040AF9E: cmp     byte ptr ds:41E08Ch, 0
  0040AFA5: push    ebx
  0040AFA6: push    esi
  0040AFA7: push    edi
  0040AFA8: jz      short loc_40AFD1
  0040AFAA: mov     ebx, [ebp+arg_8]
  0040AFAD: mov     eax, ds:41E088h
  0040AFB2: xor     ecx, ecx
  0040AFB4: test    ebx, ebx
  0040AFB6: setnle  cl
  0040AFB9: xor     edx, edx
  0040AFBB: cmp     dword ptr [eax], 2Dh ; '-'
  0040AFBE: mov     esi, eax
  0040AFC0: setz    dl
  0040AFC3: mov     edi, ecx
  0040AFC5: add     edx, [ebp+arg_4]
  0040AFC8: mov     eax, edx
  0040AFCA: call    __shift
  0040AFCF: jmp     short loc_40B005
  0040AFD1: mov     eax, [ebp+arg_0]
  0040AFD4: push    dword ptr [eax+4]
  0040AFD7: push    dword ptr [eax]
  0040AFD9: call    __fltout
  0040AFDE: mov     ebx, [ebp+arg_8]
  0040AFE1: mov     esi, eax
  0040AFE3: push    esi; int
  0040AFE4: lea     eax, [ebx+1]
  0040AFE7: push    eax; int
  0040AFE8: xor     eax, eax
  0040AFEA: cmp     dword ptr [esi], 2Dh ; '-'
  0040AFED: setz    al
  0040AFF0: xor     ecx, ecx
  0040AFF2: test    ebx, ebx
  0040AFF4: setnle  cl
  0040AFF7: add     eax, [ebp+arg_4]
  0040AFFA: add     ecx, eax
  0040AFFC: push    ecx; void *
  0040AFFD: call    __fptostr
  0040B002: add     esp, 14h
  0040B005: cmp     dword ptr [esi], 2Dh ; '-'
  0040B008: mov     eax, [ebp+arg_4]
  0040B00B: jnz     short loc_40B011
  0040B00D: mov     byte ptr [eax], 2Dh ; '-'
  0040B010: inc     eax
  0040B011: test    ebx, ebx
  0040B013: jle     short loc_40B026
  0040B015: lea     edi, [eax+1]
  0040B018: mov     cl, [edi]
  0040B01A: mov     [eax], cl
  0040B01C: mov     cl, ds:4133A4h
  0040B022: mov     eax, edi
  0040B024: mov     [eax], cl
  0040B026: xor     ecx, ecx
  0040B028: cmp     ds:41E08Ch, cl
  0040B02E: push    411B14h; Source
  0040B033: setz    cl
  0040B036: add     ecx, eax
  0040B038: add     ecx, ebx
  0040B03A: push    ecx; Destination
  0040B03B: call    _strcpy
  0040B040: cmp     [ebp+arg_C], 0
  0040B044: pop     ecx
  0040B045: pop     ecx
  0040B046: mov     ecx, eax
  0040B048: jz      short loc_40B04D
  0040B04A: mov     byte ptr [ecx], 45h ; 'E'
  0040B04D: mov     eax, [esi+0Ch]
  0040B050: inc     ecx
  0040B051: cmp     byte ptr [eax], 30h ; '0'
  0040B054: jz      short loc_40B084
  0040B056: mov     eax, [esi+4]
  0040B059: dec     eax
  0040B05A: jns     short loc_40B061
  0040B05C: neg     eax
  0040B05E: mov     byte ptr [ecx], 2Dh ; '-'
  0040B061: inc     ecx
  0040B062: cmp     eax, 64h ; 'd'
  0040B065: jl      short loc_40B071
  0040B067: cdq
  0040B068: push    64h ; 'd'
  0040B06A: pop     esi
  0040B06B: idiv    esi
  0040B06D: add     [ecx], al
  0040B06F: mov     eax, edx
  0040B071: inc     ecx
  0040B072: cmp     eax, 0Ah
  0040B075: jl      short loc_40B081
  0040B077: cdq
  0040B078: push    0Ah
  0040B07A: pop     esi
  0040B07B: idiv    esi
  0040B07D: add     [ecx], al
  0040B07F: mov     eax, edx
  0040B081: add     [ecx+1], al
  0040B084: mov     eax, [ebp+arg_4]
  0040B087: pop     edi
  0040B088: pop     esi
  0040B089: pop     ebx
  0040B08A: pop     ebp
  0040B08B: retn

Function: __cftof
  0040B08C: cmp     byte ptr ds:41E08Ch, 0
  0040B093: push    ebx
  0040B094: mov     ebx, [esp+4+arg_4]
  0040B098: push    ebp
  0040B099: push    esi
  0040B09A: push    edi
  0040B09B: jz      short loc_40B0C5
  0040B09D: mov     eax, ds:41E090h
  0040B0A2: cmp     eax, [esp+10h+Size]
  0040B0A6: mov     esi, ds:41E088h
  0040B0AC: jnz     short loc_40B0F1
  0040B0AE: xor     ecx, ecx
  0040B0B0: cmp     dword ptr [esi], 2Dh ; '-'
  0040B0B3: setz    cl
  0040B0B6: add     ecx, eax
  0040B0B8: add     ecx, ebx
  0040B0BA: mov     eax, ecx
  0040B0BC: mov     byte ptr [eax], 30h ; '0'
  0040B0BF: mov     byte ptr [eax+1], 0
  0040B0C3: jmp     short loc_40B0F1
  0040B0C5: mov     eax, [esp+10h+arg_0]
  0040B0C9: push    dword ptr [eax+4]
  0040B0CC: push    dword ptr [eax]
  0040B0CE: call    __fltout
  0040B0D3: mov     esi, eax
  0040B0D5: mov     eax, [esi+4]
  0040B0D8: add     eax, [esp+18h+Size]
  0040B0DC: push    esi; int
  0040B0DD: push    eax; int
  0040B0DE: xor     eax, eax
  0040B0E0: cmp     dword ptr [esi], 2Dh ; '-'
  0040B0E3: setz    al
  0040B0E6: add     eax, ebx
  0040B0E8: push    eax; void *
  0040B0E9: call    __fptostr
  0040B0EE: add     esp, 14h
  0040B0F1: cmp     dword ptr [esi], 2Dh ; '-'
  0040B0F4: mov     ebp, ebx
  0040B0F6: jnz     short loc_40B0FE
  0040B0F8: mov     byte ptr [ebx], 2Dh ; '-'
  0040B0FB: lea     ebp, [ebx+1]
  0040B0FE: mov     eax, [esi+4]
  0040B101: xor     edi, edi
  0040B103: inc     edi
  0040B104: test    eax, eax
  0040B106: jg      short loc_40B116
  0040B108: mov     eax, ebp
  0040B10A: call    __shift
  0040B10F: mov     byte ptr [ebp+0], 30h ; '0'
  0040B113: inc     ebp
  0040B114: jmp     short loc_40B118
  0040B116: add     ebp, eax
  0040B118: cmp     [esp+10h+Size], 0
  0040B11D: jle     short loc_40B162
  0040B11F: mov     eax, ebp
  0040B121: call    __shift
  0040B126: mov     al, ds:4133A4h
  0040B12B: mov     [ebp+0], al
  0040B12E: mov     esi, [esi+4]
  0040B131: inc     ebp
  0040B132: test    esi, esi
  0040B134: jge     short loc_40B162
  0040B136: neg     esi
  0040B138: cmp     byte ptr ds:41E08Ch, 0
  0040B13F: jnz     short loc_40B147
  0040B141: cmp     [esp+10h+Size], esi
  0040B145: jl      short loc_40B14B
  0040B147: mov     [esp+10h+Size], esi
  0040B14B: mov     edi, [esp+10h+Size]
  0040B14F: mov     eax, ebp
  0040B151: call    __shift
  0040B156: push    edi; Size
  0040B157: push    30h ; '0'; Val
  0040B159: push    ebp; void *
  0040B15A: call    _memset
  0040B15F: add     esp, 0Ch
  0040B162: pop     edi
  0040B163: pop     esi
  0040B164: pop     ebp
  0040B165: mov     eax, ebx
  0040B167: pop     ebx
  0040B168: retn

Function: __cftog
  0040B169: push    ebp
  0040B16A: mov     ebp, esp
  0040B16C: push    ebx
  0040B16D: push    esi
  0040B16E: mov     esi, [ebp+arg_0]
  0040B171: push    edi
  0040B172: push    dword ptr [esi+4]
  0040B175: push    dword ptr [esi]
  0040B177: call    __fltout
  0040B17C: mov     ecx, [eax+4]
  0040B17F: mov     ebx, [ebp+Size]
  0040B182: dec     ecx
  0040B183: mov     ds:41E090h, ecx
  0040B189: xor     ecx, ecx
  0040B18B: cmp     dword ptr [eax], 2Dh ; '-'
  0040B18E: push    eax; int
  0040B18F: setz    cl
  0040B192: push    ebx; int
  0040B193: mov     ds:41E088h, eax
  0040B198: add     ecx, [ebp+arg_4]
  0040B19B: mov     edi, ecx
  0040B19D: push    edi; void *
  0040B19E: call    __fptostr
  0040B1A3: mov     eax, ds:41E088h
  0040B1A8: mov     eax, [eax+4]
  0040B1AB: add     esp, 14h
  0040B1AE: dec     eax
  0040B1AF: cmp     ds:41E090h, eax
  0040B1B5: mov     ds:41E090h, eax
  0040B1BA: setl    cl
  0040B1BD: cmp     eax, 0FFFFFFFCh
  0040B1C0: mov     ds:41E094h, cl
  0040B1C6: jl      short loc_40B1F0
  0040B1C8: cmp     eax, ebx
  0040B1CA: jge     short loc_40B1F0
  0040B1CC: test    cl, cl
  0040B1CE: jz      short loc_40B1DA
  0040B1D0: mov     al, [edi]
  0040B1D2: inc     edi
  0040B1D3: test    al, al
  0040B1D5: jnz     short loc_40B1D0
  0040B1D7: mov     [edi-2], al
  0040B1DA: push    ebx; Size
  0040B1DB: push    [ebp+arg_4]; int
  0040B1DE: mov     byte ptr ds:41E08Ch, 1
  0040B1E5: push    esi; int
  0040B1E6: call    __cftof
  0040B1EB: add     esp, 0Ch
  0040B1EE: jmp     short loc_40B207
  0040B1F0: push    [ebp+arg_C]
  0040B1F3: mov     byte ptr ds:41E08Ch, 1
  0040B1FA: push    ebx
  0040B1FB: push    [ebp+arg_4]
  0040B1FE: push    esi
  0040B1FF: call    __cftoe
  0040B204: add     esp, 10h
  0040B207: pop     edi
  0040B208: pop     esi
  0040B209: mov     byte ptr ds:41E08Ch, 0
  0040B210: pop     ebx
  0040B211: pop     ebp
  0040B212: retn

Function: __cfltcvt
  0040B213: push    ebp
  0040B214: mov     ebp, esp
  0040B216: cmp     [ebp+arg_8], 65h ; 'e'
  0040B21A: jz      short loc_40B24E
  0040B21C: cmp     [ebp+arg_8], 45h ; 'E'
  0040B220: jz      short loc_40B24E
  0040B222: cmp     [ebp+arg_8], 66h ; 'f'
  0040B226: jnz     short loc_40B23B
  0040B228: push    [ebp+Size]; Size
  0040B22B: push    [ebp+arg_4]; int
  0040B22E: push    [ebp+arg_0]; int
  0040B231: call    __cftof
  0040B236: add     esp, 0Ch
  0040B239: pop     ebp
  0040B23A: retn
  0040B23B: push    [ebp+arg_10]; int
  0040B23E: push    [ebp+Size]; Size
  0040B241: push    [ebp+arg_4]; int
  0040B244: push    [ebp+arg_0]; int
  0040B247: call    __cftog
  0040B24C: jmp     short loc_40B25F
  0040B24E: push    [ebp+arg_10]
  0040B251: push    [ebp+Size]
  0040B254: push    [ebp+arg_4]
  0040B257: push    [ebp+arg_0]
  0040B25A: call    __cftoe
  0040B25F: add     esp, 10h
  0040B262: pop     ebp
  0040B263: retn

Function: __setdefaultprecision
  0040B264: push    30000h; Mask
  0040B269: push    10000h; NewValue
  0040B26E: call    __controlfp
  0040B273: pop     ecx
  0040B274: pop     ecx
  0040B275: retn

Function: __ms_p5_test_fdiv
  0040B276: push    ebp
  0040B277: mov     ebp, esp
  0040B279: sub     esp, 18h
  0040B27C: fld     qword ptr ds:411B30h
  0040B282: fstp    [ebp+var_8]
  0040B285: fld     qword ptr ds:411B28h
  0040B28B: fstp    [ebp+var_10]
  0040B28E: fld     [ebp+var_10]
  0040B291: fdiv    [ebp+var_8]
  0040B294: fmul    [ebp+var_8]
  0040B297: fsubr   [ebp+var_10]
  0040B29A: fstp    [ebp+var_18]
  0040B29D: fld     [ebp+var_18]
  0040B2A0: fcomp   qword ptr ds:411B20h
  0040B2A6: fnstsw  ax
  0040B2A8: test    ah, 41h
  0040B2AB: jnz     short loc_40B2B2
  0040B2AD: xor     eax, eax
  0040B2AF: inc     eax
  0040B2B0: leave
  0040B2B1: retn
  0040B2B2: xor     eax, eax
  0040B2B4: leave
  0040B2B5: retn

Function: __ms_p5_mp_test_fdiv
  0040B2B6: push    411B54h
  0040B2BB: call    dword ptr ds:411044h
  0040B2C1: test    eax, eax
  0040B2C3: jz      short loc_40B2DA
  0040B2C5: push    411B38h
  0040B2CA: push    eax; hModule
  0040B2CB: call    dword ptr ds:411018h
  0040B2D1: test    eax, eax
  0040B2D3: jz      short loc_40B2DA
  0040B2D5: push    0
  0040B2D7: call    eax
  0040B2D9: retn
  0040B2DA: jmp     __ms_p5_test_fdiv

Function: _realloc
  0040B2DF: push    ebx
  0040B2E0: mov     ebx, [esp+4+lpMem]
  0040B2E4: test    ebx, ebx
  0040B2E6: push    ebp
  0040B2E7: push    edi
  0040B2E8: jnz     short loc_40B2F9
  0040B2EA: push    [esp+0Ch+dwBytes]; Size
  0040B2EE: call    _malloc
  0040B2F3: pop     ecx
  0040B2F4: jmp     loc_40B43D
  0040B2F9: push    esi
  0040B2FA: mov     esi, [esp+10h+dwBytes]
  0040B2FE: test    esi, esi
  0040B300: jnz     short loc_40B30E
  0040B302: push    ebx; Block
  0040B303: call    _free
  0040B308: pop     ecx
  0040B309: jmp     loc_40B43A
  0040B30E: cmp     dword ptr ds:41E680h, 3
  0040B315: jnz     loc_40B406
  0040B31B: xor     edi, edi
  0040B31D: cmp     esi, 0FFFFFFE0h
  0040B320: ja      loc_40B3E8
  0040B326: push    ebx
  0040B327: call    ___sbh_find_block
  0040B32C: mov     ebp, eax
  0040B32E: test    ebp, ebp
  0040B330: pop     ecx
  0040B331: jz      loc_40B3C7
  0040B337: cmp     esi, ds:41E66Ch
  0040B33D: ja      short loc_40B387
  0040B33F: push    esi
  0040B340: push    ebx
  0040B341: push    ebp
  0040B342: call    ___sbh_resize_block
  0040B347: add     esp, 0Ch
  0040B34A: test    eax, eax
  0040B34C: jz      short loc_40B352
  0040B34E: mov     edi, ebx
  0040B350: jmp     short loc_40B383
  0040B352: push    esi
  0040B353: call    ___sbh_alloc_block
  0040B358: mov     edi, eax
  0040B35A: test    edi, edi
  0040B35C: pop     ecx
  0040B35D: jz      short loc_40B387
  0040B35F: mov     eax, [ebx-4]
  0040B362: dec     eax
  0040B363: cmp     eax, esi
  0040B365: jb      short loc_40B369
  0040B367: mov     eax, esi
  0040B369: push    eax; Size
  0040B36A: push    ebx; Src
  0040B36B: push    edi; void *
  0040B36C: call    _memcpy
  0040B371: push    ebx
  0040B372: call    ___sbh_find_block
  0040B377: mov     ebp, eax
  0040B379: push    ebx
  0040B37A: push    ebp
  0040B37B: call    ___sbh_free_block
  0040B380: add     esp, 18h
  0040B383: test    edi, edi
  0040B385: jnz     short loc_40B3C3
  0040B387: test    esi, esi
  0040B389: jnz     short loc_40B38C
  0040B38B: inc     esi
  0040B38C: add     esi, 0Fh
  0040B38F: and     esi, 0FFFFFFF0h
  0040B392: push    esi; dwBytes
  0040B393: push    0; dwFlags
  0040B395: push    dword ptr ds:41E67Ch; hHeap
  0040B39B: call    dword ptr ds:411050h
  0040B3A1: mov     edi, eax
  0040B3A3: test    edi, edi
  0040B3A5: jz      short loc_40B3C3
  0040B3A7: mov     eax, [ebx-4]
  0040B3AA: dec     eax
  0040B3AB: cmp     eax, esi
  0040B3AD: jb      short loc_40B3B1
  0040B3AF: mov     eax, esi
  0040B3B1: push    eax; Size
  0040B3B2: push    ebx; Src
  0040B3B3: push    edi; void *
  0040B3B4: call    _memcpy
  0040B3B9: push    ebx
  0040B3BA: push    ebp
  0040B3BB: call    ___sbh_free_block
  0040B3C0: add     esp, 14h
  0040B3C3: test    ebp, ebp
  0040B3C5: jnz     short loc_40B3E4
  0040B3C7: test    esi, esi
  0040B3C9: jnz     short loc_40B3CC
  0040B3CB: inc     esi
  0040B3CC: add     esi, 0Fh
  0040B3CF: and     esi, 0FFFFFFF0h
  0040B3D2: push    esi; dwBytes
  0040B3D3: push    ebx; lpMem
  0040B3D4: push    0; dwFlags
  0040B3D6: push    dword ptr ds:41E67Ch; hHeap
  0040B3DC: call    dword ptr ds:411054h
  0040B3E2: mov     edi, eax
  0040B3E4: test    edi, edi
  0040B3E6: jnz     short loc_40B402
  0040B3E8: cmp     dword ptr ds:41E254h, 0
  0040B3EF: jz      short loc_40B402
  0040B3F1: push    esi; Size
  0040B3F2: call    __callnewh
  0040B3F7: test    eax, eax
  0040B3F9: pop     ecx
  0040B3FA: jnz     loc_40B31B
  0040B400: jmp     short loc_40B43A
  0040B402: mov     eax, edi
  0040B404: jmp     short loc_40B43C
  0040B406: xor     eax, eax
  0040B408: cmp     esi, 0FFFFFFE0h
  0040B40B: ja      short loc_40B426
  0040B40D: test    esi, esi
  0040B40F: jnz     short loc_40B412
  0040B411: inc     esi
  0040B412: push    esi; dwBytes
  0040B413: push    ebx; lpMem
  0040B414: push    0; dwFlags
  0040B416: push    dword ptr ds:41E67Ch; hHeap
  0040B41C: call    dword ptr ds:411054h
  0040B422: test    eax, eax
  0040B424: jnz     short loc_40B43C
  0040B426: cmp     dword ptr ds:41E254h, 0
  0040B42D: jz      short loc_40B43C
  0040B42F: push    esi; Size
  0040B430: call    __callnewh
  0040B435: test    eax, eax
  0040B437: pop     ecx
  0040B438: jnz     short loc_40B406
  0040B43A: xor     eax, eax
  0040B43C: pop     esi
  0040B43D: pop     edi
  0040B43E: pop     ebp
  0040B43F: pop     ebx
  0040B440: retn

Function: ___crtExitProcess
  0040B441: push    411B70h
  0040B446: call    dword ptr ds:411044h
  0040B44C: test    eax, eax
  0040B44E: jz      short loc_40B466
  0040B450: push    411B60h
  0040B455: push    eax; hModule
  0040B456: call    dword ptr ds:411018h
  0040B45C: test    eax, eax
  0040B45E: jz      short loc_40B466
  0040B460: push    [esp+uExitCode]
  0040B464: call    eax
  0040B466: push    [esp+uExitCode]; uExitCode
  0040B46A: call    dword ptr ds:411058h

Function: __cinit
  0040B471: mov     eax, ds:41306Ch
  0040B476: test    eax, eax
  0040B478: jz      short loc_40B481
  0040B47A: push    [esp+arg_0]
  0040B47E: call    eax ; __fpmath
  0040B480: pop     ecx
  0040B481: push    esi
  0040B482: push    edi
  0040B483: mov     ecx, 413010h
  0040B488: mov     edi, 41301Ch
  0040B48D: xor     eax, eax
  0040B48F: cmp     ecx, edi
  0040B491: mov     esi, ecx
  0040B493: jnb     short loc_40B4AC
  0040B495: test    eax, eax
  0040B497: jnz     short loc_40B4D8
  0040B499: mov     ecx, [esi]
  0040B49B: test    ecx, ecx
  0040B49D: jz      short loc_40B4A1
  0040B49F: call    ecx
  0040B4A1: add     esi, 4
  0040B4A4: cmp     esi, edi
  0040B4A6: jb      short loc_40B495
  0040B4A8: test    eax, eax
  0040B4AA: jnz     short loc_40B4D8
  0040B4AC: push    40CD2Fh; void (__cdecl *)()
  0040B4B1: call    _atexit
  0040B4B6: mov     esi, 413000h
  0040B4BB: mov     eax, esi
  0040B4BD: mov     edi, 41300Ch
  0040B4C2: cmp     eax, edi
  0040B4C4: pop     ecx
  0040B4C5: jnb     short loc_40B4D6
  0040B4C7: mov     eax, [esi]
  0040B4C9: test    eax, eax
  0040B4CB: jz      short loc_40B4CF
  0040B4CD: call    eax
  0040B4CF: add     esi, 4
  0040B4D2: cmp     esi, edi
  0040B4D4: jb      short loc_40B4C7
  0040B4D6: xor     eax, eax
  0040B4D8: pop     edi
  0040B4D9: pop     esi
  0040B4DA: retn

Function: _doexit
  0040B4DB: push    ebp
  0040B4DC: mov     ebp, esp
  0040B4DE: push    esi
  0040B4DF: xor     esi, esi
  0040B4E1: inc     esi
  0040B4E2: cmp     ds:41E0E4h, esi
  0040B4E8: push    edi
  0040B4E9: jnz     short loc_40B4FB
  0040B4EB: push    [ebp+uExitCode]; uExitCode
  0040B4EE: call    dword ptr ds:411060h
  0040B4F4: push    eax; hProcess
  0040B4F5: call    dword ptr ds:41105Ch
  0040B4FB: cmp     [ebp+arg_4], 0
  0040B4FF: mov     al, byte ptr [ebp+arg_8]
  0040B502: mov     ds:41E0E0h, esi
  0040B508: mov     ds:41E0DCh, al
  0040B50D: jnz     short loc_40B561
  0040B50F: mov     ecx, ds:41E68Ch
  0040B515: test    ecx, ecx
  0040B517: jz      short loc_40B542
  0040B519: mov     eax, ds:41E688h
  0040B51E: sub     eax, 4
  0040B521: cmp     eax, ecx
  0040B523: jmp     short loc_40B53B
  0040B525: mov     eax, [eax]
  0040B527: test    eax, eax
  0040B529: jz      short loc_40B52D
  0040B52B: call    eax
  0040B52D: mov     eax, ds:41E688h
  0040B532: sub     eax, 4
  0040B535: cmp     eax, ds:41E68Ch
  0040B53B: mov     ds:41E688h, eax
  0040B540: jnb     short loc_40B525
  0040B542: mov     eax, 413020h
  0040B547: mov     esi, 413024h
  0040B54C: cmp     eax, esi
  0040B54E: mov     edi, eax
  0040B550: jnb     short loc_40B561
  0040B552: mov     eax, [edi]
  0040B554: test    eax, eax
  0040B556: jz      short loc_40B55A
  0040B558: call    eax
  0040B55A: add     edi, 4
  0040B55D: cmp     edi, esi
  0040B55F: jb      short loc_40B552
  0040B561: mov     eax, 413028h
  0040B566: mov     esi, 41302Ch
  0040B56B: cmp     eax, esi
  0040B56D: mov     edi, eax
  0040B56F: jnb     short loc_40B580
  0040B571: mov     eax, [edi]
  0040B573: test    eax, eax
  0040B575: jz      short loc_40B579
  0040B577: call    eax
  0040B579: add     edi, 4
  0040B57C: cmp     edi, esi
  0040B57E: jb      short loc_40B571
  0040B580: cmp     [ebp+arg_8], 0
  0040B584: pop     edi
  0040B585: pop     esi
  0040B586: jnz     short loc_40B59A
  0040B588: push    [ebp+uExitCode]; uExitCode
  0040B58B: mov     dword ptr ds:41E0E4h, 1
  0040B595: call    ___crtExitProcess
  0040B59A: pop     ebp
  0040B59B: retn

Function: _exit
  0040B59C: push    0; int
  0040B59E: push    0; int
  0040B5A0: push    [esp+8+Code]; uExitCode
  0040B5A4: call    _doexit
  0040B5A9: add     esp, 0Ch
  0040B5AC: retn

Function: __exit
  0040B5AD: push    0; int
  0040B5AF: push    1; int
  0040B5B1: push    [esp+8+Code]; uExitCode
  0040B5B5: call    _doexit
  0040B5BA: add     esp, 0Ch
  0040B5BD: retn

Function: __cexit
  0040B5BE: push    1; int
  0040B5C0: push    0; int
  0040B5C2: push    0; uExitCode
  0040B5C4: call    _doexit
  0040B5C9: add     esp, 0Ch
  0040B5CC: retn

Function: __c_exit
  0040B5CD: push    1; int
  0040B5CF: push    1; int
  0040B5D1: push    0; uExitCode
  0040B5D3: call    _doexit
  0040B5D8: add     esp, 0Ch
  0040B5DB: retn

Function: __msize
  0040B5DC: cmp     dword ptr ds:41E680h, 3
  0040B5E3: push    esi
  0040B5E4: jnz     short loc_40B600
  0040B5E6: mov     esi, [esp+4+lpMem]
  0040B5EA: push    esi
  0040B5EB: call    ___sbh_find_block
  0040B5F0: test    eax, eax
  0040B5F2: pop     ecx
  0040B5F3: jz      short loc_40B5FD
  0040B5F5: mov     eax, [esi-4]
  0040B5F8: sub     eax, 9
  0040B5FB: pop     esi
  0040B5FC: retn
  0040B5FD: push    esi
  0040B5FE: jmp     short loc_40B604
  0040B600: push    [esp+4+lpMem]; lpMem
  0040B604: push    0; dwFlags
  0040B606: push    dword ptr ds:41E67Ch; hHeap
  0040B60C: call    dword ptr ds:411064h
  0040B612: pop     esi
  0040B613: retn

Function: __ValidateEH3RN
  0040B614: push    ebp
  0040B615: mov     ebp, esp
  0040B617: sub     esp, 20h
  0040B61A: push    ebx
  0040B61B: push    esi
  0040B61C: mov     esi, [ebp+arg_0]
  0040B61F: mov     ebx, [esi+8]
  0040B622: test    bl, 3
  0040B625: jnz     short loc_40B642
  0040B627: mov     eax, large fs:18h
  0040B62D: mov     [ebp+arg_0], eax
  0040B630: mov     eax, [ebp+arg_0]
  0040B633: mov     ecx, [eax+8]
  0040B636: cmp     ebx, ecx
  0040B638: mov     [ebp+var_4], ecx
  0040B63B: jb      short loc_40B649
  0040B63D: cmp     ebx, [eax+4]
  0040B640: jnb     short loc_40B649
  0040B642: xor     eax, eax
  0040B644: jmp     loc_40B839
  0040B649: push    edi
  0040B64A: mov     edi, [esi+0Ch]
  0040B64D: cmp     edi, 0FFFFFFFFh
  0040B650: jnz     short loc_40B65A
  0040B652: xor     eax, eax
  0040B654: inc     eax
  0040B655: jmp     loc_40B838
  0040B65A: xor     edx, edx
  0040B65C: mov     [ebp+arg_0], edx
  0040B65F: mov     eax, ebx
  0040B661: mov     ecx, [eax]
  0040B663: cmp     ecx, 0FFFFFFFFh
  0040B666: jz      short loc_40B670
  0040B668: cmp     ecx, edx
  0040B66A: jnb     loc_40B7B5
  0040B670: cmp     dword ptr [eax+4], 0
  0040B674: jz      short loc_40B679
  0040B676: inc     [ebp+arg_0]
  0040B679: inc     edx
  0040B67A: add     eax, 0Ch
  0040B67D: cmp     edx, edi
  0040B67F: jbe     short loc_40B661
  0040B681: cmp     [ebp+arg_0], 0
  0040B685: jz      short loc_40B69B
  0040B687: mov     eax, [esi-8]
  0040B68A: cmp     eax, [ebp+var_4]
  0040B68D: jb      loc_40B7B5
  0040B693: cmp     eax, esi
  0040B695: jnb     loc_40B7B5
  0040B69B: mov     eax, ds:41E0E8h
  0040B6A0: mov     edi, ebx
  0040B6A2: and     edi, 0FFFFF000h
  0040B6A8: xor     esi, esi
  0040B6AA: test    eax, eax
  0040B6AC: jle     short loc_40B6C0
  0040B6AE: cmp     ds:41E0F0h[esi*4], edi
  0040B6B5: jz      loc_40B7B9
  0040B6BB: inc     esi
  0040B6BC: cmp     esi, eax
  0040B6BE: jl      short loc_40B6AE
  0040B6C0: push    1Ch; dwLength
  0040B6C2: lea     eax, [ebp+Buffer]
  0040B6C5: push    eax; lpBuffer
  0040B6C6: push    ebx; lpAddress
  0040B6C7: call    dword ptr ds:411068h
  0040B6CD: test    eax, eax
  0040B6CF: jz      loc_40B835
  0040B6D5: cmp     [ebp+Buffer.Type], 1000000h
  0040B6DC: jnz     loc_40B835
  0040B6E2: test    byte ptr [ebp+Buffer.Protect], 0CCh
  0040B6E6: jz      short loc_40B73E
  0040B6E8: mov     ecx, [ebp+Buffer.AllocationBase]
  0040B6EB: cmp     word ptr [ecx], 5A4Dh
  0040B6F0: jnz     loc_40B835
  0040B6F6: mov     eax, [ecx+3Ch]
  0040B6F9: add     eax, ecx
  0040B6FB: cmp     dword ptr [eax], 4550h
  0040B701: jnz     loc_40B835
  0040B707: cmp     word ptr [eax+18h], 10Bh
  0040B70D: jnz     loc_40B835
  0040B713: sub     ebx, ecx
  0040B715: cmp     word ptr [eax+6], 0
  0040B71A: movzx   ecx, word ptr [eax+14h]
  0040B71E: lea     ecx, [ecx+eax+18h]
  0040B722: jbe     loc_40B835
  0040B728: mov     eax, [ecx+0Ch]
  0040B72B: cmp     ebx, eax
  0040B72D: jb      short loc_40B73E
  0040B72F: mov     edx, [ecx+8]
  0040B732: add     edx, eax
  0040B734: cmp     ebx, edx
  0040B736: jnb     short loc_40B73E
  0040B738: test    byte ptr [ecx+27h], 80h
  0040B73C: jnz     short loc_40B7B5
  0040B73E: push    1; Value
  0040B740: push    41E130h; Target
  0040B745: call    dword ptr ds:411004h
  0040B74B: test    eax, eax
  0040B74D: jnz     loc_40B652
  0040B753: mov     ecx, ds:41E0E8h
  0040B759: test    ecx, ecx
  0040B75B: mov     edx, ecx
  0040B75D: jle     short loc_40B772
  0040B75F: lea     eax, ds:41E0ECh[ecx*4]
  0040B766: cmp     [eax], edi
  0040B768: jz      short loc_40B772
  0040B76A: dec     edx
  0040B76B: sub     eax, 4
  0040B76E: test    edx, edx
  0040B770: jg      short loc_40B766
  0040B772: test    edx, edx
  0040B774: jnz     short loc_40B7A3
  0040B776: push    0Fh
  0040B778: pop     ebx
  0040B779: cmp     ecx, ebx
  0040B77B: jg      short loc_40B77F
  0040B77D: mov     ebx, ecx
  0040B77F: xor     edx, edx
  0040B781: test    ebx, ebx
  0040B783: jl      short loc_40B797
  0040B785: lea     eax, ds:41E0F0h[edx*4]
  0040B78C: mov     esi, [eax]
  0040B78E: inc     edx
  0040B78F: cmp     edx, ebx
  0040B791: mov     [eax], edi
  0040B793: mov     edi, esi
  0040B795: jle     short loc_40B785
  0040B797: cmp     ecx, 10h
  0040B79A: jge     short loc_40B7A3
  0040B79C: inc     ecx
  0040B79D: mov     ds:41E0E8h, ecx
  0040B7A3: push    0; Value
  0040B7A5: push    41E130h; Target
  0040B7AA: call    dword ptr ds:411004h
  0040B7B0: jmp     loc_40B652
  0040B7B5: xor     eax, eax
  0040B7B7: jmp     short loc_40B838
  0040B7B9: test    esi, esi
  0040B7BB: jle     loc_40B652
  0040B7C1: mov     ebx, ds:411004h
  0040B7C7: push    1; Value
  0040B7C9: push    41E130h; Target
  0040B7CE: call    ebx ; InterlockedExchange
  0040B7D0: test    eax, eax
  0040B7D2: jnz     loc_40B652
  0040B7D8: cmp     ds:41E0F0h[esi*4], edi
  0040B7DF: jz      short loc_40B80F
  0040B7E1: mov     eax, ds:41E0E8h
  0040B7E6: lea     esi, [eax-1]
  0040B7E9: test    esi, esi
  0040B7EB: jl      short loc_40B7FD
  0040B7ED: cmp     ds:41E0F0h[esi*4], edi
  0040B7F4: jz      short loc_40B7F9
  0040B7F6: dec     esi
  0040B7F7: jns     short loc_40B7ED
  0040B7F9: test    esi, esi
  0040B7FB: jge     short loc_40B80D
  0040B7FD: cmp     eax, 10h
  0040B800: jge     short loc_40B808
  0040B802: inc     eax
  0040B803: mov     ds:41E0E8h, eax
  0040B808: lea     esi, [eax-1]
  0040B80B: jmp     short loc_40B80F
  0040B80D: jz      short loc_40B827
  0040B80F: xor     ecx, ecx
  0040B811: test    esi, esi
  0040B813: jl      short loc_40B827
  0040B815: lea     eax, ds:41E0F0h[ecx*4]
  0040B81C: mov     edx, [eax]
  0040B81E: inc     ecx
  0040B81F: cmp     ecx, esi
  0040B821: mov     [eax], edi
  0040B823: mov     edi, edx
  0040B825: jle     short loc_40B815
  0040B827: push    0; Value
  0040B829: push    41E130h; Target
  0040B82E: call    ebx ; InterlockedExchange
  0040B830: jmp     loc_40B652
  0040B835: or      eax, 0FFFFFFFFh
  0040B838: pop     edi
  0040B839: pop     esi
  0040B83A: pop     ebx
  0040B83B: leave
  0040B83C: retn

Function: ___heap_select
  0040B83D: cmp     dword ptr ds:41E0A4h, 2
  0040B844: jnz     short loc_40B853
  0040B846: cmp     dword ptr ds:41E0B0h, 5
  0040B84D: jb      short loc_40B853
  0040B84F: xor     eax, eax
  0040B851: inc     eax
  0040B852: retn
  0040B853: push    3
  0040B855: pop     eax
  0040B856: retn

Function: __heap_init
  0040B857: xor     eax, eax
  0040B859: cmp     [esp+arg_0], eax
  0040B85D: push    0; dwMaximumSize
  0040B85F: setz    al
  0040B862: push    1000h; dwInitialSize
  0040B867: push    eax; flOptions
  0040B868: call    dword ptr ds:411070h
  0040B86E: test    eax, eax
  0040B870: mov     ds:41E67Ch, eax
  0040B875: jz      short loc_40B8A1
  0040B877: call    ___heap_select
  0040B87C: cmp     eax, 3
  0040B87F: mov     ds:41E680h, eax
  0040B884: jnz     short loc_40B8A4
  0040B886: push    3F8h
  0040B88B: call    ___sbh_heap_init
  0040B890: test    eax, eax
  0040B892: pop     ecx
  0040B893: jnz     short loc_40B8A4
  0040B895: push    dword ptr ds:41E67Ch; hHeap
  0040B89B: call    dword ptr ds:41106Ch
  0040B8A1: xor     eax, eax
  0040B8A3: retn
  0040B8A4: xor     eax, eax
  0040B8A6: inc     eax
  0040B8A7: retn

Function: ___sbh_heap_init
  0040B8A8: push    140h; dwBytes
  0040B8AD: push    0; dwFlags
  0040B8AF: push    dword ptr ds:41E67Ch; hHeap
  0040B8B5: call    dword ptr ds:411050h
  0040B8BB: test    eax, eax
  0040B8BD: mov     ds:41E668h, eax
  0040B8C2: jnz     short loc_40B8C5
  0040B8C4: retn
  0040B8C5: mov     ecx, [esp+arg_0]
  0040B8C9: and     dword ptr ds:41E660h, 0
  0040B8D0: and     dword ptr ds:41E664h, 0
  0040B8D7: mov     ds:41E670h, eax
  0040B8DC: xor     eax, eax
  0040B8DE: mov     ds:41E66Ch, ecx
  0040B8E4: mov     dword ptr ds:41E674h, 10h
  0040B8EE: inc     eax
  0040B8EF: retn

Function: ___sbh_find_block
  0040B8F0: mov     eax, ds:41E664h
  0040B8F5: lea     ecx, [eax+eax*4]
  0040B8F8: mov     eax, ds:41E668h
  0040B8FD: lea     ecx, [eax+ecx*4]
  0040B900: jmp     short loc_40B914
  0040B902: mov     edx, [esp+arg_0]
  0040B906: sub     edx, [eax+0Ch]
  0040B909: cmp     edx, 100000h
  0040B90F: jb      short locret_B91A
  0040B911: add     eax, 14h
  0040B914: cmp     eax, ecx
  0040B916: jb      short loc_40B902
  0040B918: xor     eax, eax
  0040B91A: retn

Function: ___sbh_free_block
  0040B91B: push    ebp
  0040B91C: mov     ebp, esp
  0040B91E: sub     esp, 10h
  0040B921: mov     ecx, [ebp+arg_0]
  0040B924: mov     eax, [ecx+10h]
  0040B927: push    esi
  0040B928: mov     esi, [ebp+arg_4]
  0040B92B: push    edi
  0040B92C: mov     edi, esi
  0040B92E: sub     edi, [ecx+0Ch]
  0040B931: add     esi, 0FFFFFFFCh
  0040B934: shr     edi, 0Fh
  0040B937: mov     ecx, edi
  0040B939: imul    ecx, 204h
  0040B93F: lea     ecx, [ecx+eax+144h]
  0040B946: mov     [ebp+var_10], ecx
  0040B949: mov     ecx, [esi]
  0040B94B: dec     ecx
  0040B94C: test    cl, 1
  0040B94F: mov     [ebp+var_4], ecx
  0040B952: jnz     loc_40BC2F
  0040B958: push    ebx
  0040B959: lea     ebx, [ecx+esi]
  0040B95C: mov     edx, [ebx]
  0040B95E: mov     [ebp+var_C], edx
  0040B961: mov     edx, [esi-4]
  0040B964: mov     [ebp+var_8], edx
  0040B967: mov     edx, [ebp+var_C]
  0040B96A: test    dl, 1
  0040B96D: mov     [ebp+arg_4], ebx
  0040B970: jnz     short loc_40B9E6
  0040B972: sar     edx, 4
  0040B975: dec     edx
  0040B976: cmp     edx, 3Fh ; '?'
  0040B979: jbe     short loc_40B97E
  0040B97B: push    3Fh ; '?'
  0040B97D: pop     edx
  0040B97E: mov     ecx, [ebx+4]
  0040B981: cmp     ecx, [ebx+8]
  0040B984: jnz     short loc_40B9C8
  0040B986: cmp     edx, 20h ; ' '
  0040B989: mov     ebx, 80000000h
  0040B98E: jnb     short loc_40B9A9
  0040B990: mov     ecx, edx
  0040B992: shr     ebx, cl
  0040B994: lea     ecx, [edx+eax+4]
  0040B998: not     ebx
  0040B99A: and     [eax+edi*4+44h], ebx
  0040B99E: dec     byte ptr [ecx]
  0040B9A0: jnz     short loc_40B9C5
  0040B9A2: mov     ecx, [ebp+arg_0]
  0040B9A5: and     [ecx], ebx
  0040B9A7: jmp     short loc_40B9C5
  0040B9A9: lea     ecx, [edx-20h]
  0040B9AC: shr     ebx, cl
  0040B9AE: lea     ecx, [edx+eax+4]
  0040B9B2: not     ebx
  0040B9B4: and     [eax+edi*4+0C4h], ebx
  0040B9BB: dec     byte ptr [ecx]
  0040B9BD: jnz     short loc_40B9C5
  0040B9BF: mov     ecx, [ebp+arg_0]
  0040B9C2: and     [ecx+4], ebx
  0040B9C5: mov     ebx, [ebp+arg_4]
  0040B9C8: mov     edx, [ebx+8]
  0040B9CB: mov     ebx, [ebx+4]
  0040B9CE: mov     ecx, [ebp+var_4]
  0040B9D1: add     ecx, [ebp+var_C]
  0040B9D4: mov     [edx+4], ebx
  0040B9D7: mov     edx, [ebp+arg_4]
  0040B9DA: mov     ebx, [edx+4]
  0040B9DD: mov     edx, [edx+8]
  0040B9E0: mov     [ebx+8], edx
  0040B9E3: mov     [ebp+var_4], ecx
  0040B9E6: mov     edx, ecx
  0040B9E8: sar     edx, 4
  0040B9EB: dec     edx
  0040B9EC: cmp     edx, 3Fh ; '?'
  0040B9EF: jbe     short loc_40B9F4
  0040B9F1: push    3Fh ; '?'
  0040B9F3: pop     edx
  0040B9F4: mov     ebx, [ebp+var_8]
  0040B9F7: and     ebx, 1
  0040B9FA: mov     [ebp+var_C], ebx
  0040B9FD: jnz     loc_40BA92
  0040BA03: sub     esi, [ebp+var_8]
  0040BA06: mov     ebx, [ebp+var_8]
  0040BA09: sar     ebx, 4
  0040BA0C: push    3Fh ; '?'
  0040BA0E: mov     [ebp+arg_4], esi
  0040BA11: dec     ebx
  0040BA12: pop     esi
  0040BA13: cmp     ebx, esi
  0040BA15: jbe     short loc_40BA19
  0040BA17: mov     ebx, esi
  0040BA19: add     ecx, [ebp+var_8]
  0040BA1C: mov     edx, ecx
  0040BA1E: sar     edx, 4
  0040BA21: dec     edx
  0040BA22: cmp     edx, esi
  0040BA24: mov     [ebp+var_4], ecx
  0040BA27: jbe     short loc_40BA2B
  0040BA29: mov     edx, esi
  0040BA2B: cmp     ebx, edx
  0040BA2D: jz      short loc_40BA8D
  0040BA2F: mov     ecx, [ebp+arg_4]
  0040BA32: mov     esi, [ecx+4]
  0040BA35: cmp     esi, [ecx+8]
  0040BA38: jnz     short loc_40BA75
  0040BA3A: cmp     ebx, 20h ; ' '
  0040BA3D: mov     esi, 80000000h
  0040BA42: jnb     short loc_40BA5B
  0040BA44: mov     ecx, ebx
  0040BA46: shr     esi, cl
  0040BA48: not     esi
  0040BA4A: and     [eax+edi*4+44h], esi
  0040BA4E: dec     byte ptr [ebx+eax+4]
  0040BA52: jnz     short loc_40BA75
  0040BA54: mov     ecx, [ebp+arg_0]
  0040BA57: and     [ecx], esi
  0040BA59: jmp     short loc_40BA75
  0040BA5B: lea     ecx, [ebx-20h]
  0040BA5E: shr     esi, cl
  0040BA60: not     esi
  0040BA62: and     [eax+edi*4+0C4h], esi
  0040BA69: dec     byte ptr [ebx+eax+4]
  0040BA6D: jnz     short loc_40BA75
  0040BA6F: mov     ecx, [ebp+arg_0]
  0040BA72: and     [ecx+4], esi
  0040BA75: mov     ecx, [ebp+arg_4]
  0040BA78: mov     esi, [ecx+8]
  0040BA7B: mov     ecx, [ecx+4]
  0040BA7E: mov     [esi+4], ecx
  0040BA81: mov     ecx, [ebp+arg_4]
  0040BA84: mov     esi, [ecx+4]
  0040BA87: mov     ecx, [ecx+8]
  0040BA8A: mov     [esi+8], ecx
  0040BA8D: mov     esi, [ebp+arg_4]
  0040BA90: jmp     short loc_40BA95
  0040BA92: mov     ebx, [ebp+arg_0]
  0040BA95: cmp     [ebp+var_C], 0
  0040BA99: jnz     short loc_40BAA3
  0040BA9B: cmp     ebx, edx
  0040BA9D: jz      loc_40BB23
  0040BAA3: mov     ecx, [ebp+var_10]
  0040BAA6: lea     ecx, [ecx+edx*8]
  0040BAA9: mov     ebx, [ecx+4]
  0040BAAC: mov     [esi+8], ecx
  0040BAAF: mov     [esi+4], ebx
  0040BAB2: mov     [ecx+4], esi
  0040BAB5: mov     ecx, [esi+4]
  0040BAB8: mov     [ecx+8], esi
  0040BABB: mov     ecx, [esi+4]
  0040BABE: cmp     ecx, [esi+8]
  0040BAC1: jnz     short loc_40BB23
  0040BAC3: mov     cl, [edx+eax+4]
  0040BAC7: mov     byte ptr [ebp+arg_4+3], cl
  0040BACA: inc     cl
  0040BACC: cmp     edx, 20h ; ' '
  0040BACF: mov     [edx+eax+4], cl
  0040BAD3: jnb     short loc_40BAFA
  0040BAD5: cmp     byte ptr [ebp+arg_4+3], 0
  0040BAD9: jnz     short loc_40BAE9
  0040BADB: mov     ecx, edx
  0040BADD: mov     ebx, 80000000h
  0040BAE2: shr     ebx, cl
  0040BAE4: mov     ecx, [ebp+arg_0]
  0040BAE7: or      [ecx], ebx
  0040BAE9: mov     ebx, 80000000h
  0040BAEE: mov     ecx, edx
  0040BAF0: shr     ebx, cl
  0040BAF2: lea     eax, [eax+edi*4+44h]
  0040BAF6: or      [eax], ebx
  0040BAF8: jmp     short loc_40BB23
  0040BAFA: cmp     byte ptr [ebp+arg_4+3], 0
  0040BAFE: jnz     short loc_40BB10
  0040BB00: lea     ecx, [edx-20h]
  0040BB03: mov     ebx, 80000000h
  0040BB08: shr     ebx, cl
  0040BB0A: mov     ecx, [ebp+arg_0]
  0040BB0D: or      [ecx+4], ebx
  0040BB10: lea     ecx, [edx-20h]
  0040BB13: mov     edx, 80000000h
  0040BB18: shr     edx, cl
  0040BB1A: lea     eax, [eax+edi*4+0C4h]
  0040BB21: or      [eax], edx
  0040BB23: mov     eax, [ebp+var_4]
  0040BB26: mov     [esi], eax
  0040BB28: mov     [eax+esi-4], eax
  0040BB2C: mov     eax, [ebp+var_10]
  0040BB2F: dec     dword ptr [eax]
  0040BB31: jnz     loc_40BC2E
  0040BB37: mov     eax, ds:41E660h
  0040BB3C: test    eax, eax
  0040BB3E: jz      loc_40BC20
  0040BB44: mov     ecx, ds:41E678h
  0040BB4A: mov     esi, ds:411074h
  0040BB50: push    4000h; dwFreeType
  0040BB55: shl     ecx, 0Fh
  0040BB58: add     ecx, [eax+0Ch]
  0040BB5B: mov     ebx, 8000h
  0040BB60: push    ebx; dwSize
  0040BB61: push    ecx; lpAddress
  0040BB62: call    esi ; VirtualFree
  0040BB64: mov     ecx, ds:41E678h
  0040BB6A: mov     eax, ds:41E660h
  0040BB6F: mov     edx, 80000000h
  0040BB74: shr     edx, cl
  0040BB76: or      [eax+8], edx
  0040BB79: mov     eax, ds:41E660h
  0040BB7E: mov     eax, [eax+10h]
  0040BB81: mov     ecx, ds:41E678h
  0040BB87: and     dword ptr [eax+ecx*4+0C4h], 0
  0040BB8F: mov     eax, ds:41E660h
  0040BB94: mov     eax, [eax+10h]
  0040BB97: dec     byte ptr [eax+43h]
  0040BB9A: mov     eax, ds:41E660h
  0040BB9F: mov     ecx, [eax+10h]
  0040BBA2: cmp     byte ptr [ecx+43h], 0
  0040BBA6: jnz     short loc_40BBB1
  0040BBA8: and     dword ptr [eax+4], 0FFFFFFFEh
  0040BBAC: mov     eax, ds:41E660h
  0040BBB1: cmp     dword ptr [eax+8], 0FFFFFFFFh
  0040BBB5: jnz     short loc_40BC20
  0040BBB7: push    ebx; dwFreeType
  0040BBB8: push    0; dwSize
  0040BBBA: push    dword ptr [eax+0Ch]; lpAddress
  0040BBBD: call    esi ; VirtualFree
  0040BBBF: mov     eax, ds:41E660h
  0040BBC4: push    dword ptr [eax+10h]; lpMem
  0040BBC7: push    0; dwFlags
  0040BBC9: push    dword ptr ds:41E67Ch; hHeap
  0040BBCF: call    dword ptr ds:411040h
  0040BBD5: mov     eax, ds:41E664h
  0040BBDA: mov     edx, ds:41E668h
  0040BBE0: lea     eax, [eax+eax*4]
  0040BBE3: shl     eax, 2
  0040BBE6: mov     ecx, eax
  0040BBE8: mov     eax, ds:41E660h
  0040BBED: sub     ecx, eax
  0040BBEF: lea     ecx, [ecx+edx-14h]
  0040BBF3: push    ecx; Size
  0040BBF4: lea     ecx, [eax+14h]
  0040BBF7: push    ecx; Src
  0040BBF8: push    eax; void *
  0040BBF9: call    _memcpy_0
  0040BBFE: mov     eax, [ebp+arg_0]
  0040BC01: add     esp, 0Ch
  0040BC04: dec     dword ptr ds:41E664h
  0040BC0A: cmp     eax, ds:41E660h
  0040BC10: jbe     short loc_40BC16
  0040BC12: sub     [ebp+arg_0], 14h
  0040BC16: mov     eax, ds:41E668h
  0040BC1B: mov     ds:41E670h, eax
  0040BC20: mov     eax, [ebp+arg_0]
  0040BC23: mov     ds:41E660h, eax
  0040BC28: mov     ds:41E678h, edi
  0040BC2E: pop     ebx
  0040BC2F: pop     edi
  0040BC30: pop     esi
  0040BC31: leave
  0040BC32: retn

Function: ___sbh_alloc_new_region
  0040BC33: mov     eax, ds:41E664h
  0040BC38: mov     ecx, ds:41E674h
  0040BC3E: push    edi
  0040BC3F: xor     edi, edi
  0040BC41: cmp     eax, ecx
  0040BC43: jnz     short loc_40BC79
  0040BC45: lea     eax, [ecx+ecx*4+50h]
  0040BC49: shl     eax, 2
  0040BC4C: push    eax; dwBytes
  0040BC4D: push    dword ptr ds:41E668h; lpMem
  0040BC53: push    edi; dwFlags
  0040BC54: push    dword ptr ds:41E67Ch; hHeap
  0040BC5A: call    dword ptr ds:411054h
  0040BC60: cmp     eax, edi
  0040BC62: jnz     short loc_40BC68
  0040BC64: xor     eax, eax
  0040BC66: pop     edi
  0040BC67: retn
  0040BC68: add     dword ptr ds:41E674h, 10h
  0040BC6F: mov     ds:41E668h, eax
  0040BC74: mov     eax, ds:41E664h
  0040BC79: mov     ecx, ds:41E668h
  0040BC7F: push    esi
  0040BC80: push    41C4h; dwBytes
  0040BC85: push    8; dwFlags
  0040BC87: push    dword ptr ds:41E67Ch; hHeap
  0040BC8D: lea     eax, [eax+eax*4]
  0040BC90: lea     esi, [ecx+eax*4]
  0040BC93: call    dword ptr ds:411050h
  0040BC99: cmp     eax, edi
  0040BC9B: mov     [esi+10h], eax
  0040BC9E: jnz     short loc_40BCA4
  0040BCA0: xor     eax, eax
  0040BCA2: jmp     short loc_40BCE7
  0040BCA4: push    4; flProtect
  0040BCA6: push    2000h; flAllocationType
  0040BCAB: push    100000h; dwSize
  0040BCB0: push    edi; lpAddress
  0040BCB1: call    dword ptr ds:411078h
  0040BCB7: cmp     eax, edi
  0040BCB9: mov     [esi+0Ch], eax
  0040BCBC: jnz     short loc_40BCD0
  0040BCBE: push    dword ptr [esi+10h]; lpMem
  0040BCC1: push    edi; dwFlags
  0040BCC2: push    dword ptr ds:41E67Ch; hHeap
  0040BCC8: call    dword ptr ds:411040h
  0040BCCE: jmp     short loc_40BCA0
  0040BCD0: or      dword ptr [esi+8], 0FFFFFFFFh
  0040BCD4: mov     [esi], edi
  0040BCD6: mov     [esi+4], edi
  0040BCD9: inc     dword ptr ds:41E664h
  0040BCDF: mov     eax, [esi+10h]
  0040BCE2: or      dword ptr [eax], 0FFFFFFFFh
  0040BCE5: mov     eax, esi
  0040BCE7: pop     esi
  0040BCE8: pop     edi
  0040BCE9: retn

Function: ___sbh_alloc_new_group
  0040BCEA: push    ebp
  0040BCEB: mov     ebp, esp
  0040BCED: push    ecx
  0040BCEE: push    ecx
  0040BCEF: mov     ecx, [ebp+arg_0]
  0040BCF2: mov     eax, [ecx+8]
  0040BCF5: push    ebx
  0040BCF6: push    esi
  0040BCF7: mov     esi, [ecx+10h]
  0040BCFA: push    edi
  0040BCFB: xor     ebx, ebx
  0040BCFD: jmp     short loc_40BD02
  0040BCFF: shl     eax, 1
  0040BD01: inc     ebx
  0040BD02: test    eax, eax
  0040BD04: jge     short loc_40BCFF
  0040BD06: mov     eax, ebx
  0040BD08: imul    eax, 204h
  0040BD0E: lea     eax, [eax+esi+144h]
  0040BD15: push    3Fh ; '?'
  0040BD17: mov     [ebp+var_8], eax
  0040BD1A: pop     edx
  0040BD1B: mov     [eax+8], eax
  0040BD1E: mov     [eax+4], eax
  0040BD21: add     eax, 8
  0040BD24: dec     edx
  0040BD25: jnz     short loc_40BD1B
  0040BD27: push    4; flProtect
  0040BD29: mov     edi, ebx
  0040BD2B: push    1000h; flAllocationType
  0040BD30: shl     edi, 0Fh
  0040BD33: add     edi, [ecx+0Ch]
  0040BD36: push    8000h; dwSize
  0040BD3B: push    edi; lpAddress
  0040BD3C: call    dword ptr ds:411078h
  0040BD42: test    eax, eax
  0040BD44: jnz     short loc_40BD4E
  0040BD46: or      eax, 0FFFFFFFFh
  0040BD49: jmp     loc_40BDEB
  0040BD4E: lea     edx, [edi+7000h]
  0040BD54: cmp     edi, edx
  0040BD56: mov     [ebp+var_4], edx
  0040BD59: ja      short loc_40BD9E
  0040BD5B: mov     ecx, edx
  0040BD5D: sub     ecx, edi
  0040BD5F: shr     ecx, 0Ch
  0040BD62: lea     eax, [edi+10h]
  0040BD65: inc     ecx
  0040BD66: or      dword ptr [eax-8], 0FFFFFFFFh
  0040BD6A: or      dword ptr [eax+0FECh], 0FFFFFFFFh
  0040BD71: lea     edx, [eax+0FFCh]
  0040BD77: mov     [eax], edx
  0040BD79: lea     edx, [eax-1004h]
  0040BD7F: mov     dword ptr [eax-4], 0FF0h
  0040BD86: mov     [eax+4], edx
  0040BD89: mov     dword ptr [eax+0FE8h], 0FF0h
  0040BD93: add     eax, 1000h
  0040BD98: dec     ecx
  0040BD99: jnz     short loc_40BD66
  0040BD9B: mov     edx, [ebp+var_4]
  0040BD9E: mov     eax, [ebp+var_8]
  0040BDA1: add     eax, 1F8h
  0040BDA6: lea     ecx, [edi+0Ch]
  0040BDA9: mov     [eax+4], ecx
  0040BDAC: mov     [ecx+8], eax
  0040BDAF: lea     ecx, [edx+0Ch]
  0040BDB2: mov     [eax+8], ecx
  0040BDB5: mov     [ecx+4], eax
  0040BDB8: and     dword ptr [esi+ebx*4+44h], 0
  0040BDBD: xor     edi, edi
  0040BDBF: inc     edi
  0040BDC0: mov     [esi+ebx*4+0C4h], edi
  0040BDC7: mov     al, [esi+43h]
  0040BDCA: mov     cl, al
  0040BDCC: inc     cl
  0040BDCE: test    al, al
  0040BDD0: mov     eax, [ebp+arg_0]
  0040BDD3: mov     [esi+43h], cl
  0040BDD6: jnz     short loc_40BDDB
  0040BDD8: or      [eax+4], edi
  0040BDDB: mov     edx, 80000000h
  0040BDE0: mov     ecx, ebx
  0040BDE2: shr     edx, cl
  0040BDE4: not     edx
  0040BDE6: and     [eax+8], edx
  0040BDE9: mov     eax, ebx
  0040BDEB: pop     edi
  0040BDEC: pop     esi
  0040BDED: pop     ebx
  0040BDEE: leave
  0040BDEF: retn

Function: ___sbh_resize_block
  0040BDF0: push    ebp
  0040BDF1: mov     ebp, esp
  0040BDF3: sub     esp, 0Ch
  0040BDF6: mov     ecx, [ebp+arg_0]
  0040BDF9: mov     eax, [ecx+10h]
  0040BDFC: push    ebx
  0040BDFD: push    esi
  0040BDFE: mov     esi, [ebp+arg_8]
  0040BE01: push    edi
  0040BE02: mov     edi, [ebp+arg_4]
  0040BE05: mov     edx, edi
  0040BE07: sub     edx, [ecx+0Ch]
  0040BE0A: add     esi, 17h
  0040BE0D: shr     edx, 0Fh
  0040BE10: mov     ecx, edx
  0040BE12: imul    ecx, 204h
  0040BE18: lea     ecx, [ecx+eax+144h]
  0040BE1F: mov     [ebp+var_C], ecx
  0040BE22: mov     ecx, [edi-4]
  0040BE25: and     esi, 0FFFFFFF0h
  0040BE28: dec     ecx
  0040BE29: cmp     esi, ecx
  0040BE2B: lea     edi, [ecx+edi-4]
  0040BE2F: mov     ebx, [edi]
  0040BE31: mov     [ebp+arg_8], ecx
  0040BE34: mov     [ebp+var_4], ebx
  0040BE37: jle     loc_40BF92
  0040BE3D: test    bl, 1
  0040BE40: jnz     loc_40BF8B
  0040BE46: add     ebx, ecx
  0040BE48: cmp     esi, ebx
  0040BE4A: jg      loc_40BF8B
  0040BE50: mov     ecx, [ebp+var_4]
  0040BE53: sar     ecx, 4
  0040BE56: dec     ecx
  0040BE57: cmp     ecx, 3Fh ; '?'
  0040BE5A: mov     [ebp+var_8], ecx
  0040BE5D: jbe     short loc_40BE65
  0040BE5F: push    3Fh ; '?'
  0040BE61: pop     ecx
  0040BE62: mov     [ebp+var_8], ecx
  0040BE65: mov     ebx, [edi+4]
  0040BE68: cmp     ebx, [edi+8]
  0040BE6B: jnz     short loc_40BEB0
  0040BE6D: cmp     ecx, 20h ; ' '
  0040BE70: mov     ebx, 80000000h
  0040BE75: jnb     short loc_40BE91
  0040BE77: shr     ebx, cl
  0040BE79: mov     ecx, [ebp+var_8]
  0040BE7C: lea     ecx, [ecx+eax+4]
  0040BE80: not     ebx
  0040BE82: and     [eax+edx*4+44h], ebx
  0040BE86: dec     byte ptr [ecx]
  0040BE88: jnz     short loc_40BEB0
  0040BE8A: mov     ecx, [ebp+arg_0]
  0040BE8D: and     [ecx], ebx
  0040BE8F: jmp     short loc_40BEB0
  0040BE91: add     ecx, 0FFFFFFE0h
  0040BE94: shr     ebx, cl
  0040BE96: mov     ecx, [ebp+var_8]
  0040BE99: lea     ecx, [ecx+eax+4]
  0040BE9D: not     ebx
  0040BE9F: and     [eax+edx*4+0C4h], ebx
  0040BEA6: dec     byte ptr [ecx]
  0040BEA8: jnz     short loc_40BEB0
  0040BEAA: mov     ecx, [ebp+arg_0]
  0040BEAD: and     [ecx+4], ebx
  0040BEB0: mov     ecx, [edi+8]
  0040BEB3: mov     ebx, [edi+4]
  0040BEB6: mov     [ecx+4], ebx
  0040BEB9: mov     ecx, [edi+4]
  0040BEBC: mov     edi, [edi+8]
  0040BEBF: mov     [ecx+8], edi
  0040BEC2: mov     ecx, [ebp+arg_8]
  0040BEC5: sub     ecx, esi
  0040BEC7: add     [ebp+var_4], ecx
  0040BECA: cmp     [ebp+var_4], 0
  0040BECE: jle     loc_40BF79
  0040BED4: mov     edi, [ebp+var_4]
  0040BED7: mov     ecx, [ebp+arg_4]
  0040BEDA: sar     edi, 4
  0040BEDD: dec     edi
  0040BEDE: cmp     edi, 3Fh ; '?'
  0040BEE1: lea     ecx, [ecx+esi-4]
  0040BEE5: jbe     short loc_40BEEA
  0040BEE7: push    3Fh ; '?'
  0040BEE9: pop     edi
  0040BEEA: mov     ebx, [ebp+var_C]
  0040BEED: lea     ebx, [ebx+edi*8]
  0040BEF0: mov     [ebp+arg_8], ebx
  0040BEF3: mov     ebx, [ebx+4]
  0040BEF6: mov     [ecx+4], ebx
  0040BEF9: mov     ebx, [ebp+arg_8]
  0040BEFC: mov     [ecx+8], ebx
  0040BEFF: mov     [ebx+4], ecx
  0040BF02: mov     ebx, [ecx+4]
  0040BF05: mov     [ebx+8], ecx
  0040BF08: mov     ebx, [ecx+4]
  0040BF0B: cmp     ebx, [ecx+8]
  0040BF0E: jnz     short loc_40BF67
  0040BF10: mov     cl, [edi+eax+4]
  0040BF14: mov     byte ptr [ebp+arg_8+3], cl
  0040BF17: inc     cl
  0040BF19: cmp     edi, 20h ; ' '
  0040BF1C: mov     [edi+eax+4], cl
  0040BF20: jnb     short loc_40BF3E
  0040BF22: cmp     byte ptr [ebp+arg_8+3], 0
  0040BF26: jnz     short loc_40BF36
  0040BF28: mov     ecx, edi
  0040BF2A: mov     ebx, 80000000h
  0040BF2F: shr     ebx, cl
  0040BF31: mov     ecx, [ebp+arg_0]
  0040BF34: or      [ecx], ebx
  0040BF36: lea     eax, [eax+edx*4+44h]
  0040BF3A: mov     ecx, edi
  0040BF3C: jmp     short loc_40BF5E
  0040BF3E: cmp     byte ptr [ebp+arg_8+3], 0
  0040BF42: jnz     short loc_40BF54
  0040BF44: lea     ecx, [edi-20h]
  0040BF47: mov     ebx, 80000000h
  0040BF4C: shr     ebx, cl
  0040BF4E: mov     ecx, [ebp+arg_0]
  0040BF51: or      [ecx+4], ebx
  0040BF54: lea     eax, [eax+edx*4+0C4h]
  0040BF5B: lea     ecx, [edi-20h]
  0040BF5E: mov     edx, 80000000h
  0040BF63: shr     edx, cl
  0040BF65: or      [eax], edx
  0040BF67: mov     edx, [ebp+arg_4]
  0040BF6A: mov     ecx, [ebp+var_4]
  0040BF6D: lea     eax, [edx+esi-4]
  0040BF71: mov     [eax], ecx
  0040BF73: mov     [ecx+eax-4], ecx
  0040BF77: jmp     short loc_40BF7C
  0040BF79: mov     edx, [ebp+arg_4]
  0040BF7C: lea     eax, [esi+1]
  0040BF7F: mov     [edx-4], eax
  0040BF82: mov     [edx+esi-8], eax
  0040BF86: jmp     loc_40C0C7
  0040BF8B: xor     eax, eax
  0040BF8D: jmp     loc_40C0CA
  0040BF92: jge     loc_40C0C7
  0040BF98: mov     ebx, [ebp+arg_4]
  0040BF9B: sub     [ebp+arg_8], esi
  0040BF9E: lea     ecx, [esi+1]
  0040BFA1: mov     [ebx-4], ecx
  0040BFA4: lea     ebx, [ebx+esi-4]
  0040BFA8: mov     esi, [ebp+arg_8]
  0040BFAB: sar     esi, 4
  0040BFAE: dec     esi
  0040BFAF: cmp     esi, 3Fh ; '?'
  0040BFB2: mov     [ebp+arg_4], ebx
  0040BFB5: mov     [ebx-4], ecx
  0040BFB8: jbe     short loc_40BFBD
  0040BFBA: push    3Fh ; '?'
  0040BFBC: pop     esi
  0040BFBD: test    byte ptr [ebp+var_4], 1
  0040BFC1: jnz     loc_40C047
  0040BFC7: mov     esi, [ebp+var_4]
  0040BFCA: sar     esi, 4
  0040BFCD: dec     esi
  0040BFCE: cmp     esi, 3Fh ; '?'
  0040BFD1: jbe     short loc_40BFD6
  0040BFD3: push    3Fh ; '?'
  0040BFD5: pop     esi
  0040BFD6: mov     ecx, [edi+4]
  0040BFD9: cmp     ecx, [edi+8]
  0040BFDC: jnz     short loc_40C020
  0040BFDE: cmp     esi, 20h ; ' '
  0040BFE1: mov     ebx, 80000000h
  0040BFE6: jnb     short loc_40C001
  0040BFE8: mov     ecx, esi
  0040BFEA: shr     ebx, cl
  0040BFEC: lea     esi, [esi+eax+4]
  0040BFF0: not     ebx
  0040BFF2: and     [eax+edx*4+44h], ebx
  0040BFF6: dec     byte ptr [esi]
  0040BFF8: jnz     short loc_40C01D
  0040BFFA: mov     ecx, [ebp+arg_0]
  0040BFFD: and     [ecx], ebx
  0040BFFF: jmp     short loc_40C01D
  0040C001: lea     ecx, [esi-20h]
  0040C004: shr     ebx, cl
  0040C006: lea     ecx, [esi+eax+4]
  0040C00A: not     ebx
  0040C00C: and     [eax+edx*4+0C4h], ebx
  0040C013: dec     byte ptr [ecx]
  0040C015: jnz     short loc_40C01D
  0040C017: mov     ecx, [ebp+arg_0]
  0040C01A: and     [ecx+4], ebx
  0040C01D: mov     ebx, [ebp+arg_4]
  0040C020: mov     ecx, [edi+8]
  0040C023: mov     esi, [edi+4]
  0040C026: mov     [ecx+4], esi
  0040C029: mov     esi, [edi+8]
  0040C02C: mov     ecx, [edi+4]
  0040C02F: mov     [ecx+8], esi
  0040C032: mov     esi, [ebp+arg_8]
  0040C035: add     esi, [ebp+var_4]
  0040C038: mov     [ebp+arg_8], esi
  0040C03B: sar     esi, 4
  0040C03E: dec     esi
  0040C03F: cmp     esi, 3Fh ; '?'
  0040C042: jbe     short loc_40C047
  0040C044: push    3Fh ; '?'
  0040C046: pop     esi
  0040C047: mov     ecx, [ebp+var_C]
  0040C04A: lea     ecx, [ecx+esi*8]
  0040C04D: mov     edi, [ecx+4]
  0040C050: mov     [ebx+8], ecx
  0040C053: mov     [ebx+4], edi
  0040C056: mov     [ecx+4], ebx
  0040C059: mov     ecx, [ebx+4]
  0040C05C: mov     [ecx+8], ebx
  0040C05F: mov     ecx, [ebx+4]
  0040C062: cmp     ecx, [ebx+8]
  0040C065: jnz     short loc_40C0BE
  0040C067: mov     cl, [esi+eax+4]
  0040C06B: mov     byte ptr [ebp+arg_4+3], cl
  0040C06E: inc     cl
  0040C070: cmp     esi, 20h ; ' '
  0040C073: mov     [esi+eax+4], cl
  0040C077: jnb     short loc_40C095
  0040C079: cmp     byte ptr [ebp+arg_4+3], 0
  0040C07D: jnz     short loc_40C08D
  0040C07F: mov     ecx, esi
  0040C081: mov     edi, 80000000h
  0040C086: shr     edi, cl
  0040C088: mov     ecx, [ebp+arg_0]
  0040C08B: or      [ecx], edi
  0040C08D: lea     eax, [eax+edx*4+44h]
  0040C091: mov     ecx, esi
  0040C093: jmp     short loc_40C0B5
  0040C095: cmp     byte ptr [ebp+arg_4+3], 0
  0040C099: jnz     short loc_40C0AB
  0040C09B: lea     ecx, [esi-20h]
  0040C09E: mov     edi, 80000000h
  0040C0A3: shr     edi, cl
  0040C0A5: mov     ecx, [ebp+arg_0]
  0040C0A8: or      [ecx+4], edi
  0040C0AB: lea     eax, [eax+edx*4+0C4h]
  0040C0B2: lea     ecx, [esi-20h]
  0040C0B5: mov     edx, 80000000h
  0040C0BA: shr     edx, cl
  0040C0BC: or      [eax], edx
  0040C0BE: mov     eax, [ebp+arg_8]
  0040C0C1: mov     [ebx], eax
  0040C0C3: mov     [eax+ebx-4], eax
  0040C0C7: xor     eax, eax
  0040C0C9: inc     eax
  0040C0CA: pop     edi
  0040C0CB: pop     esi
  0040C0CC: pop     ebx
  0040C0CD: leave
  0040C0CE: retn

Function: ___sbh_alloc_block
  0040C0CF: push    ebp
  0040C0D0: mov     ebp, esp
  0040C0D2: sub     esp, 14h
  0040C0D5: mov     ecx, [ebp+arg_0]
  0040C0D8: mov     eax, ds:41E664h
  0040C0DD: mov     edx, ds:41E668h
  0040C0E3: add     ecx, 17h
  0040C0E6: and     ecx, 0FFFFFFF0h
  0040C0E9: push    ebx
  0040C0EA: mov     [ebp+var_10], ecx
  0040C0ED: sar     ecx, 4
  0040C0F0: push    esi
  0040C0F1: lea     eax, [eax+eax*4]
  0040C0F4: push    edi
  0040C0F5: dec     ecx
  0040C0F6: cmp     ecx, 20h ; ' '
  0040C0F9: lea     edi, [edx+eax*4]
  0040C0FC: mov     [ebp+var_4], edi
  0040C0FF: jge     short loc_40C10C
  0040C101: or      esi, 0FFFFFFFFh
  0040C104: shr     esi, cl
  0040C106: or      [ebp+var_8], 0FFFFFFFFh
  0040C10A: jmp     short loc_40C119
  0040C10C: add     ecx, 0FFFFFFE0h
  0040C10F: or      eax, 0FFFFFFFFh
  0040C112: xor     esi, esi
  0040C114: shr     eax, cl
  0040C116: mov     [ebp+var_8], eax
  0040C119: mov     eax, ds:41E670h
  0040C11E: mov     ebx, eax
  0040C120: mov     [ebp+var_C], esi
  0040C123: cmp     ebx, edi
  0040C125: jmp     short loc_40C13B
  0040C127: mov     ecx, [ebx+4]
  0040C12A: mov     edi, [ebx]
  0040C12C: and     ecx, [ebp+var_8]
  0040C12F: and     edi, esi
  0040C131: or      ecx, edi
  0040C133: jnz     short loc_40C140
  0040C135: add     ebx, 14h
  0040C138: cmp     ebx, [ebp+var_4]
  0040C13B: mov     [ebp+arg_0], ebx
  0040C13E: jb      short loc_40C127
  0040C140: cmp     ebx, [ebp+var_4]
  0040C143: jnz     short loc_40C169
  0040C145: mov     ebx, edx
  0040C147: jmp     short loc_40C15A
  0040C149: mov     ecx, [ebx+4]
  0040C14C: mov     edi, [ebx]
  0040C14E: and     ecx, [ebp+var_8]
  0040C151: and     edi, esi
  0040C153: or      ecx, edi
  0040C155: jnz     short loc_40C161
  0040C157: add     ebx, 14h
  0040C15A: cmp     ebx, eax
  0040C15C: mov     [ebp+arg_0], ebx
  0040C15F: jb      short loc_40C149
  0040C161: cmp     ebx, eax
  0040C163: jz      loc_40C1FD
  0040C169: mov     ds:41E670h, ebx
  0040C16F: mov     eax, [ebx+10h]
  0040C172: mov     edx, [eax]
  0040C174: cmp     edx, 0FFFFFFFFh
  0040C177: mov     [ebp+var_4], edx
  0040C17A: jz      short loc_40C190
  0040C17C: mov     ecx, [eax+edx*4+0C4h]
  0040C183: mov     edi, [eax+edx*4+44h]
  0040C187: and     ecx, [ebp+var_8]
  0040C18A: and     edi, esi
  0040C18C: or      ecx, edi
  0040C18E: jnz     short loc_40C1C6
  0040C190: mov     edx, [eax+0C4h]
  0040C196: and     edx, [ebp+var_8]
  0040C199: and     [ebp+var_4], 0
  0040C19D: lea     ecx, [eax+44h]
  0040C1A0: mov     esi, [ecx]
  0040C1A2: and     esi, [ebp+var_C]
  0040C1A5: or      edx, esi
  0040C1A7: mov     esi, [ebp+var_C]
  0040C1AA: jnz     short loc_40C1C3
  0040C1AC: mov     edx, [ecx+84h]
  0040C1B2: and     edx, [ebp+var_8]
  0040C1B5: inc     [ebp+var_4]
  0040C1B8: add     ecx, 4
  0040C1BB: mov     edi, [ecx]
  0040C1BD: and     edi, esi
  0040C1BF: or      edx, edi
  0040C1C1: jz      short loc_40C1AC
  0040C1C3: mov     edx, [ebp+var_4]
  0040C1C6: mov     ecx, edx
  0040C1C8: imul    ecx, 204h
  0040C1CE: lea     ecx, [ecx+eax+144h]
  0040C1D5: mov     [ebp+var_C], ecx
  0040C1D8: mov     ecx, [eax+edx*4+44h]
  0040C1DC: xor     edi, edi
  0040C1DE: and     ecx, esi
  0040C1E0: jnz     short loc_40C24F
  0040C1E2: mov     ecx, [eax+edx*4+0C4h]
  0040C1E9: and     ecx, [ebp+var_8]
  0040C1EC: push    20h ; ' '
  0040C1EE: pop     edi
  0040C1EF: jmp     short loc_40C24F
  0040C1F1: cmp     dword ptr [ebx+8], 0
  0040C1F5: jnz     short loc_40C202
  0040C1F7: add     ebx, 14h
  0040C1FA: mov     [ebp+arg_0], ebx
  0040C1FD: cmp     ebx, [ebp+var_4]
  0040C200: jb      short loc_40C1F1
  0040C202: cmp     ebx, [ebp+var_4]
  0040C205: jnz     short loc_40C22D
  0040C207: mov     ebx, edx
  0040C209: jmp     short loc_40C214
  0040C20B: cmp     dword ptr [ebx+8], 0
  0040C20F: jnz     short loc_40C21B
  0040C211: add     ebx, 14h
  0040C214: cmp     ebx, eax
  0040C216: mov     [ebp+arg_0], ebx
  0040C219: jb      short loc_40C20B
  0040C21B: cmp     ebx, eax
  0040C21D: jnz     short loc_40C22D
  0040C21F: call    ___sbh_alloc_new_region
  0040C224: mov     ebx, eax
  0040C226: test    ebx, ebx
  0040C228: mov     [ebp+arg_0], ebx
  0040C22B: jz      short loc_40C245
  0040C22D: push    ebx
  0040C22E: call    ___sbh_alloc_new_group
  0040C233: pop     ecx
  0040C234: mov     ecx, [ebx+10h]
  0040C237: mov     [ecx], eax
  0040C239: mov     eax, [ebx+10h]
  0040C23C: cmp     dword ptr [eax], 0FFFFFFFFh
  0040C23F: jnz     loc_40C169
  0040C245: xor     eax, eax
  0040C247: jmp     loc_40C3C6
  0040C24C: shl     ecx, 1
  0040C24E: inc     edi
  0040C24F: test    ecx, ecx
  0040C251: jge     short loc_40C24C
  0040C253: mov     ecx, [ebp+var_C]
  0040C256: mov     edx, [ecx+edi*8+4]
  0040C25A: mov     ecx, [edx]
  0040C25C: sub     ecx, [ebp+var_10]
  0040C25F: mov     esi, ecx
  0040C261: sar     esi, 4
  0040C264: dec     esi
  0040C265: cmp     esi, 3Fh ; '?'
  0040C268: mov     [ebp+var_8], ecx
  0040C26B: jle     short loc_40C270
  0040C26D: push    3Fh ; '?'
  0040C26F: pop     esi
  0040C270: cmp     esi, edi
  0040C272: jz      loc_40C379
  0040C278: mov     ecx, [edx+4]
  0040C27B: cmp     ecx, [edx+8]
  0040C27E: jnz     short loc_40C2DC
  0040C280: cmp     edi, 20h ; ' '
  0040C283: mov     ebx, 80000000h
  0040C288: jge     short loc_40C2B0
  0040C28A: mov     ecx, edi
  0040C28C: shr     ebx, cl
  0040C28E: mov     ecx, [ebp+var_4]
  0040C291: lea     edi, [eax+edi+4]
  0040C295: not     ebx
  0040C297: mov     [ebp+var_14], ebx
  0040C29A: and     ebx, [eax+ecx*4+44h]
  0040C29E: mov     [eax+ecx*4+44h], ebx
  0040C2A2: dec     byte ptr [edi]
  0040C2A4: jnz     short loc_40C2D9
  0040C2A6: mov     ecx, [ebp+var_14]
  0040C2A9: mov     ebx, [ebp+arg_0]
  0040C2AC: and     [ebx], ecx
  0040C2AE: jmp     short loc_40C2DC
  0040C2B0: lea     ecx, [edi-20h]
  0040C2B3: shr     ebx, cl
  0040C2B5: mov     ecx, [ebp+var_4]
  0040C2B8: lea     ecx, [eax+ecx*4+0C4h]
  0040C2BF: lea     edi, [eax+edi+4]
  0040C2C3: not     ebx
  0040C2C5: and     [ecx], ebx
  0040C2C7: dec     byte ptr [edi]
  0040C2C9: mov     [ebp+var_14], ebx
  0040C2CC: jnz     short loc_40C2D9
  0040C2CE: mov     ebx, [ebp+arg_0]
  0040C2D1: mov     ecx, [ebp+var_14]
  0040C2D4: and     [ebx+4], ecx
  0040C2D7: jmp     short loc_40C2DC
  0040C2D9: mov     ebx, [ebp+arg_0]
  0040C2DC: cmp     [ebp+var_8], 0
  0040C2E0: mov     ecx, [edx+8]
  0040C2E3: mov     edi, [edx+4]
  0040C2E6: mov     [ecx+4], edi
  0040C2E9: mov     ecx, [edx+4]
  0040C2EC: mov     edi, [edx+8]
  0040C2EF: mov     [ecx+8], edi
  0040C2F2: jz      loc_40C385
  0040C2F8: mov     ecx, [ebp+var_C]
  0040C2FB: lea     ecx, [ecx+esi*8]
  0040C2FE: mov     edi, [ecx+4]
  0040C301: mov     [edx+8], ecx
  0040C304: mov     [edx+4], edi
  0040C307: mov     [ecx+4], edx
  0040C30A: mov     ecx, [edx+4]
  0040C30D: mov     [ecx+8], edx
  0040C310: mov     ecx, [edx+4]
  0040C313: cmp     ecx, [edx+8]
  0040C316: jnz     short loc_40C376
  0040C318: mov     cl, [esi+eax+4]
  0040C31C: mov     byte ptr [ebp+arg_0+3], cl
  0040C31F: inc     cl
  0040C321: cmp     esi, 20h ; ' '
  0040C324: mov     [esi+eax+4], cl
  0040C328: jge     short loc_40C34D
  0040C32A: cmp     byte ptr [ebp+arg_0+3], 0
  0040C32E: jnz     short loc_40C33B
  0040C330: mov     edi, 80000000h
  0040C335: mov     ecx, esi
  0040C337: shr     edi, cl
  0040C339: or      [ebx], edi
  0040C33B: mov     ecx, esi
  0040C33D: mov     edi, 80000000h
  0040C342: shr     edi, cl
  0040C344: mov     ecx, [ebp+var_4]
  0040C347: or      [eax+ecx*4+44h], edi
  0040C34B: jmp     short loc_40C376
  0040C34D: cmp     byte ptr [ebp+arg_0+3], 0
  0040C351: jnz     short loc_40C360
  0040C353: lea     ecx, [esi-20h]
  0040C356: mov     edi, 80000000h
  0040C35B: shr     edi, cl
  0040C35D: or      [ebx+4], edi
  0040C360: mov     ecx, [ebp+var_4]
  0040C363: lea     edi, [eax+ecx*4+0C4h]
  0040C36A: lea     ecx, [esi-20h]
  0040C36D: mov     esi, 80000000h
  0040C372: shr     esi, cl
  0040C374: or      [edi], esi
  0040C376: mov     ecx, [ebp+var_8]
  0040C379: test    ecx, ecx
  0040C37B: jz      short loc_40C388
  0040C37D: mov     [edx], ecx
  0040C37F: mov     [ecx+edx-4], ecx
  0040C383: jmp     short loc_40C388
  0040C385: mov     ecx, [ebp+var_8]
  0040C388: mov     esi, [ebp+var_10]
  0040C38B: add     edx, ecx
  0040C38D: lea     ecx, [esi+1]
  0040C390: mov     [edx], ecx
  0040C392: mov     [edx+esi-4], ecx
  0040C396: mov     esi, [ebp+var_C]
  0040C399: mov     ecx, [esi]
  0040C39B: test    ecx, ecx
  0040C39D: lea     edi, [ecx+1]
  0040C3A0: mov     [esi], edi
  0040C3A2: jnz     short loc_40C3BE
  0040C3A4: cmp     ebx, ds:41E660h
  0040C3AA: jnz     short loc_40C3BE
  0040C3AC: mov     ecx, [ebp+var_4]
  0040C3AF: cmp     ecx, ds:41E678h
  0040C3B5: jnz     short loc_40C3BE
  0040C3B7: and     dword ptr ds:41E660h, 0
  0040C3BE: mov     ecx, [ebp+var_4]
  0040C3C1: mov     [eax], ecx
  0040C3C3: lea     eax, [edx+4]
  0040C3C6: pop     edi
  0040C3C7: pop     esi
  0040C3C8: pop     ebx
  0040C3C9: leave
  0040C3CA: retn

Function: __NMSG_WRITE
  0040C3CB: push    ebp
  0040C3CC: lea     ebp, [esp-8Ch]
  0040C3D3: sub     esp, 10Ch
  0040C3D9: mov     eax, ds:413390h
  0040C3DE: mov     ecx, [ebp+8Ch+NumberOfBytesWritten]
  0040C3E4: push    ebx
  0040C3E5: push    esi
  0040C3E6: mov     [ebp+8Ch+StackCookie], eax
  0040C3EC: xor     edx, edx
  0040C3EE: push    edi
  0040C3EF: xor     eax, eax
  0040C3F1: cmp     ecx, ds:413260h[eax*8]
  0040C3F8: jz      short loc_40C400
  0040C3FA: inc     eax
  0040C3FB: cmp     eax, 13h
  0040C3FE: jb      short loc_40C3F1
  0040C400: mov     esi, eax
  0040C402: shl     esi, 3
  0040C405: cmp     ecx, [esi+413260h]
  0040C40B: jnz     loc_40C526
  0040C411: mov     eax, ds:41E048h
  0040C416: cmp     eax, 1
  0040C419: jz      loc_40C4FE
  0040C41F: cmp     eax, edx
  0040C421: jnz     short loc_40C430
  0040C423: cmp     dword ptr ds:413094h, 1
  0040C42A: jz      loc_40C4FE
  0040C430: cmp     ecx, 0FCh ; 'ü'
  0040C436: jz      loc_40C526
  0040C43C: push    104h; nSize
  0040C441: lea     eax, [ebp+8Ch+Filename]
  0040C444: push    eax; lpFilename
  0040C445: push    edx; hModule
  0040C446: mov     [ebp+8Ch+var_8], dl
  0040C44C: call    dword ptr ds:411084h
  0040C452: test    eax, eax
  0040C454: jnz     short loc_40C466
  0040C456: lea     eax, [ebp+8Ch+Filename]
  0040C459: push    411F68h; Source
  0040C45E: push    eax; Destination
  0040C45F: call    _strcpy
  0040C464: pop     ecx
  0040C465: pop     ecx
  0040C466: lea     edi, [ebp+8Ch+Filename]
  0040C469: mov     eax, edi
  0040C46B: push    eax; Str
  0040C46C: call    _strlen
  0040C471: inc     eax
  0040C472: cmp     eax, 3Ch ; '<'
  0040C475: pop     ecx
  0040C476: jbe     short loc_40C49A
  0040C478: mov     eax, edi
  0040C47A: push    eax; Str
  0040C47B: call    _strlen
  0040C480: mov     edi, eax
  0040C482: lea     eax, [ebp+8Ch+Filename]
  0040C485: sub     eax, 3Bh ; ';'
  0040C488: push    3; Count
  0040C48A: add     edi, eax
  0040C48C: push    41181Ch; Source
  0040C491: push    edi; Destination
  0040C492: call    _strncpy
  0040C497: add     esp, 10h
  0040C49A: push    edi; Str
  0040C49B: call    _strlen
  0040C4A0: push    dword ptr [esi+413264h]; Str
  0040C4A6: mov     ebx, eax
  0040C4A8: call    _strlen
  0040C4AD: lea     eax, [ebx+eax+1Ch]
  0040C4B1: pop     ecx
  0040C4B2: add     eax, 3
  0040C4B5: pop     ecx
  0040C4B6: and     eax, 0FFFFFFFCh
  0040C4B9: call    __alloca_probe
  0040C4BE: mov     ebx, esp
  0040C4C0: push    411F4Ch; Source
  0040C4C5: push    ebx; Destination
  0040C4C6: call    _strcpy
  0040C4CB: push    edi; Source
  0040C4CC: push    ebx; Destination
  0040C4CD: call    _strcat
  0040C4D2: push    411F48h; Source
  0040C4D7: push    ebx; Destination
  0040C4D8: call    _strcat
  0040C4DD: push    dword ptr [esi+413264h]; Source
  0040C4E3: push    ebx; Destination
  0040C4E4: call    _strcat
  0040C4E9: push    12010h
  0040C4EE: push    411F20h
  0040C4F3: push    ebx
  0040C4F4: call    ___crtMessageBoxA
  0040C4F9: add     esp, 2Ch
  0040C4FC: jmp     short loc_40C526
  0040C4FE: push    edx; lpOverlapped
  0040C4FF: lea     eax, [ebp+8Ch+NumberOfBytesWritten]
  0040C505: push    eax; lpNumberOfBytesWritten
  0040C506: lea     esi, [esi+413264h]
  0040C50C: push    dword ptr [esi]; Str
  0040C50E: call    _strlen
  0040C513: pop     ecx
  0040C514: push    eax; nNumberOfBytesToWrite
  0040C515: push    dword ptr [esi]; lpBuffer
  0040C517: push    0FFFFFFF4h; nStdHandle
  0040C519: call    dword ptr ds:411080h
  0040C51F: push    eax; hFile
  0040C520: call    dword ptr ds:41107Ch
  0040C526: lea     esp, [ebp-8Ch]
  0040C52C: mov     ecx, [ebp+8Ch+StackCookie]; StackCookie
  0040C532: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040C537: pop     edi
  0040C538: pop     esi
  0040C539: pop     ebx
  0040C53A: add     ebp, 8Ch ; 'Œ'
  0040C540: leave
  0040C541: retn

Function: __FF_MSGBANNER
  0040C542: mov     eax, ds:41E048h
  0040C547: cmp     eax, 1
  0040C54A: jz      short loc_40C559
  0040C54C: test    eax, eax
  0040C54E: jnz     short locret_C57A
  0040C550: cmp     dword ptr ds:413094h, 1
  0040C557: jnz     short locret_C57A
  0040C559: push    0FCh ; 'ü'; NumberOfBytesWritten
  0040C55E: call    __NMSG_WRITE
  0040C563: mov     eax, ds:41E134h
  0040C568: test    eax, eax
  0040C56A: pop     ecx
  0040C56B: jz      short loc_40C56F
  0040C56D: call    eax
  0040C56F: push    0FFh; NumberOfBytesWritten
  0040C574: call    __NMSG_WRITE
  0040C579: pop     ecx
  0040C57A: retn

Function: __XcptFilter
  0040C57B: push    ebp
  0040C57C: mov     ebp, esp
  0040C57E: mov     edx, [ebp+arg_0]
  0040C581: mov     eax, ds:413378h
  0040C586: push    ebx
  0040C587: mov     ecx, 4132F8h
  0040C58C: push    esi
  0040C58D: cmp     [ecx], edx
  0040C58F: jz      short loc_40C5A2
  0040C591: lea     esi, [eax+eax*2]
  0040C594: add     ecx, 0Ch
  0040C597: lea     esi, ds:4132F8h[esi*4]
  0040C59E: cmp     ecx, esi
  0040C5A0: jb      short loc_40C58D
  0040C5A2: lea     eax, [eax+eax*2]
  0040C5A5: lea     eax, ds:4132F8h[eax*4]
  0040C5AC: cmp     ecx, eax
  0040C5AE: jnb     short loc_40C5B4
  0040C5B0: cmp     [ecx], edx
  0040C5B2: jz      short loc_40C5B6
  0040C5B4: xor     ecx, ecx
  0040C5B6: test    ecx, ecx
  0040C5B8: jz      loc_40C6DF
  0040C5BE: mov     ebx, [ecx+8]
  0040C5C1: test    ebx, ebx
  0040C5C3: jz      loc_40C6DF
  0040C5C9: cmp     ebx, 5
  0040C5CC: jnz     short loc_40C5DA
  0040C5CE: and     dword ptr [ecx+8], 0
  0040C5D2: xor     eax, eax
  0040C5D4: inc     eax
  0040C5D5: jmp     loc_40C6E8
  0040C5DA: cmp     ebx, 1
  0040C5DD: jz      loc_40C6DA
  0040C5E3: mov     eax, ds:41E138h
  0040C5E8: mov     [ebp+arg_0], eax
  0040C5EB: mov     eax, [ebp+ExceptionInfo]
  0040C5EE: mov     ds:41E138h, eax
  0040C5F3: mov     eax, [ecx+4]
  0040C5F6: cmp     eax, 8
  0040C5F9: jnz     loc_40C6CA
  0040C5FF: mov     eax, ds:413370h
  0040C604: mov     edx, ds:413374h
  0040C60A: add     edx, eax
  0040C60C: cmp     eax, edx
  0040C60E: jge     short loc_40C625
  0040C610: lea     esi, [eax+eax*2]
  0040C613: lea     esi, ds:413300h[esi*4]
  0040C61A: sub     edx, eax
  0040C61C: and     dword ptr [esi], 0
  0040C61F: add     esi, 0Ch
  0040C622: dec     edx
  0040C623: jnz     short loc_40C61C
  0040C625: mov     ecx, [ecx]
  0040C627: cmp     ecx, 0C000008Eh
  0040C62D: mov     esi, ds:41337Ch
  0040C633: jnz     short loc_40C641
  0040C635: mov     dword ptr ds:41337Ch, 83h ; 'ƒ'
  0040C63F: jmp     short loc_40C6B7
  0040C641: cmp     ecx, 0C0000090h
  0040C647: jnz     short loc_40C655
  0040C649: mov     dword ptr ds:41337Ch, 81h
  0040C653: jmp     short loc_40C6B7
  0040C655: cmp     ecx, 0C0000091h
  0040C65B: jnz     short loc_40C669
  0040C65D: mov     dword ptr ds:41337Ch, 84h ; '„'
  0040C667: jmp     short loc_40C6B7
  0040C669: cmp     ecx, 0C0000093h
  0040C66F: jnz     short loc_40C67D
  0040C671: mov     dword ptr ds:41337Ch, 85h ; '…'
  0040C67B: jmp     short loc_40C6B7
  0040C67D: cmp     ecx, 0C000008Dh
  0040C683: jnz     short loc_40C691
  0040C685: mov     dword ptr ds:41337Ch, 82h ; '‚'
  0040C68F: jmp     short loc_40C6B7
  0040C691: cmp     ecx, 0C000008Fh
  0040C697: jnz     short loc_40C6A5
  0040C699: mov     dword ptr ds:41337Ch, 86h ; '†'
  0040C6A3: jmp     short loc_40C6B7
  0040C6A5: cmp     ecx, 0C0000092h
  0040C6AB: jnz     short loc_40C6B7
  0040C6AD: mov     dword ptr ds:41337Ch, 8Ah ; 'Š'
  0040C6B7: push    dword ptr ds:41337Ch
  0040C6BD: push    8
  0040C6BF: call    ebx
  0040C6C1: pop     ecx
  0040C6C2: mov     ds:41337Ch, esi
  0040C6C8: jmp     short loc_40C6D1
  0040C6CA: and     dword ptr [ecx+8], 0
  0040C6CE: push    eax
  0040C6CF: call    ebx
  0040C6D1: mov     eax, [ebp+arg_0]
  0040C6D4: pop     ecx
  0040C6D5: mov     ds:41E138h, eax
  0040C6DA: or      eax, 0FFFFFFFFh
  0040C6DD: jmp     short loc_40C6E8
  0040C6DF: push    [ebp+ExceptionInfo]; ExceptionInfo
  0040C6E2: call    dword ptr ds:411088h
  0040C6E8: pop     esi
  0040C6E9: pop     ebx
  0040C6EA: pop     ebp
  0040C6EB: retn

Function: __wincmdln
  0040C6EC: push    esi
  0040C6ED: push    edi
  0040C6EE: xor     edi, edi
  0040C6F0: cmp     ds:41E690h, edi
  0040C6F6: jnz     short loc_40C6FD
  0040C6F8: call    ___initmbctable
  0040C6FD: mov     esi, ds:41E694h
  0040C703: test    esi, esi
  0040C705: jnz     short loc_40C70C
  0040C707: mov     esi, 41170Dh
  0040C70C: mov     al, [esi]
  0040C70E: cmp     al, 20h ; ' '
  0040C710: ja      short loc_40C71A
  0040C712: test    al, al
  0040C714: jz      short loc_40C744
  0040C716: test    edi, edi
  0040C718: jz      short loc_40C73E
  0040C71A: cmp     al, 22h ; '"'
  0040C71C: jnz     short loc_40C727
  0040C71E: xor     ecx, ecx
  0040C720: test    edi, edi
  0040C722: setz    cl
  0040C725: mov     edi, ecx
  0040C727: movzx   eax, al
  0040C72A: push    eax; Ch
  0040C72B: call    __ismbblead
  0040C730: test    eax, eax
  0040C732: pop     ecx
  0040C733: jz      short loc_40C736
  0040C735: inc     esi
  0040C736: inc     esi
  0040C737: jmp     short loc_40C70C
  0040C739: cmp     al, 20h ; ' '
  0040C73B: ja      short loc_40C744
  0040C73D: inc     esi
  0040C73E: mov     al, [esi]
  0040C740: test    al, al
  0040C742: jnz     short loc_40C739
  0040C744: pop     edi
  0040C745: mov     eax, esi
  0040C747: pop     esi
  0040C748: retn

Function: __setenvp
  0040C749: push    ebx
  0040C74A: xor     ebx, ebx
  0040C74C: cmp     ds:41E690h, ebx
  0040C752: push    esi
  0040C753: push    edi
  0040C754: jnz     short loc_40C75B
  0040C756: call    ___initmbctable
  0040C75B: mov     esi, ds:41E040h
  0040C761: xor     edi, edi
  0040C763: cmp     esi, ebx
  0040C765: jnz     short loc_40C779
  0040C767: jmp     short loc_40C799
  0040C769: cmp     al, 3Dh ; '='
  0040C76B: jz      short loc_40C76E
  0040C76D: inc     edi
  0040C76E: push    esi; Str
  0040C76F: call    _strlen
  0040C774: pop     ecx
  0040C775: lea     esi, [esi+eax+1]
  0040C779: mov     al, [esi]
  0040C77B: cmp     al, bl
  0040C77D: jnz     short loc_40C769
  0040C77F: lea     eax, ds:4[edi*4]
  0040C786: push    eax; Size
  0040C787: call    _malloc
  0040C78C: mov     edi, eax
  0040C78E: cmp     edi, ebx
  0040C790: pop     ecx
  0040C791: mov     ds:41E0C4h, edi
  0040C797: jnz     short loc_40C79E
  0040C799: or      eax, 0FFFFFFFFh
  0040C79C: jmp     short loc_40C7F6
  0040C79E: mov     esi, ds:41E040h
  0040C7A4: push    ebp
  0040C7A5: jmp     short loc_40C7D1
  0040C7A7: push    esi; Str
  0040C7A8: call    _strlen
  0040C7AD: mov     ebp, eax
  0040C7AF: inc     ebp
  0040C7B0: cmp     byte ptr [esi], 3Dh ; '='
  0040C7B3: pop     ecx
  0040C7B4: jz      short loc_40C7CF
  0040C7B6: push    ebp; Size
  0040C7B7: call    _malloc
  0040C7BC: cmp     eax, ebx
  0040C7BE: pop     ecx
  0040C7BF: mov     [edi], eax
  0040C7C1: jz      short loc_40C7FA
  0040C7C3: push    esi; Source
  0040C7C4: push    eax; Destination
  0040C7C5: call    _strcpy
  0040C7CA: pop     ecx
  0040C7CB: pop     ecx
  0040C7CC: add     edi, 4
  0040C7CF: add     esi, ebp
  0040C7D1: cmp     [esi], bl
  0040C7D3: jnz     short loc_40C7A7
  0040C7D5: push    dword ptr ds:41E040h; Block
  0040C7DB: call    _free
  0040C7E0: mov     ds:41E040h, ebx
  0040C7E6: mov     [edi], ebx
  0040C7E8: mov     dword ptr ds:41E684h, 1
  0040C7F2: xor     eax, eax
  0040C7F4: pop     ecx
  0040C7F5: pop     ebp
  0040C7F6: pop     edi
  0040C7F7: pop     esi
  0040C7F8: pop     ebx
  0040C7F9: retn
  0040C7FA: push    dword ptr ds:41E0C4h; Block
  0040C800: call    _free
  0040C805: mov     ds:41E0C4h, ebx
  0040C80B: or      eax, 0FFFFFFFFh
  0040C80E: jmp     short loc_40C7F4

Function: _parse_cmdline
  0040C810: push    ebp
  0040C811: mov     ebp, esp
  0040C813: push    ecx
  0040C814: push    ebx
  0040C815: mov     ebx, [ebp+arg_4]
  0040C818: xor     edx, edx
  0040C81A: cmp     [ebp+arg_0], edx
  0040C81D: push    edi
  0040C81E: mov     [esi], edx
  0040C820: mov     edi, ecx
  0040C822: mov     dword ptr [ebx], 1
  0040C828: jz      short loc_40C833
  0040C82A: mov     ecx, [ebp+arg_0]
  0040C82D: add     [ebp+arg_0], 4
  0040C831: mov     [ecx], edi
  0040C833: cmp     byte ptr [eax], 22h ; '"'
  0040C836: jnz     short loc_40C846
  0040C838: xor     ecx, ecx
  0040C83A: test    edx, edx
  0040C83C: setz    cl
  0040C83F: inc     eax
  0040C840: mov     edx, ecx
  0040C842: mov     cl, 22h ; '"'
  0040C844: jmp     short loc_40C873
  0040C846: inc     dword ptr [esi]
  0040C848: test    edi, edi
  0040C84A: jz      short loc_40C851
  0040C84C: mov     cl, [eax]
  0040C84E: mov     [edi], cl
  0040C850: inc     edi
  0040C851: mov     cl, [eax]
  0040C853: movzx   ebx, cl
  0040C856: inc     eax
  0040C857: test    byte ptr [ebx+41E321h], 4
  0040C85E: jz      short loc_40C86C
  0040C860: inc     dword ptr [esi]
  0040C862: test    edi, edi
  0040C864: jz      short loc_40C86B
  0040C866: mov     bl, [eax]
  0040C868: mov     [edi], bl
  0040C86A: inc     edi
  0040C86B: inc     eax
  0040C86C: test    cl, cl
  0040C86E: mov     ebx, [ebp+arg_4]
  0040C871: jz      short loc_40C8A5
  0040C873: test    edx, edx
  0040C875: jnz     short loc_40C833
  0040C877: cmp     cl, 20h ; ' '
  0040C87A: jz      short loc_40C881
  0040C87C: cmp     cl, 9
  0040C87F: jnz     short loc_40C833
  0040C881: test    edi, edi
  0040C883: jz      short loc_40C889
  0040C885: mov     byte ptr [edi-1], 0
  0040C889: and     [ebp+var_4], 0
  0040C88D: cmp     byte ptr [eax], 0
  0040C890: jz      loc_40C96C
  0040C896: mov     cl, [eax]
  0040C898: cmp     cl, 20h ; ' '
  0040C89B: jz      short loc_40C8A2
  0040C89D: cmp     cl, 9
  0040C8A0: jnz     short loc_40C8A8
  0040C8A2: inc     eax
  0040C8A3: jmp     short loc_40C896
  0040C8A5: dec     eax
  0040C8A6: jmp     short loc_40C889
  0040C8A8: cmp     byte ptr [eax], 0
  0040C8AB: jz      loc_40C96C
  0040C8B1: cmp     [ebp+arg_0], 0
  0040C8B5: jz      short loc_40C8C0
  0040C8B7: mov     ecx, [ebp+arg_0]
  0040C8BA: add     [ebp+arg_0], 4
  0040C8BE: mov     [ecx], edi
  0040C8C0: inc     dword ptr [ebx]
  0040C8C2: xor     ebx, ebx
  0040C8C4: inc     ebx
  0040C8C5: xor     edx, edx
  0040C8C7: jmp     short loc_40C8CB
  0040C8C9: inc     eax
  0040C8CA: inc     edx
  0040C8CB: cmp     byte ptr [eax], 5Ch ; '\'
  0040C8CE: jz      short loc_40C8C9
  0040C8D0: cmp     byte ptr [eax], 22h ; '"'
  0040C8D3: jnz     short loc_40C8FB
  0040C8D5: test    dl, 1
  0040C8D8: jnz     short loc_40C8F9
  0040C8DA: cmp     [ebp+var_4], 0
  0040C8DE: jz      short loc_40C8EC
  0040C8E0: lea     ecx, [eax+1]
  0040C8E3: cmp     byte ptr [ecx], 22h ; '"'
  0040C8E6: jnz     short loc_40C8EC
  0040C8E8: mov     eax, ecx
  0040C8EA: jmp     short loc_40C8EE
  0040C8EC: xor     ebx, ebx
  0040C8EE: xor     ecx, ecx
  0040C8F0: cmp     [ebp+var_4], ecx
  0040C8F3: setz    cl
  0040C8F6: mov     [ebp+var_4], ecx
  0040C8F9: shr     edx, 1
  0040C8FB: test    edx, edx
  0040C8FD: jz      short loc_40C90C
  0040C8FF: test    edi, edi
  0040C901: jz      short loc_40C907
  0040C903: mov     byte ptr [edi], 5Ch ; '\'
  0040C906: inc     edi
  0040C907: inc     dword ptr [esi]
  0040C909: dec     edx
  0040C90A: jnz     short loc_40C8FF
  0040C90C: mov     cl, [eax]
  0040C90E: test    cl, cl
  0040C910: jz      short loc_40C95A
  0040C912: cmp     [ebp+var_4], 0
  0040C916: jnz     short loc_40C922
  0040C918: cmp     cl, 20h ; ' '
  0040C91B: jz      short loc_40C95A
  0040C91D: cmp     cl, 9
  0040C920: jz      short loc_40C95A
  0040C922: test    ebx, ebx
  0040C924: jz      short loc_40C954
  0040C926: test    edi, edi
  0040C928: jz      short loc_40C943
  0040C92A: movzx   edx, cl
  0040C92D: test    byte ptr [edx+41E321h], 4
  0040C934: jz      short loc_40C93C
  0040C936: mov     [edi], cl
  0040C938: inc     edi
  0040C939: inc     eax
  0040C93A: inc     dword ptr [esi]
  0040C93C: mov     cl, [eax]
  0040C93E: mov     [edi], cl
  0040C940: inc     edi
  0040C941: jmp     short loc_40C952
  0040C943: movzx   ecx, cl
  0040C946: test    byte ptr [ecx+41E321h], 4
  0040C94D: jz      short loc_40C952
  0040C94F: inc     eax
  0040C950: inc     dword ptr [esi]
  0040C952: inc     dword ptr [esi]
  0040C954: inc     eax
  0040C955: jmp     loc_40C8C2
  0040C95A: test    edi, edi
  0040C95C: jz      short loc_40C962
  0040C95E: mov     byte ptr [edi], 0
  0040C961: inc     edi
  0040C962: inc     dword ptr [esi]
  0040C964: mov     ebx, [ebp+arg_4]
  0040C967: jmp     loc_40C88D
  0040C96C: mov     eax, [ebp+arg_0]
  0040C96F: test    eax, eax
  0040C971: jz      short loc_40C976
  0040C973: and     dword ptr [eax], 0
  0040C976: inc     dword ptr [ebx]
  0040C978: pop     edi
  0040C979: pop     ebx
  0040C97A: leave
  0040C97B: retn

Function: __setargv
  0040C97C: push    ebp
  0040C97D: mov     ebp, esp
  0040C97F: push    ecx
  0040C980: push    ecx
  0040C981: push    ebx
  0040C982: push    esi
  0040C983: push    edi
  0040C984: xor     edi, edi
  0040C986: cmp     ds:41E690h, edi
  0040C98C: jnz     short loc_40C993
  0040C98E: call    ___initmbctable
  0040C993: push    104h; nSize
  0040C998: mov     esi, 41E140h
  0040C99D: push    esi; lpFilename
  0040C99E: push    edi; hModule
  0040C99F: mov     byte ptr ds:41E244h, 0
  0040C9A6: call    dword ptr ds:411084h
  0040C9AC: mov     eax, ds:41E694h
  0040C9B1: cmp     eax, edi
  0040C9B3: mov     ds:41E0D4h, esi
  0040C9B9: jz      short loc_40C9C2
  0040C9BB: cmp     byte ptr [eax], 0
  0040C9BE: mov     ebx, eax
  0040C9C0: jnz     short loc_40C9C4
  0040C9C2: mov     ebx, esi
  0040C9C4: lea     eax, [ebp+var_4]
  0040C9C7: push    eax
  0040C9C8: push    edi
  0040C9C9: lea     esi, [ebp+var_8]
  0040C9CC: xor     ecx, ecx
  0040C9CE: mov     eax, ebx
  0040C9D0: call    _parse_cmdline
  0040C9D5: mov     esi, [ebp+var_4]
  0040C9D8: mov     eax, [ebp+var_8]
  0040C9DB: shl     esi, 2
  0040C9DE: add     eax, esi
  0040C9E0: push    eax; Size
  0040C9E1: call    _malloc
  0040C9E6: mov     edi, eax
  0040C9E8: add     esp, 0Ch
  0040C9EB: test    edi, edi
  0040C9ED: jnz     short loc_40C9F4
  0040C9EF: or      eax, 0FFFFFFFFh
  0040C9F2: jmp     short loc_40CA19
  0040C9F4: lea     eax, [ebp+var_4]
  0040C9F7: push    eax
  0040C9F8: lea     ecx, [esi+edi]
  0040C9FB: push    edi
  0040C9FC: lea     esi, [ebp+var_8]
  0040C9FF: mov     eax, ebx
  0040CA01: call    _parse_cmdline
  0040CA06: mov     eax, [ebp+var_4]
  0040CA09: dec     eax
  0040CA0A: pop     ecx
  0040CA0B: mov     ds:41E0B8h, eax
  0040CA10: pop     ecx
  0040CA11: mov     ds:41E0BCh, edi
  0040CA17: xor     eax, eax
  0040CA19: pop     edi
  0040CA1A: pop     esi
  0040CA1B: pop     ebx
  0040CA1C: leave
  0040CA1D: retn

Function: ___crtGetEnvironmentStringsA
  0040CA1E: push    ecx
  0040CA1F: push    ecx
  0040CA20: mov     eax, ds:41E248h
  0040CA25: push    ebx
  0040CA26: push    ebp
  0040CA27: push    esi
  0040CA28: push    edi
  0040CA29: mov     edi, ds:41109Ch
  0040CA2F: xor     ebx, ebx
  0040CA31: xor     esi, esi
  0040CA33: cmp     eax, ebx
  0040CA35: push    2
  0040CA37: pop     ebp
  0040CA38: jnz     short loc_40CA67
  0040CA3A: call    edi ; GetEnvironmentStringsW
  0040CA3C: mov     esi, eax
  0040CA3E: cmp     esi, ebx
  0040CA40: jz      short loc_40CA4E
  0040CA42: mov     dword ptr ds:41E248h, 1
  0040CA4C: jmp     short loc_40CA6C
  0040CA4E: call    dword ptr ds:411034h
  0040CA54: cmp     eax, 78h ; 'x'
  0040CA57: jnz     short loc_40CA62
  0040CA59: mov     eax, ebp
  0040CA5B: mov     ds:41E248h, eax
  0040CA60: jmp     short loc_40CA67
  0040CA62: mov     eax, ds:41E248h
  0040CA67: cmp     eax, 1
  0040CA6A: jnz     short loc_40CAE9
  0040CA6C: cmp     esi, ebx
  0040CA6E: jnz     short loc_40CA78
  0040CA70: call    edi ; GetEnvironmentStringsW
  0040CA72: mov     esi, eax
  0040CA74: cmp     esi, ebx
  0040CA76: jz      short loc_40CAF1
  0040CA78: cmp     [esi], bx
  0040CA7B: mov     eax, esi
  0040CA7D: jz      short loc_40CA8D
  0040CA7F: add     eax, ebp
  0040CA81: cmp     [eax], bx
  0040CA84: jnz     short loc_40CA7F
  0040CA86: add     eax, ebp
  0040CA88: cmp     [eax], bx
  0040CA8B: jnz     short loc_40CA7F
  0040CA8D: mov     edi, ds:411098h
  0040CA93: push    ebx; lpUsedDefaultChar
  0040CA94: push    ebx; lpDefaultChar
  0040CA95: push    ebx; cbMultiByte
  0040CA96: sub     eax, esi
  0040CA98: push    ebx; lpMultiByteStr
  0040CA99: sar     eax, 1
  0040CA9B: inc     eax
  0040CA9C: push    eax; cchWideChar
  0040CA9D: push    esi; lpWideCharStr
  0040CA9E: push    ebx; dwFlags
  0040CA9F: push    ebx; CodePage
  0040CAA0: mov     [esp+38h+cchWideChar], eax
  0040CAA4: call    edi ; WideCharToMultiByte
  0040CAA6: mov     ebp, eax
  0040CAA8: cmp     ebp, ebx
  0040CAAA: jz      short loc_40CADE
  0040CAAC: push    ebp; Size
  0040CAAD: call    _malloc
  0040CAB2: cmp     eax, ebx
  0040CAB4: pop     ecx
  0040CAB5: mov     [esp+18h+Block], eax
  0040CAB9: jz      short loc_40CADE
  0040CABB: push    ebx; lpUsedDefaultChar
  0040CABC: push    ebx; lpDefaultChar
  0040CABD: push    ebp; cbMultiByte
  0040CABE: push    eax; lpMultiByteStr
  0040CABF: push    [esp+28h+cchWideChar]; cchWideChar
  0040CAC3: push    esi; lpWideCharStr
  0040CAC4: push    ebx; dwFlags
  0040CAC5: push    ebx; CodePage
  0040CAC6: call    edi ; WideCharToMultiByte
  0040CAC8: test    eax, eax
  0040CACA: jnz     short loc_40CADA
  0040CACC: push    [esp+18h+Block]; Block
  0040CAD0: call    _free
  0040CAD5: pop     ecx
  0040CAD6: mov     [esp+18h+Block], ebx
  0040CADA: mov     ebx, [esp+18h+Block]
  0040CADE: push    esi; penv
  0040CADF: call    dword ptr ds:411094h
  0040CAE5: mov     eax, ebx
  0040CAE7: jmp     short loc_40CB39
  0040CAE9: cmp     eax, ebp
  0040CAEB: jz      short loc_40CAF5
  0040CAED: cmp     eax, ebx
  0040CAEF: jz      short loc_40CAF5
  0040CAF1: xor     eax, eax
  0040CAF3: jmp     short loc_40CB39
  0040CAF5: call    dword ptr ds:411090h
  0040CAFB: mov     esi, eax
  0040CAFD: cmp     esi, ebx
  0040CAFF: jz      short loc_40CAF1
  0040CB01: cmp     [esi], bl
  0040CB03: jz      short loc_40CB0F
  0040CB05: inc     eax
  0040CB06: cmp     [eax], bl
  0040CB08: jnz     short loc_40CB05
  0040CB0A: inc     eax
  0040CB0B: cmp     [eax], bl
  0040CB0D: jnz     short loc_40CB05
  0040CB0F: sub     eax, esi
  0040CB11: inc     eax
  0040CB12: mov     ebp, eax
  0040CB14: push    ebp; Size
  0040CB15: call    _malloc
  0040CB1A: mov     edi, eax
  0040CB1C: cmp     edi, ebx
  0040CB1E: pop     ecx
  0040CB1F: jnz     short loc_40CB25
  0040CB21: xor     edi, edi
  0040CB23: jmp     short loc_40CB30
  0040CB25: push    ebp; Size
  0040CB26: push    esi; Src
  0040CB27: push    edi; void *
  0040CB28: call    _memcpy
  0040CB2D: add     esp, 0Ch
  0040CB30: push    esi; penv
  0040CB31: call    dword ptr ds:41108Ch
  0040CB37: mov     eax, edi
  0040CB39: pop     edi
  0040CB3A: pop     esi
  0040CB3B: pop     ebp
  0040CB3C: pop     ebx
  0040CB3D: pop     ecx
  0040CB3E: pop     ecx
  0040CB3F: retn

Function: __ioinit
  0040CB40: sub     esp, 44h
  0040CB43: push    100h; Size
  0040CB48: call    _malloc
  0040CB4D: test    eax, eax
  0040CB4F: pop     ecx
  0040CB50: jnz     short loc_40CB5A
  0040CB52: or      eax, 0FFFFFFFFh
  0040CB55: jmp     loc_40CCE7
  0040CB5A: mov     ds:41E560h, eax
  0040CB5F: mov     dword ptr ds:41E540h, 20h ; ' '
  0040CB69: lea     ecx, [eax+100h]
  0040CB6F: jmp     short loc_40CB8B
  0040CB71: or      dword ptr [eax], 0FFFFFFFFh
  0040CB74: mov     byte ptr [eax+4], 0
  0040CB78: mov     byte ptr [eax+5], 0Ah
  0040CB7C: mov     ecx, ds:41E560h
  0040CB82: add     eax, 8
  0040CB85: add     ecx, 100h
  0040CB8B: cmp     eax, ecx
  0040CB8D: jb      short loc_40CB71
  0040CB8F: push    ebx
  0040CB90: push    esi
  0040CB91: push    edi
  0040CB92: lea     eax, [esp+50h+StartupInfo]
  0040CB96: push    eax; lpStartupInfo
  0040CB97: call    dword ptr ds:411048h
  0040CB9D: cmp     [esp+50h+StartupInfo.cbReserved2], 0
  0040CBA3: jz      loc_40CC70
  0040CBA9: mov     eax, [esp+50h+StartupInfo.lpReserved2]
  0040CBAD: test    eax, eax
  0040CBAF: jz      loc_40CC70
  0040CBB5: mov     esi, [eax]
  0040CBB7: push    ebp
  0040CBB8: lea     ebp, [eax+4]
  0040CBBB: mov     eax, 800h
  0040CBC0: cmp     esi, eax
  0040CBC2: lea     ebx, [esi+ebp]
  0040CBC5: jl      short loc_40CBC9
  0040CBC7: mov     esi, eax
  0040CBC9: cmp     ds:41E540h, esi
  0040CBCF: jge     short loc_40CC23
  0040CBD1: mov     edi, 41E564h
  0040CBD6: push    100h; Size
  0040CBDB: call    _malloc
  0040CBE0: test    eax, eax
  0040CBE2: pop     ecx
  0040CBE3: jz      short loc_40CC1D
  0040CBE5: add     dword ptr ds:41E540h, 20h ; ' '
  0040CBEC: mov     [edi], eax
  0040CBEE: lea     ecx, [eax+100h]
  0040CBF4: jmp     short loc_40CC0C
  0040CBF6: or      dword ptr [eax], 0FFFFFFFFh
  0040CBF9: mov     byte ptr [eax+4], 0
  0040CBFD: mov     byte ptr [eax+5], 0Ah
  0040CC01: mov     ecx, [edi]
  0040CC03: add     eax, 8
  0040CC06: add     ecx, 100h
  0040CC0C: cmp     eax, ecx
  0040CC0E: jb      short loc_40CBF6
  0040CC10: add     edi, 4
  0040CC13: cmp     ds:41E540h, esi
  0040CC19: jl      short loc_40CBD6
  0040CC1B: jmp     short loc_40CC23
  0040CC1D: mov     esi, ds:41E540h
  0040CC23: xor     edi, edi
  0040CC25: test    esi, esi
  0040CC27: jle     short loc_40CC6F
  0040CC29: mov     eax, [ebx]
  0040CC2B: cmp     eax, 0FFFFFFFFh
  0040CC2E: jz      short loc_40CC66
  0040CC30: mov     cl, [ebp+0]
  0040CC33: test    cl, 1
  0040CC36: jz      short loc_40CC66
  0040CC38: test    cl, 8
  0040CC3B: jnz     short loc_40CC48
  0040CC3D: push    eax; hFile
  0040CC3E: call    dword ptr ds:4110A4h
  0040CC44: test    eax, eax
  0040CC46: jz      short loc_40CC66
  0040CC48: mov     eax, edi
  0040CC4A: sar     eax, 5
  0040CC4D: mov     eax, ds:41E560h[eax*4]
  0040CC54: mov     ecx, edi
  0040CC56: and     ecx, 1Fh
  0040CC59: lea     eax, [eax+ecx*8]
  0040CC5C: mov     ecx, [ebx]
  0040CC5E: mov     [eax], ecx
  0040CC60: mov     cl, [ebp+0]
  0040CC63: mov     [eax+4], cl
  0040CC66: inc     edi
  0040CC67: inc     ebp
  0040CC68: add     ebx, 4
  0040CC6B: cmp     edi, esi
  0040CC6D: jl      short loc_40CC29
  0040CC6F: pop     ebp
  0040CC70: xor     ebx, ebx
  0040CC72: mov     eax, ds:41E560h
  0040CC77: lea     esi, [eax+ebx*8]
  0040CC7A: cmp     dword ptr [esi], 0FFFFFFFFh
  0040CC7D: jnz     short loc_40CCCC
  0040CC7F: test    ebx, ebx
  0040CC81: mov     byte ptr [esi+4], 81h
  0040CC85: jnz     short loc_40CC8C
  0040CC87: push    0FFFFFFF6h
  0040CC89: pop     eax
  0040CC8A: jmp     short loc_40CC96
  0040CC8C: mov     eax, ebx
  0040CC8E: dec     eax
  0040CC8F: neg     eax
  0040CC91: sbb     eax, eax
  0040CC93: add     eax, 0FFFFFFF5h
  0040CC96: push    eax; nStdHandle
  0040CC97: call    dword ptr ds:411080h
  0040CC9D: mov     edi, eax
  0040CC9F: cmp     edi, 0FFFFFFFFh
  0040CCA2: jz      short loc_40CCBB
  0040CCA4: push    edi; hFile
  0040CCA5: call    dword ptr ds:4110A4h
  0040CCAB: test    eax, eax
  0040CCAD: jz      short loc_40CCBB
  0040CCAF: and     eax, 0FFh
  0040CCB4: cmp     eax, 2
  0040CCB7: mov     [esi], edi
  0040CCB9: jnz     short loc_40CCC1
  0040CCBB: or      byte ptr [esi+4], 40h
  0040CCBF: jmp     short loc_40CCD0
  0040CCC1: cmp     eax, 3
  0040CCC4: jnz     short loc_40CCD0
  0040CCC6: or      byte ptr [esi+4], 8
  0040CCCA: jmp     short loc_40CCD0
  0040CCCC: or      byte ptr [esi+4], 80h
  0040CCD0: inc     ebx
  0040CCD1: cmp     ebx, 3
  0040CCD4: jl      short loc_40CC72
  0040CCD6: push    dword ptr ds:41E540h; uNumber
  0040CCDC: call    dword ptr ds:4110A0h
  0040CCE2: pop     edi
  0040CCE3: pop     esi
  0040CCE4: xor     eax, eax
  0040CCE6: pop     ebx
  0040CCE7: add     esp, 44h
  0040CCEA: retn

Function: sub_40CCEB
  0040CCEB: push    0Ch
  0040CCED: push    411F80h
  0040CCF2: call    __SEH_prolog
  0040CCF7: mov     [ebp+var_1C], 4128FCh
  0040CCFE: cmp     [ebp+var_1C], 4128FCh
  0040CD05: jnb     short loc_40CD29
  0040CD07: and     [ebp+ms_exc.registration.TryLevel], 0
  0040CD0B: mov     eax, [ebp+var_1C]
  0040CD0E: mov     eax, [eax]
  0040CD10: test    eax, eax
  0040CD12: jz      short loc_40CD1F
  0040CD14: call    eax
  0040CD16: jmp     short loc_40CD1F
  0040CD18: xor     eax, eax
  0040CD1A: inc     eax
  0040CD1B: retn
  0040CD1C: mov     esp, [ebp+ms_exc.old_esp]
  0040CD1F: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040CD23: add     [ebp+var_1C], 4
  0040CD27: jmp     short loc_40CCFE
  0040CD29: call    __SEH_epilog
  0040CD2E: retn

Function: sub_40CD2F
  0040CD2F: push    0Ch
  0040CD31: push    411F90h
  0040CD36: call    __SEH_prolog
  0040CD3B: mov     [ebp+var_1C], 412904h
  0040CD42: cmp     [ebp+var_1C], 412904h
  0040CD49: jnb     short loc_40CD6D
  0040CD4B: and     [ebp+ms_exc.registration.TryLevel], 0
  0040CD4F: mov     eax, [ebp+var_1C]
  0040CD52: mov     eax, [eax]
  0040CD54: test    eax, eax
  0040CD56: jz      short loc_40CD63
  0040CD58: call    eax
  0040CD5A: jmp     short loc_40CD63
  0040CD5C: xor     eax, eax
  0040CD5E: inc     eax
  0040CD5F: retn
  0040CD60: mov     esp, [ebp+ms_exc.old_esp]
  0040CD63: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040CD67: add     [ebp+var_1C], 4
  0040CD6B: jmp     short loc_40CD42
  0040CD6D: call    __SEH_epilog
  0040CD72: retn

Function: __SEH_prolog
  0040CD74: push    405904h
  0040CD79: mov     eax, large fs:0
  0040CD7F: push    eax
  0040CD80: mov     eax, [esp+8+arg_4]
  0040CD84: mov     [esp+8+arg_4], ebp
  0040CD88: lea     ebp, [esp+8+arg_4]
  0040CD8C: sub     esp, eax
  0040CD8E: push    ebx
  0040CD8F: push    esi
  0040CD90: push    edi
  0040CD91: mov     eax, [ebp-8]
  0040CD94: mov     [ebp-18h], esp
  0040CD97: push    eax
  0040CD98: mov     eax, [ebp-4]
  0040CD9B: mov     dword ptr [ebp-4], 0FFFFFFFFh
  0040CDA2: mov     [ebp-8], eax
  0040CDA5: lea     eax, [ebp-10h]
  0040CDA8: mov     large fs:0, eax
  0040CDAE: retn

Function: __SEH_epilog
  0040CDAF: mov     ecx, [ebp-10h]
  0040CDB2: mov     large fs:0, ecx
  0040CDB9: pop     ecx
  0040CDBA: pop     edi
  0040CDBB: pop     esi
  0040CDBC: pop     ebx
  0040CDBD: leave
  0040CDBE: push    ecx
  0040CDBF: retn

Function: __alloca_probe
  0040CDC0: cmp     eax, 1000h
  0040CDC5: jnb     short probesetup
  0040CDC7: neg     eax
  0040CDC9: add     eax, esp
  0040CDCB: add     eax, 4
  0040CDCE: test    [eax], eax
  0040CDD0: xchg    eax, esp
  0040CDD1: mov     eax, [eax]
  0040CDD3: push    eax
  0040CDD4: retn
  0040CDD5: push    ecx
  0040CDD6: lea     ecx, [esp+4+arg_0]
  0040CDDA: sub     ecx, 1000h
  0040CDE0: sub     eax, 1000h
  0040CDE5: test    [ecx], eax
  0040CDE7: cmp     eax, 1000h
  0040CDEC: jnb     short probepages
  0040CDEE: sub     ecx, eax
  0040CDF0: mov     eax, esp
  0040CDF2: test    [ecx], eax
  0040CDF4: mov     esp, ecx
  0040CDF6: mov     ecx, [eax]
  0040CDF8: mov     eax, [eax+4]
  0040CDFB: push    eax
  0040CDFC: retn

Function: _report_failure
  0040CDFD: push    8
  0040CDFF: push    411FA0h
  0040CE04: call    __SEH_prolog
  0040CE09: and     [ebp+ms_exc.registration.TryLevel], 0
  0040CE0D: push    0
  0040CE0F: push    1
  0040CE11: call    ___security_error_handler
  0040CE16: pop     ecx
  0040CE17: pop     ecx
  0040CE18: jmp     short loc_40CE21
  0040CE1A: xor     eax, eax
  0040CE1C: inc     eax
  0040CE1D: retn
  0040CE1E: mov     esp, [ebp+ms_exc.old_esp]
  0040CE21: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040CE25: push    3; uExitCode
  0040CE27: call    dword ptr ds:411058h

Function: @__security_check_cookie@4
  0040CE2E: cmp     ecx, ds:413390h
  0040CE34: jnz     short $failure$18941
  0040CE36: retn
  0040CE37: jmp     _report_failure

Function: __aulldvrm
  0040CE40: push    esi
  0040CE41: mov     eax, [esp+4+arg_C]
  0040CE45: or      eax, eax
  0040CE47: jnz     short loc_40CE71
  0040CE49: mov     ecx, [esp+4+arg_8]
  0040CE4D: mov     eax, [esp+4+arg_4]
  0040CE51: xor     edx, edx
  0040CE53: div     ecx
  0040CE55: mov     ebx, eax
  0040CE57: mov     eax, [esp+4+arg_0]
  0040CE5B: div     ecx
  0040CE5D: mov     esi, eax
  0040CE5F: mov     eax, ebx
  0040CE61: mul     [esp+4+arg_8]
  0040CE65: mov     ecx, eax
  0040CE67: mov     eax, esi
  0040CE69: mul     [esp+4+arg_8]
  0040CE6D: add     edx, ecx
  0040CE6F: jmp     short loc_40CEB8
  0040CE71: mov     ecx, eax
  0040CE73: mov     ebx, [esp+4+arg_8]
  0040CE77: mov     edx, [esp+4+arg_4]
  0040CE7B: mov     eax, [esp+4+arg_0]
  0040CE7F: shr     ecx, 1
  0040CE81: rcr     ebx, 1
  0040CE83: shr     edx, 1
  0040CE85: rcr     eax, 1
  0040CE87: or      ecx, ecx
  0040CE89: jnz     short loc_40CE7F
  0040CE8B: div     ebx
  0040CE8D: mov     esi, eax
  0040CE8F: mul     [esp+4+arg_C]
  0040CE93: mov     ecx, eax
  0040CE95: mov     eax, [esp+4+arg_8]
  0040CE99: mul     esi
  0040CE9B: add     edx, ecx
  0040CE9D: jb      short loc_40CEAD
  0040CE9F: cmp     edx, [esp+4+arg_4]
  0040CEA3: ja      short loc_40CEAD
  0040CEA5: jb      short loc_40CEB6
  0040CEA7: cmp     eax, [esp+4+arg_0]
  0040CEAB: jbe     short loc_40CEB6
  0040CEAD: dec     esi
  0040CEAE: sub     eax, [esp+4+arg_8]
  0040CEB2: sbb     edx, [esp+4+arg_C]
  0040CEB6: xor     ebx, ebx
  0040CEB8: sub     eax, [esp+4+arg_0]
  0040CEBC: sbb     edx, [esp+4+arg_4]
  0040CEC0: neg     edx
  0040CEC2: neg     eax
  0040CEC4: sbb     edx, 0
  0040CEC7: mov     ecx, edx
  0040CEC9: mov     edx, ebx
  0040CECB: mov     ebx, ecx
  0040CECD: mov     ecx, eax
  0040CECF: mov     eax, esi
  0040CED1: pop     esi
  0040CED2: retn    10h

Function: __allmul
  0040CEE0: mov     eax, [esp+arg_4]
  0040CEE4: mov     ecx, [esp+arg_C]
  0040CEE8: or      ecx, eax
  0040CEEA: mov     ecx, [esp+arg_8]
  0040CEEE: jnz     short hard
  0040CEF0: mov     eax, [esp+arg_0]
  0040CEF4: mul     ecx
  0040CEF6: retn    10h
  0040CEF9: push    ebx
  0040CEFA: mul     ecx
  0040CEFC: mov     ebx, eax
  0040CEFE: mov     eax, [esp+4+arg_0]
  0040CF02: mul     [esp+4+arg_C]
  0040CF06: add     ebx, eax
  0040CF08: mov     eax, [esp+4+arg_0]
  0040CF0C: mul     ecx
  0040CF0E: add     edx, ebx
  0040CF10: pop     ebx
  0040CF11: retn    10h

Function: _atol
  0040CF14: push    esi
  0040CF15: mov     esi, [esp+4+String]
  0040CF19: jmp     short loc_40CF1C
  0040CF1B: inc     esi
  0040CF1C: movzx   eax, byte ptr [esi]
  0040CF1F: push    eax; C
  0040CF20: call    __ismbcspace
  0040CF25: test    eax, eax
  0040CF27: pop     ecx
  0040CF28: jnz     short loc_40CF1B
  0040CF2A: movzx   ecx, byte ptr [esi]
  0040CF2D: inc     esi
  0040CF2E: cmp     ecx, 2Dh ; '-'
  0040CF31: mov     edx, ecx
  0040CF33: jz      short loc_40CF3A
  0040CF35: cmp     ecx, 2Bh ; '+'
  0040CF38: jnz     short loc_40CF3E
  0040CF3A: movzx   ecx, byte ptr [esi]
  0040CF3D: inc     esi
  0040CF3E: xor     eax, eax
  0040CF40: cmp     ecx, 30h ; '0'
  0040CF43: jl      short loc_40CF4F
  0040CF45: cmp     ecx, 39h ; '9'
  0040CF48: jg      short loc_40CF4F
  0040CF4A: sub     ecx, 30h ; '0'
  0040CF4D: jmp     short loc_40CF52
  0040CF4F: or      ecx, 0FFFFFFFFh
  0040CF52: cmp     ecx, 0FFFFFFFFh
  0040CF55: jz      short loc_40CF63
  0040CF57: lea     eax, [eax+eax*4]
  0040CF5A: lea     eax, [ecx+eax*2]
  0040CF5D: movzx   ecx, byte ptr [esi]
  0040CF60: inc     esi
  0040CF61: jmp     short loc_40CF40
  0040CF63: cmp     edx, 2Dh ; '-'
  0040CF66: pop     esi
  0040CF67: jnz     short locret_CF6B
  0040CF69: neg     eax
  0040CF6B: retn

Function: __callnewh
  0040CF6C: mov     eax, ds:41E250h
  0040CF71: test    eax, eax
  0040CF73: jz      short loc_40CF84
  0040CF75: push    [esp+Size]
  0040CF79: call    eax
  0040CF7B: test    eax, eax
  0040CF7D: pop     ecx
  0040CF7E: jz      short loc_40CF84
  0040CF80: xor     eax, eax
  0040CF82: inc     eax
  0040CF83: retn
  0040CF84: xor     eax, eax
  0040CF86: retn

Function: __87except
  0040CF87: push    ebp
  0040CF88: mov     ebp, esp
  0040CF8A: and     esp, 0FFFFFFF0h
  0040CF8D: sub     esp, 84h
  0040CF93: mov     eax, ds:413390h
  0040CF98: mov     [esp+84h+StackCookie], eax
  0040CF9F: mov     eax, [ebp+arg_8]
  0040CFA2: movzx   ecx, word ptr [eax]
  0040CFA5: push    ebx
  0040CFA6: push    esi
  0040CFA7: mov     esi, [ebp+arg_4]
  0040CFAA: mov     eax, [esi]
  0040CFAC: dec     eax
  0040CFAD: push    edi
  0040CFAE: mov     [esp+90h+var_84], ecx
  0040CFB2: jz      short loc_40CFDF
  0040CFB4: dec     eax
  0040CFB5: jz      short loc_40CFDB
  0040CFB7: dec     eax
  0040CFB8: jz      short loc_40CFD7
  0040CFBA: dec     eax
  0040CFBB: jz      short loc_40CFD3
  0040CFBD: dec     eax
  0040CFBE: jz      short loc_40CFDF
  0040CFC0: dec     eax
  0040CFC1: dec     eax
  0040CFC2: jz      short loc_40CFCB
  0040CFC4: dec     eax
  0040CFC5: jnz     short loc_40D03B
  0040CFC7: push    10h
  0040CFC9: jmp     short loc_40CFE1
  0040CFCB: mov     dword ptr [esi], 1
  0040CFD1: jmp     short loc_40D03B
  0040CFD3: push    12h
  0040CFD5: jmp     short loc_40CFE1
  0040CFD7: push    11h
  0040CFD9: jmp     short loc_40CFE1
  0040CFDB: push    4
  0040CFDD: jmp     short loc_40CFE1
  0040CFDF: push    8
  0040CFE1: pop     ebx
  0040CFE2: push    ecx
  0040CFE3: lea     edi, [esi+18h]
  0040CFE6: push    edi
  0040CFE7: push    ebx
  0040CFE8: call    __handle_exc
  0040CFED: add     esp, 0Ch
  0040CFF0: test    eax, eax
  0040CFF2: jnz     short loc_40D03B
  0040CFF4: mov     eax, [ebp+arg_0]
  0040CFF7: cmp     eax, 10h
  0040CFFA: jz      short loc_40D00D
  0040CFFC: cmp     eax, 16h
  0040CFFF: jz      short loc_40D00D
  0040D001: cmp     eax, 1Dh
  0040D004: jz      short loc_40D00D
  0040D006: and     [esp+90h+var_40], 0FFFFFFFEh
  0040D00B: jmp     short loc_40D022
  0040D00D: mov     ecx, [esp+90h+var_40]
  0040D011: fld     qword ptr [esi+10h]
  0040D014: and     ecx, 0FFFFFFE3h
  0040D017: fstp    [esp+90h+var_50]
  0040D01B: or      ecx, 3
  0040D01E: mov     [esp+90h+var_40], ecx
  0040D022: push    edi; int
  0040D023: lea     ecx, [esi+8]
  0040D026: push    ecx; int
  0040D027: push    eax; int
  0040D028: push    ebx; dwExceptionCode
  0040D029: lea     eax, [esp+0A0h+var_84]
  0040D02D: push    eax; int
  0040D02E: lea     eax, [esp+0A4h+Arguments]
  0040D032: push    eax; Arguments
  0040D033: call    __raise_exc
  0040D038: add     esp, 18h
  0040D03B: push    0FFFFh
  0040D040: push    [esp+94h+var_84]
  0040D044: call    __ctrlfp
  0040D049: cmp     dword ptr [esi], 8
  0040D04C: pop     ecx
  0040D04D: pop     ecx
  0040D04E: jz      short loc_40D064
  0040D050: cmp     dword ptr ds:4135D0h, 0
  0040D057: jnz     short loc_40D064
  0040D059: push    esi
  0040D05A: call    sub_40E93D
  0040D05F: test    eax, eax
  0040D061: pop     ecx
  0040D062: jnz     short loc_40D06C
  0040D064: push    dword ptr [esi]; Value
  0040D066: call    __set_errno
  0040D06B: pop     ecx
  0040D06C: mov     ecx, [esp+90h+StackCookie]; StackCookie
  0040D073: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040D078: pop     edi
  0040D079: pop     esi
  0040D07A: pop     ebx
  0040D07B: mov     esp, ebp
  0040D07D: pop     ebp
  0040D07E: retn

Function: __isctype
  0040D07F: push    ebp
  0040D080: mov     ebp, esp
  0040D082: push    ecx
  0040D083: mov     eax, [ebp+C]
  0040D086: lea     ecx, [eax+1]
  0040D089: cmp     ecx, 100h
  0040D08F: ja      short loc_40D09D
  0040D091: mov     ecx, ds:4133ACh
  0040D097: movzx   eax, word ptr [ecx+eax*2]
  0040D09B: jmp     short loc_40D0F8
  0040D09D: mov     ecx, eax
  0040D09F: sar     ecx, 8
  0040D0A2: push    esi
  0040D0A3: mov     esi, ds:4133ACh
  0040D0A9: movzx   edx, cl
  0040D0AC: test    byte ptr [esi+edx*2+1], 80h
  0040D0B1: pop     esi
  0040D0B2: jz      short loc_40D0C3
  0040D0B4: push    2
  0040D0B6: mov     [ebp+var_3], al
  0040D0B9: mov     [ebp+MultiByteStr], cl
  0040D0BC: mov     [ebp+var_2], 0
  0040D0C0: pop     eax
  0040D0C1: jmp     short loc_40D0CD
  0040D0C3: mov     [ebp+MultiByteStr], al
  0040D0C6: xor     eax, eax
  0040D0C8: mov     [ebp+var_3], 0
  0040D0CC: inc     eax
  0040D0CD: push    1; int
  0040D0CF: push    dword ptr ds:41E2ACh; Locale
  0040D0D5: lea     ecx, [ebp+C+2]
  0040D0D8: push    dword ptr ds:41E2BCh; CodePage
  0040D0DE: push    ecx; lpCharType
  0040D0DF: push    eax; cbMultiByte
  0040D0E0: lea     eax, [ebp+MultiByteStr]
  0040D0E3: push    eax; lpMultiByteStr
  0040D0E4: push    1; dwInfoType
  0040D0E6: call    ___crtGetStringTypeA
  0040D0EB: add     esp, 1Ch
  0040D0EE: test    eax, eax
  0040D0F0: jnz     short loc_40D0F4
  0040D0F2: leave
  0040D0F3: retn
  0040D0F4: movzx   eax, word ptr [ebp+C+2]
  0040D0F8: and     eax, [ebp+Type]
  0040D0FB: leave
  0040D0FC: retn

Function: _tolower
  0040D0FD: push    ebp
  0040D0FE: mov     ebp, esp
  0040D100: push    ecx
  0040D101: push    ecx
  0040D102: cmp     dword ptr ds:41E2ACh, 0
  0040D109: push    ebx
  0040D10A: mov     ebx, [ebp+C]
  0040D10D: push    esi
  0040D10E: push    edi
  0040D10F: jz      loc_40D1BE
  0040D115: cmp     dword ptr ds:4135ECh, 0
  0040D11C: jz      short loc_40D127
  0040D11E: cmp     ebx, 7Fh
  0040D121: jbe     loc_40D1BE
  0040D127: xor     esi, esi
  0040D129: mov     edi, 100h
  0040D12E: inc     esi
  0040D12F: cmp     ebx, edi
  0040D131: jnb     short loc_40D155
  0040D133: cmp     ds:4133A0h, esi
  0040D139: jle     short loc_40D146
  0040D13B: push    esi; Type
  0040D13C: push    ebx; C
  0040D13D: call    __isctype
  0040D142: pop     ecx
  0040D143: pop     ecx
  0040D144: jmp     short loc_40D151
  0040D146: mov     eax, ds:4133ACh
  0040D14B: movzx   eax, byte ptr [eax+ebx*2]
  0040D14F: and     eax, esi
  0040D151: test    eax, eax
  0040D153: jz      short loc_40D1CB
  0040D155: mov     edx, ds:4133ACh
  0040D15B: mov     eax, ebx
  0040D15D: sar     eax, 8
  0040D160: movzx   ecx, al
  0040D163: test    byte ptr [edx+ecx*2+1], 80h
  0040D168: jz      short loc_40D179
  0040D16A: push    2
  0040D16C: mov     [ebp+MultiByteStr], al
  0040D16F: mov     [ebp+var_3], bl
  0040D172: mov     [ebp+var_2], 0
  0040D176: pop     eax
  0040D177: jmp     short loc_40D182
  0040D179: mov     [ebp+MultiByteStr], bl
  0040D17C: mov     [ebp+var_3], 0
  0040D180: mov     eax, esi
  0040D182: push    esi; int
  0040D183: push    dword ptr ds:41E2BCh; CodePage
  0040D189: lea     ecx, [ebp+DestStr]
  0040D18C: push    3; cchDest
  0040D18E: push    ecx; lpDestStr
  0040D18F: push    eax; cbMultiByte
  0040D190: lea     eax, [ebp+MultiByteStr]
  0040D193: push    eax; lpMultiByteStr
  0040D194: push    edi; dwMapFlags
  0040D195: push    dword ptr ds:41E2ACh; Locale
  0040D19B: call    ___crtLCMapStringA
  0040D1A0: add     esp, 20h
  0040D1A3: test    eax, eax
  0040D1A5: jz      short loc_40D1CB
  0040D1A7: cmp     eax, esi
  0040D1A9: jnz     short loc_40D1B1
  0040D1AB: movzx   eax, byte ptr [ebp+DestStr]
  0040D1AF: jmp     short loc_40D1CD
  0040D1B1: movzx   ecx, byte ptr [ebp+DestStr+1]
  0040D1B5: xor     eax, eax
  0040D1B7: mov     ah, byte ptr [ebp+DestStr]
  0040D1BA: or      eax, ecx
  0040D1BC: jmp     short loc_40D1CD
  0040D1BE: cmp     ebx, 41h ; 'A'
  0040D1C1: jl      short loc_40D1CB
  0040D1C3: cmp     ebx, 5Ah ; 'Z'
  0040D1C6: lea     eax, [ebx+20h]
  0040D1C9: jle     short loc_40D1CD
  0040D1CB: mov     eax, ebx
  0040D1CD: pop     edi
  0040D1CE: pop     esi
  0040D1CF: pop     ebx
  0040D1D0: leave
  0040D1D1: retn

Function: __ZeroTail
  0040D1D2: mov     eax, [esp+arg_4]
  0040D1D6: push    20h ; ' '
  0040D1D8: pop     ecx
  0040D1D9: cdq
  0040D1DA: idiv    ecx
  0040D1DC: push    1Fh
  0040D1DE: pop     ecx
  0040D1DF: sub     ecx, edx
  0040D1E1: or      edx, 0FFFFFFFFh
  0040D1E4: shl     edx, cl
  0040D1E6: mov     ecx, [esp+arg_0]
  0040D1EA: not     edx
  0040D1EC: test    [ecx+eax*4], edx
  0040D1EF: jz      short loc_40D1FA
  0040D1F1: xor     eax, eax
  0040D1F3: retn
  0040D1F4: cmp     dword ptr [ecx+eax*4], 0
  0040D1F8: jnz     short loc_40D1F1
  0040D1FA: inc     eax
  0040D1FB: cmp     eax, 3
  0040D1FE: jl      short loc_40D1F4
  0040D200: xor     eax, eax
  0040D202: inc     eax
  0040D203: retn

Function: __IncMan
  0040D204: mov     eax, [esp+arg_4]
  0040D208: push    esi
  0040D209: push    edi
  0040D20A: push    20h ; ' '
  0040D20C: pop     ecx
  0040D20D: cdq
  0040D20E: idiv    ecx
  0040D210: mov     edi, [esp+8+arg_0]
  0040D214: mov     esi, eax
  0040D216: lea     eax, [edi+esi*4]
  0040D219: push    eax
  0040D21A: push    1Fh
  0040D21C: pop     ecx
  0040D21D: sub     ecx, edx
  0040D21F: xor     edx, edx
  0040D221: inc     edx
  0040D222: shl     edx, cl
  0040D224: push    edx
  0040D225: push    dword ptr [eax]
  0040D227: call    ___addl
  0040D22C: add     esp, 0Ch
  0040D22F: dec     esi
  0040D230: js      short loc_40D24E
  0040D232: lea     edi, [edi+esi*4]
  0040D235: test    eax, eax
  0040D237: jz      short loc_40D24E
  0040D239: push    edi
  0040D23A: push    1
  0040D23C: push    dword ptr [edi]
  0040D23E: call    ___addl
  0040D243: add     esp, 0Ch
  0040D246: dec     esi
  0040D247: sub     edi, 4
  0040D24A: test    esi, esi
  0040D24C: jge     short loc_40D235
  0040D24E: pop     edi
  0040D24F: pop     esi
  0040D250: retn

Function: __RoundMan
  0040D251: push    ebp
  0040D252: mov     ebp, esp
  0040D254: push    ecx
  0040D255: and     [ebp+var_4], 0
  0040D259: push    ebx
  0040D25A: push    esi
  0040D25B: push    edi
  0040D25C: mov     edi, [ebp+arg_4]
  0040D25F: dec     edi
  0040D260: push    20h ; ' '
  0040D262: lea     eax, [edi+1]
  0040D265: pop     ecx
  0040D266: cdq
  0040D267: idiv    ecx
  0040D269: push    1Fh
  0040D26B: pop     esi
  0040D26C: sub     esi, edx
  0040D26E: xor     edx, edx
  0040D270: inc     edx
  0040D271: mov     ecx, esi
  0040D273: shl     edx, cl
  0040D275: mov     ebx, eax
  0040D277: mov     eax, [ebp+arg_0]
  0040D27A: test    [eax+ebx*4], edx
  0040D27D: jz      short loc_40D2A0
  0040D27F: lea     ecx, [edi+1]
  0040D282: push    ecx
  0040D283: push    eax
  0040D284: call    __ZeroTail
  0040D289: test    eax, eax
  0040D28B: pop     ecx
  0040D28C: pop     ecx
  0040D28D: jnz     short loc_40D29D
  0040D28F: push    edi
  0040D290: push    [ebp+arg_0]
  0040D293: call    __IncMan
  0040D298: pop     ecx
  0040D299: pop     ecx
  0040D29A: mov     [ebp+var_4], eax
  0040D29D: mov     eax, [ebp+arg_0]
  0040D2A0: or      edx, 0FFFFFFFFh
  0040D2A3: mov     ecx, esi
  0040D2A5: shl     edx, cl
  0040D2A7: push    3
  0040D2A9: pop     ecx
  0040D2AA: and     [eax+ebx*4], edx
  0040D2AD: inc     ebx
  0040D2AE: cmp     ebx, ecx
  0040D2B0: jge     short loc_40D2BB
  0040D2B2: lea     edi, [eax+ebx*4]
  0040D2B5: sub     ecx, ebx
  0040D2B7: xor     eax, eax
  0040D2B9: rep stosd
  0040D2BB: mov     eax, [ebp+var_4]
  0040D2BE: pop     edi
  0040D2BF: pop     esi
  0040D2C0: pop     ebx
  0040D2C1: leave
  0040D2C2: retn

Function: __CopyMan
  0040D2C3: mov     eax, [esp+arg_4]
  0040D2C7: mov     ecx, [esp+arg_0]
  0040D2CB: push    3
  0040D2CD: pop     edx
  0040D2CE: sub     ecx, eax
  0040D2D0: push    esi
  0040D2D1: mov     esi, [eax]
  0040D2D3: mov     [ecx+eax], esi
  0040D2D6: add     eax, 4
  0040D2D9: dec     edx
  0040D2DA: jnz     short loc_40D2D1
  0040D2DC: pop     esi
  0040D2DD: retn

Function: __IsZeroMan
  0040D2DE: xor     eax, eax
  0040D2E0: mov     ecx, [esp+arg_0]
  0040D2E4: cmp     dword ptr [ecx+eax*4], 0
  0040D2E8: jnz     short loc_40D2F4
  0040D2EA: inc     eax
  0040D2EB: cmp     eax, 3
  0040D2EE: jl      short loc_40D2E0
  0040D2F0: xor     eax, eax
  0040D2F2: inc     eax
  0040D2F3: retn
  0040D2F4: xor     eax, eax
  0040D2F6: retn

Function: __ShrMan
  0040D2F7: push    ebp
  0040D2F8: mov     ebp, esp
  0040D2FA: sub     esp, 0Ch
  0040D2FD: mov     eax, [ebp+arg_4]
  0040D300: push    ebx
  0040D301: push    esi
  0040D302: push    edi
  0040D303: push    20h ; ' '
  0040D305: pop     esi
  0040D306: cdq
  0040D307: mov     ecx, esi
  0040D309: idiv    ecx
  0040D30B: mov     ebx, [ebp+arg_0]
  0040D30E: or      edi, 0FFFFFFFFh
  0040D311: mov     [ebp+arg_4], esi
  0040D314: mov     ecx, edx
  0040D316: shl     edi, cl
  0040D318: mov     [ebp+var_8], eax
  0040D31B: xor     eax, eax
  0040D31D: sub     [ebp+arg_4], edx
  0040D320: not     edi
  0040D322: mov     [ebp+var_4], eax
  0040D325: mov     esi, [ebx+eax*4]
  0040D328: mov     ecx, esi
  0040D32A: and     ecx, edi
  0040D32C: mov     [ebp+var_C], ecx
  0040D32F: mov     ecx, edx
  0040D331: shr     esi, cl
  0040D333: mov     ecx, [ebp+arg_4]
  0040D336: or      esi, [ebp+var_4]
  0040D339: mov     [ebx+eax*4], esi
  0040D33C: mov     esi, [ebp+var_C]
  0040D33F: shl     esi, cl
  0040D341: inc     eax
  0040D342: cmp     eax, 3
  0040D345: mov     [ebp+var_4], esi
  0040D348: jl      short loc_40D325
  0040D34A: push    2
  0040D34C: pop     eax
  0040D34D: mov     ecx, eax
  0040D34F: sub     ecx, [ebp+var_8]
  0040D352: lea     ecx, [ebx+ecx*4]
  0040D355: cmp     eax, [ebp+var_8]
  0040D358: jl      short loc_40D361
  0040D35A: mov     edx, [ecx]
  0040D35C: mov     [ebx+eax*4], edx
  0040D35F: jmp     short loc_40D365
  0040D361: and     dword ptr [ebx+eax*4], 0
  0040D365: dec     eax
  0040D366: sub     ecx, 4
  0040D369: test    eax, eax
  0040D36B: jge     short loc_40D355
  0040D36D: pop     edi
  0040D36E: pop     esi
  0040D36F: pop     ebx
  0040D370: leave
  0040D371: retn

Function: __ld12cvt
  0040D372: push    ebp
  0040D373: mov     ebp, esp
  0040D375: sub     esp, 18h
  0040D378: mov     eax, [ebp+arg_0]
  0040D37B: movzx   ecx, word ptr [eax+0Ah]
  0040D37F: push    ebx
  0040D380: push    esi
  0040D381: mov     esi, [ebp+arg_8]
  0040D384: push    edi
  0040D385: mov     edi, ecx
  0040D387: and     ecx, 8000h
  0040D38D: mov     [ebp+arg_0], ecx
  0040D390: mov     ecx, [eax+6]
  0040D393: mov     [ebp+var_C], ecx
  0040D396: mov     ecx, [eax+2]
  0040D399: movzx   eax, word ptr [eax]
  0040D39C: shl     eax, 10h
  0040D39F: and     edi, 7FFFh
  0040D3A5: sub     edi, 3FFFh
  0040D3AB: cmp     edi, 0FFFFC001h
  0040D3B1: mov     [ebp+var_4], eax
  0040D3B4: lea     eax, [ebp+var_C]
  0040D3B7: mov     [ebp+var_8], ecx
  0040D3BA: push    eax
  0040D3BB: jnz     short loc_40D3DB
  0040D3BD: xor     ebx, ebx
  0040D3BF: call    __IsZeroMan
  0040D3C4: test    eax, eax
  0040D3C6: pop     ecx
  0040D3C7: jnz     loc_40D48A
  0040D3CD: lea     edi, [ebp+var_C]
  0040D3D0: stosd
  0040D3D1: stosd
  0040D3D2: stosd
  0040D3D3: push    2
  0040D3D5: pop     eax
  0040D3D6: jmp     loc_40D48C
  0040D3DB: lea     eax, [ebp+var_18]
  0040D3DE: push    eax
  0040D3DF: call    __CopyMan
  0040D3E4: push    dword ptr [esi+8]
  0040D3E7: lea     eax, [ebp+var_C]
  0040D3EA: push    eax
  0040D3EB: call    __RoundMan
  0040D3F0: add     esp, 10h
  0040D3F3: test    eax, eax
  0040D3F5: jz      short loc_40D3F8
  0040D3F7: inc     edi
  0040D3F8: mov     eax, [esi+4]
  0040D3FB: mov     ecx, eax
  0040D3FD: sub     ecx, [esi+8]
  0040D400: cmp     edi, ecx
  0040D402: jge     short loc_40D40E
  0040D404: xor     eax, eax
  0040D406: lea     edi, [ebp+var_C]
  0040D409: stosd
  0040D40A: stosd
  0040D40B: stosd
  0040D40C: jmp     short loc_40D44A
  0040D40E: cmp     edi, eax
  0040D410: jg      short loc_40D44E
  0040D412: sub     eax, edi
  0040D414: mov     edi, eax
  0040D416: lea     eax, [ebp+var_18]
  0040D419: push    eax
  0040D41A: lea     eax, [ebp+var_C]
  0040D41D: push    eax
  0040D41E: call    __CopyMan
  0040D423: lea     eax, [ebp+var_C]
  0040D426: push    edi
  0040D427: push    eax
  0040D428: call    __ShrMan
  0040D42D: push    dword ptr [esi+8]
  0040D430: lea     eax, [ebp+var_C]
  0040D433: push    eax
  0040D434: call    __RoundMan
  0040D439: mov     eax, [esi+0Ch]
  0040D43C: inc     eax
  0040D43D: push    eax
  0040D43E: lea     eax, [ebp+var_C]
  0040D441: push    eax
  0040D442: call    __ShrMan
  0040D447: add     esp, 20h
  0040D44A: xor     ebx, ebx
  0040D44C: jmp     short loc_40D3D3
  0040D44E: cmp     edi, [esi]
  0040D450: push    dword ptr [esi+0Ch]
  0040D453: jl      short loc_40D476
  0040D455: xor     eax, eax
  0040D457: lea     edi, [ebp+var_C]
  0040D45A: stosd
  0040D45B: stosd
  0040D45C: stosd
  0040D45D: or      byte ptr [ebp+var_C+3], 80h
  0040D461: lea     eax, [ebp+var_C]
  0040D464: push    eax
  0040D465: call    __ShrMan
  0040D46A: mov     ebx, [esi+14h]
  0040D46D: add     ebx, [esi]
  0040D46F: pop     ecx
  0040D470: xor     eax, eax
  0040D472: pop     ecx
  0040D473: inc     eax
  0040D474: jmp     short loc_40D48C
  0040D476: mov     ebx, [esi+14h]
  0040D479: and     byte ptr [ebp+var_C+3], 7Fh
  0040D47D: lea     eax, [ebp+var_C]
  0040D480: push    eax
  0040D481: add     ebx, edi
  0040D483: call    __ShrMan
  0040D488: pop     ecx
  0040D489: pop     ecx
  0040D48A: xor     eax, eax
  0040D48C: push    1Fh
  0040D48E: pop     ecx
  0040D48F: sub     ecx, [esi+0Ch]
  0040D492: mov     esi, [esi+10h]
  0040D495: shl     ebx, cl
  0040D497: mov     ecx, [ebp+arg_0]
  0040D49A: neg     ecx
  0040D49C: sbb     ecx, ecx
  0040D49E: and     ecx, 80000000h
  0040D4A4: or      ebx, ecx
  0040D4A6: or      ebx, [ebp+var_C]
  0040D4A9: cmp     esi, 40h ; '@'
  0040D4AC: jnz     short loc_40D4BB
  0040D4AE: mov     ecx, [ebp+arg_4]
  0040D4B1: mov     edx, [ebp+var_8]
  0040D4B4: mov     [ecx+4], ebx
  0040D4B7: mov     [ecx], edx
  0040D4B9: jmp     short loc_40D4C5
  0040D4BB: cmp     esi, 20h ; ' '
  0040D4BE: jnz     short loc_40D4C5
  0040D4C0: mov     ecx, [ebp+arg_4]
  0040D4C3: mov     [ecx], ebx
  0040D4C5: pop     edi
  0040D4C6: pop     esi
  0040D4C7: pop     ebx
  0040D4C8: leave
  0040D4C9: retn

Function: sub_40D4CA
  0040D4CA: push    4133B4h
  0040D4CF: push    [esp+4+arg_4]
  0040D4D3: push    [esp+8+arg_0]
  0040D4D7: call    __ld12cvt
  0040D4DC: add     esp, 0Ch
  0040D4DF: retn

Function: sub_40D4E0
  0040D4E0: push    4133CCh
  0040D4E5: push    [esp+4+arg_4]
  0040D4E9: push    [esp+8+arg_0]
  0040D4ED: call    __ld12cvt
  0040D4F2: add     esp, 0Ch
  0040D4F5: retn

Function: sub_40D4F6
  0040D4F6: push    ebp
  0040D4F7: mov     ebp, esp
  0040D4F9: sub     esp, 14h
  0040D4FC: mov     eax, ds:413390h
  0040D501: mov     [ebp+StackCookie], eax
  0040D504: xor     eax, eax
  0040D506: push    eax
  0040D507: push    eax
  0040D508: push    eax
  0040D509: push    eax
  0040D50A: push    [ebp+arg_4]
  0040D50D: lea     eax, [ebp+var_14]
  0040D510: push    eax
  0040D511: lea     eax, [ebp+var_10]
  0040D514: push    eax
  0040D515: call    ___strgtold12
  0040D51A: push    [ebp+arg_0]
  0040D51D: lea     eax, [ebp+var_10]
  0040D520: push    eax
  0040D521: call    sub_40D4CA
  0040D526: mov     ecx, [ebp+StackCookie]; StackCookie
  0040D529: add     esp, 24h
  0040D52C: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040D531: leave
  0040D532: retn

Function: sub_40D533
  0040D533: push    ebp
  0040D534: mov     ebp, esp
  0040D536: sub     esp, 14h
  0040D539: mov     eax, ds:413390h
  0040D53E: mov     [ebp+StackCookie], eax
  0040D541: xor     eax, eax
  0040D543: push    eax
  0040D544: push    eax
  0040D545: push    eax
  0040D546: push    eax
  0040D547: push    [ebp+arg_4]
  0040D54A: lea     eax, [ebp+var_14]
  0040D54D: push    eax
  0040D54E: lea     eax, [ebp+var_10]
  0040D551: push    eax
  0040D552: call    ___strgtold12
  0040D557: push    [ebp+arg_0]
  0040D55A: lea     eax, [ebp+var_10]
  0040D55D: push    eax
  0040D55E: call    sub_40D4E0
  0040D563: mov     ecx, [ebp+StackCookie]; StackCookie
  0040D566: add     esp, 24h
  0040D569: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040D56E: leave
  0040D56F: retn

Function: _memcpy_0
  0040D570: push    ebp
  0040D571: mov     ebp, esp
  0040D573: push    edi
  0040D574: push    esi
  0040D575: mov     esi, [ebp+Src]
  0040D578: mov     ecx, [ebp+Size]
  0040D57B: mov     edi, [ebp+arg_0]
  0040D57E: mov     eax, ecx
  0040D580: mov     edx, ecx
  0040D582: add     eax, esi
  0040D584: cmp     edi, esi
  0040D586: jbe     short CopyUp_0
  0040D588: cmp     edi, eax
  0040D58A: jb      CopyDown_0
  0040D590: test    edi, 3
  0040D596: jnz     short CopyLeadUp_0
  0040D598: shr     ecx, 2
  0040D59B: and     edx, 3
  0040D59E: cmp     ecx, 8; switch with an invalid jump table
  0040D5A1: jb      short CopyUnwindUp_0
  0040D5A3: rep movsd; jumptable 0040D5CC default case
  0040D5A5: jmp     dword ptr [edx*4+40D6BCh]
  0040D5AC: mov     eax, edi
  0040D5AE: mov     edx, 3
  0040D5B3: sub     ecx, 4
  0040D5B6: jb      short ByteCopyUp_0
  0040D5B8: and     eax, 3
  0040D5BB: add     ecx, eax
  0040D5BD: jmp     dword ptr ds:40D5D0h[eax*4]
  0040D5C4: jmp     dword ptr ds:40D6CCh[ecx*4]
  0040D5CC: jmp     dword ptr [ecx*4+40D650h]; switch jump
  0040D5E0: and     edx, ecx
  0040D5E2: mov     al, [esi]
  0040D5E4: mov     [edi], al
  0040D5E6: mov     al, [esi+1]
  0040D5E9: mov     [edi+1], al
  0040D5EC: mov     al, [esi+2]
  0040D5EF: shr     ecx, 2
  0040D5F2: mov     [edi+2], al
  0040D5F5: add     esi, 3
  0040D5F8: add     edi, 3
  0040D5FB: cmp     ecx, 8
  0040D5FE: jb      short CopyUnwindUp_0
  0040D600: rep movsd
  0040D602: jmp     dword ptr [edx*4+40D6BCh]
  0040D60C: and     edx, ecx
  0040D60E: mov     al, [esi]
  0040D610: mov     [edi], al
  0040D612: mov     al, [esi+1]
  0040D615: shr     ecx, 2
  0040D618: mov     [edi+1], al
  0040D61B: add     esi, 2
  0040D61E: add     edi, 2
  0040D621: cmp     ecx, 8
  0040D624: jb      short CopyUnwindUp_0
  0040D626: rep movsd
  0040D628: jmp     dword ptr [edx*4+40D6BCh]
  0040D630: and     edx, ecx
  0040D632: mov     al, [esi]
  0040D634: mov     [edi], al
  0040D636: add     esi, 1
  0040D639: shr     ecx, 2
  0040D63C: add     edi, 1
  0040D63F: cmp     ecx, 8
  0040D642: jb      short CopyUnwindUp_0
  0040D644: rep movsd
  0040D646: jmp     dword ptr [edx*4+40D6BCh]
  0040D670: mov     eax, [esi+ecx*4-1Ch]; jumptable 0040D5CC case 7
  0040D674: mov     [edi+ecx*4-1Ch], eax
  0040D678: mov     eax, [esi+ecx*4-18h]; jumptable 0040D5CC case 6
  0040D67C: mov     [edi+ecx*4-18h], eax
  0040D680: mov     eax, [esi+ecx*4-14h]; jumptable 0040D5CC case 5
  0040D684: mov     [edi+ecx*4-14h], eax
  0040D688: mov     eax, [esi+ecx*4-10h]; jumptable 0040D5CC case 4
  0040D68C: mov     [edi+ecx*4-10h], eax
  0040D690: mov     eax, [esi+ecx*4-0Ch]; jumptable 0040D5CC case 3
  0040D694: mov     [edi+ecx*4-0Ch], eax
  0040D698: mov     eax, [esi+ecx*4-8]; jumptable 0040D5CC case 2
  0040D69C: mov     [edi+ecx*4-8], eax
  0040D6A0: mov     eax, [esi+ecx*4-4]; jumptable 0040D5CC case 1
  0040D6A4: mov     [edi+ecx*4-4], eax
  0040D6A8: lea     eax, ds:0[ecx*4]
  0040D6AF: add     esi, eax
  0040D6B1: add     edi, eax
  0040D6B3: jmp     dword ptr [edx*4+40D6BCh]; jumptable 0040D5CC case 0
  0040D6CC: mov     eax, [ebp+arg_0]; jumptable 0040D5A5 case 0
  0040D6CF: pop     esi
  0040D6D0: pop     edi
  0040D6D1: leave
  0040D6D2: retn
  0040D6D4: mov     al, [esi]; jumptable 0040D5A5 case 1
  0040D6D6: mov     [edi], al
  0040D6D8: mov     eax, [ebp+arg_0]
  0040D6DB: pop     esi
  0040D6DC: pop     edi
  0040D6DD: leave
  0040D6DE: retn
  0040D6E0: mov     al, [esi]; jumptable 0040D5A5 case 2
  0040D6E2: mov     [edi], al
  0040D6E4: mov     al, [esi+1]
  0040D6E7: mov     [edi+1], al
  0040D6EA: mov     eax, [ebp+arg_0]
  0040D6ED: pop     esi
  0040D6EE: pop     edi
  0040D6EF: leave
  0040D6F0: retn
  0040D6F4: mov     al, [esi]; jumptable 0040D5A5 case 3
  0040D6F6: mov     [edi], al
  0040D6F8: mov     al, [esi+1]
  0040D6FB: mov     [edi+1], al
  0040D6FE: mov     al, [esi+2]
  0040D701: mov     [edi+2], al
  0040D704: mov     eax, [ebp+arg_0]
  0040D707: pop     esi
  0040D708: pop     edi
  0040D709: leave
  0040D70A: retn
  0040D70C: lea     esi, [ecx+esi-4]
  0040D710: lea     edi, [ecx+edi-4]
  0040D714: test    edi, 3
  0040D71A: jnz     short CopyLeadDown_0
  0040D71C: shr     ecx, 2
  0040D71F: and     edx, 3
  0040D722: cmp     ecx, 8
  0040D725: jb      short CopyUnwindDown_0
  0040D727: std
  0040D728: rep movsd
  0040D72A: cld
  0040D72B: jmp     dword ptr [edx*4+40D858h]
  0040D734: neg     ecx
  0040D736: jmp     dword ptr [ecx*4+40D808h]
  0040D740: mov     eax, edi
  0040D742: mov     edx, 3
  0040D747: cmp     ecx, 4; switch with an invalid jump table
  0040D74A: jb      short ByteCopyDown_0
  0040D74C: and     eax, 3; jumptable 0040D758 default case
  0040D74F: sub     ecx, eax
  0040D751: jmp     dword ptr ds:40D75Ch[eax*4]
  0040D758: jmp     dword ptr [ecx*4+40D858h]; switch jump
  0040D76C: mov     al, [esi+3]
  0040D76F: and     edx, ecx
  0040D771: mov     [edi+3], al
  0040D774: sub     esi, 1
  0040D777: shr     ecx, 2
  0040D77A: sub     edi, 1
  0040D77D: cmp     ecx, 8
  0040D780: jb      short CopyUnwindDown_0
  0040D782: std
  0040D783: rep movsd
  0040D785: cld
  0040D786: jmp     dword ptr [edx*4+40D858h]
  0040D790: mov     al, [esi+3]
  0040D793: and     edx, ecx
  0040D795: mov     [edi+3], al
  0040D798: mov     al, [esi+2]
  0040D79B: shr     ecx, 2
  0040D79E: mov     [edi+2], al
  0040D7A1: sub     esi, 2
  0040D7A4: sub     edi, 2
  0040D7A7: cmp     ecx, 8
  0040D7AA: jb      short CopyUnwindDown_0
  0040D7AC: std
  0040D7AD: rep movsd
  0040D7AF: cld
  0040D7B0: jmp     dword ptr [edx*4+40D858h]
  0040D7B8: mov     al, [esi+3]
  0040D7BB: and     edx, ecx
  0040D7BD: mov     [edi+3], al
  0040D7C0: mov     al, [esi+2]
  0040D7C3: mov     [edi+2], al
  0040D7C6: mov     al, [esi+1]
  0040D7C9: shr     ecx, 2
  0040D7CC: mov     [edi+1], al
  0040D7CF: sub     esi, 3
  0040D7D2: sub     edi, 3
  0040D7D5: cmp     ecx, 8
  0040D7D8: jb      CopyUnwindDown_0
  0040D7DE: std
  0040D7DF: rep movsd
  0040D7E1: cld
  0040D7E2: jmp     dword ptr [edx*4+40D858h]
  0040D80C: mov     eax, [esi+ecx*4+1Ch]
  0040D810: mov     [edi+ecx*4+1Ch], eax
  0040D814: mov     eax, [esi+ecx*4+18h]
  0040D818: mov     [edi+ecx*4+18h], eax
  0040D81C: mov     eax, [esi+ecx*4+14h]
  0040D820: mov     [edi+ecx*4+14h], eax
  0040D824: mov     eax, [esi+ecx*4+10h]
  0040D828: mov     [edi+ecx*4+10h], eax
  0040D82C: mov     eax, [esi+ecx*4+0Ch]
  0040D830: mov     [edi+ecx*4+0Ch], eax
  0040D834: mov     eax, [esi+ecx*4+8]
  0040D838: mov     [edi+ecx*4+8], eax
  0040D83C: mov     eax, [esi+ecx*4+4]
  0040D840: mov     [edi+ecx*4+4], eax
  0040D844: lea     eax, ds:0[ecx*4]
  0040D84B: add     esi, eax
  0040D84D: add     edi, eax
  0040D84F: jmp     dword ptr [edx*4+40D858h]; jumptable 0040D736 case 0
  0040D868: mov     eax, [ebp+arg_0]; jumptable 0040D72B case 0
  0040D86B: pop     esi
  0040D86C: pop     edi
  0040D86D: leave
  0040D86E: retn
  0040D870: mov     al, [esi+3]; jumptable 0040D72B case 1
  0040D873: mov     [edi+3], al
  0040D876: mov     eax, [ebp+arg_0]
  0040D879: pop     esi
  0040D87A: pop     edi
  0040D87B: leave
  0040D87C: retn
  0040D880: mov     al, [esi+3]; jumptable 0040D72B case 2
  0040D883: mov     [edi+3], al
  0040D886: mov     al, [esi+2]
  0040D889: mov     [edi+2], al
  0040D88C: mov     eax, [ebp+arg_0]
  0040D88F: pop     esi
  0040D890: pop     edi
  0040D891: leave
  0040D892: retn
  0040D894: mov     al, [esi+3]; jumptable 0040D72B case 3
  0040D897: mov     [edi+3], al
  0040D89A: mov     al, [esi+2]
  0040D89D: mov     [edi+2], al
  0040D8A0: mov     al, [esi+1]
  0040D8A3: mov     [edi+1], al
  0040D8A6: mov     eax, [ebp+arg_0]
  0040D8A9: pop     esi
  0040D8AA: pop     edi
  0040D8AB: leave
  0040D8AC: retn

Function: __fptostr
  0040D8AD: push    ebp
  0040D8AE: mov     ebp, esp
  0040D8B0: mov     edx, [ebp+arg_8]
  0040D8B3: mov     ecx, [edx+0Ch]
  0040D8B6: push    ebx
  0040D8B7: mov     ebx, [ebp+arg_4]
  0040D8BA: test    ebx, ebx
  0040D8BC: push    esi
  0040D8BD: mov     esi, [ebp+arg_0]
  0040D8C0: push    edi
  0040D8C1: lea     edi, [esi+1]
  0040D8C4: mov     byte ptr [esi], 30h ; '0'
  0040D8C7: mov     eax, edi
  0040D8C9: jle     short loc_40D8EA
  0040D8CB: mov     [ebp+arg_0], ebx
  0040D8CE: xor     ebx, ebx
  0040D8D0: mov     dl, [ecx]
  0040D8D2: test    dl, dl
  0040D8D4: jz      short loc_40D8DC
  0040D8D6: movsx   edx, dl
  0040D8D9: inc     ecx
  0040D8DA: jmp     short loc_40D8DF
  0040D8DC: push    30h ; '0'
  0040D8DE: pop     edx
  0040D8DF: mov     [eax], dl
  0040D8E1: inc     eax
  0040D8E2: dec     [ebp+arg_0]
  0040D8E5: jnz     short loc_40D8D0
  0040D8E7: mov     edx, [ebp+arg_8]
  0040D8EA: test    ebx, ebx
  0040D8EC: mov     byte ptr [eax], 0
  0040D8EF: jl      short loc_40D903
  0040D8F1: cmp     byte ptr [ecx], 35h ; '5'
  0040D8F4: jl      short loc_40D903
  0040D8F6: jmp     short loc_40D8FB
  0040D8F8: mov     byte ptr [eax], 30h ; '0'
  0040D8FB: dec     eax
  0040D8FC: cmp     byte ptr [eax], 39h ; '9'
  0040D8FF: jz      short loc_40D8F8
  0040D901: inc     byte ptr [eax]
  0040D903: cmp     byte ptr [esi], 31h ; '1'
  0040D906: jnz     short loc_40D90D
  0040D908: inc     dword ptr [edx+4]
  0040D90B: jmp     short loc_40D91F
  0040D90D: push    edi; Str
  0040D90E: call    _strlen
  0040D913: inc     eax
  0040D914: push    eax; Size
  0040D915: push    edi; Src
  0040D916: push    esi; void *
  0040D917: call    _memcpy_0
  0040D91C: add     esp, 10h
  0040D91F: pop     edi
  0040D920: pop     esi
  0040D921: pop     ebx
  0040D922: pop     ebp
  0040D923: retn

Function: ___dtold
  0040D924: push    ebp
  0040D925: mov     ebp, esp
  0040D927: push    ecx
  0040D928: mov     edx, [ebp+arg_4]
  0040D92B: xor     eax, eax
  0040D92D: mov     ax, [edx+6]
  0040D931: push    ebx
  0040D932: push    esi
  0040D933: push    edi
  0040D934: mov     edi, 7FFh
  0040D939: mov     esi, 80000000h
  0040D93E: mov     [ebp+var_4], esi
  0040D941: mov     ecx, eax
  0040D943: shr     ecx, 4
  0040D946: and     eax, 8000h
  0040D94B: and     ecx, edi
  0040D94D: mov     [ebp+arg_4], eax
  0040D950: mov     eax, [edx+4]
  0040D953: mov     edx, [edx]
  0040D955: movzx   ebx, cx
  0040D958: and     eax, 0FFFFFh
  0040D95D: test    ebx, ebx
  0040D95F: jz      short loc_40D974
  0040D961: cmp     ebx, edi
  0040D963: jz      short loc_40D96D
  0040D965: lea     edi, [ecx+3C00h]
  0040D96B: jmp     short loc_40D995
  0040D96D: mov     edi, 7FFFh
  0040D972: jmp     short loc_40D995
  0040D974: xor     ebx, ebx
  0040D976: cmp     eax, ebx
  0040D978: jnz     short loc_40D98C
  0040D97A: cmp     edx, ebx
  0040D97C: jnz     short loc_40D98C
  0040D97E: mov     eax, [ebp+arg_0]
  0040D981: mov     [eax+4], ebx
  0040D984: mov     [eax], ebx
  0040D986: mov     [eax+8], bx
  0040D98A: jmp     short loc_40D9D9
  0040D98C: lea     edi, [ecx+3C01h]
  0040D992: mov     [ebp+var_4], ebx
  0040D995: mov     ecx, edx
  0040D997: shr     ecx, 15h
  0040D99A: shl     eax, 0Bh
  0040D99D: or      ecx, eax
  0040D99F: or      ecx, [ebp+var_4]
  0040D9A2: mov     eax, [ebp+arg_0]
  0040D9A5: shl     edx, 0Bh
  0040D9A8: test    esi, ecx
  0040D9AA: mov     [eax+4], ecx
  0040D9AD: mov     [eax], edx
  0040D9AF: jnz     short loc_40D9D0
  0040D9B1: mov     ecx, [eax]
  0040D9B3: mov     edx, [eax+4]
  0040D9B6: mov     ebx, ecx
  0040D9B8: shl     edx, 1
  0040D9BA: shr     ebx, 1Fh
  0040D9BD: or      edx, ebx
  0040D9BF: add     ecx, ecx
  0040D9C1: add     edi, 0FFFFh
  0040D9C7: test    esi, edx
  0040D9C9: mov     [eax+4], edx
  0040D9CC: mov     [eax], ecx
  0040D9CE: jz      short loc_40D9B1
  0040D9D0: mov     ecx, [ebp+arg_4]
  0040D9D3: or      ecx, edi
  0040D9D5: mov     [eax+8], cx
  0040D9D9: pop     edi
  0040D9DA: pop     esi
  0040D9DB: pop     ebx
  0040D9DC: leave
  0040D9DD: retn

Function: __fltout
  0040D9DE: push    ebp
  0040D9DF: mov     ebp, esp
  0040D9E1: sub     esp, 10h
  0040D9E4: mov     eax, ds:413390h
  0040D9E9: mov     [ebp+StackCookie], eax
  0040D9EC: push    esi
  0040D9ED: push    edi
  0040D9EE: lea     eax, [ebp+arg_0]
  0040D9F1: push    eax
  0040D9F2: lea     eax, [ebp+var_10]
  0040D9F5: push    eax
  0040D9F6: call    ___dtold
  0040D9FB: pop     ecx
  0040D9FC: pop     ecx
  0040D9FD: push    41E258h
  0040DA02: push    0
  0040DA04: push    11h
  0040DA06: sub     esp, 0Ch
  0040DA09: lea     esi, [ebp+var_10]
  0040DA0C: mov     edi, esp
  0040DA0E: movsd
  0040DA0F: movsd
  0040DA10: movsw
  0040DA12: call    _$I10_OUTPUT
  0040DA17: mov     ecx, [ebp+StackCookie]; StackCookie
  0040DA1A: mov     ds:41E27Ch, eax
  0040DA1F: movsx   eax, byte ptr ds:41E25Ah
  0040DA26: mov     ds:41E274h, eax
  0040DA2B: movsx   eax, word ptr ds:41E258h
  0040DA32: mov     ds:41E278h, eax
  0040DA37: add     esp, 18h
  0040DA3A: mov     dword ptr ds:41E280h, 41E25Ch
  0040DA44: mov     eax, 41E274h
  0040DA49: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040DA4E: pop     edi
  0040DA4F: pop     esi
  0040DA50: leave
  0040DA51: retn

Function: __fptrap
  0040DA52: push    2; NumberOfBytesWritten
  0040DA54: call    __amsg_exit

Function: __abstract_cw
  0040DA5B: xor     eax, eax
  0040DA5D: test    bl, 1
  0040DA60: jz      short loc_40DA65
  0040DA62: push    10h
  0040DA64: pop     eax
  0040DA65: test    bl, 4
  0040DA68: jz      short loc_40DA6D
  0040DA6A: or      eax, 8
  0040DA6D: test    bl, 8
  0040DA70: jz      short loc_40DA75
  0040DA72: or      eax, 4
  0040DA75: test    bl, 10h
  0040DA78: jz      short loc_40DA7D
  0040DA7A: or      eax, 2
  0040DA7D: test    bl, 20h
  0040DA80: jz      short loc_40DA85
  0040DA82: or      eax, 1
  0040DA85: test    bl, 2
  0040DA88: jz      short loc_40DA8F
  0040DA8A: or      eax, 80000h
  0040DA8F: push    ebp
  0040DA90: movzx   edx, bx
  0040DA93: push    esi
  0040DA94: mov     ecx, edx
  0040DA96: mov     esi, 0C00h
  0040DA9B: and     ecx, esi
  0040DA9D: push    edi
  0040DA9E: mov     edi, 300h
  0040DAA3: mov     ebp, 200h
  0040DAA8: jz      short loc_40DACB
  0040DAAA: cmp     ecx, 400h
  0040DAB0: jz      short loc_40DAC6
  0040DAB2: cmp     ecx, 800h
  0040DAB8: jz      short loc_40DAC2
  0040DABA: cmp     ecx, esi
  0040DABC: jnz     short loc_40DACB
  0040DABE: or      eax, edi
  0040DAC0: jmp     short loc_40DACB
  0040DAC2: or      eax, ebp
  0040DAC4: jmp     short loc_40DACB
  0040DAC6: or      eax, 100h
  0040DACB: and     edx, edi
  0040DACD: jz      short loc_40DADA
  0040DACF: cmp     edx, ebp
  0040DAD1: jnz     short loc_40DADF
  0040DAD3: or      eax, 10000h
  0040DAD8: jmp     short loc_40DADF
  0040DADA: or      eax, 20000h
  0040DADF: test    bh, 10h
  0040DAE2: pop     edi
  0040DAE3: pop     esi
  0040DAE4: pop     ebp
  0040DAE5: jz      short locret_DAEC
  0040DAE7: or      eax, 40000h
  0040DAEC: retn

Function: __hw_cw
  0040DAED: xor     eax, eax
  0040DAEF: test    bl, 10h
  0040DAF2: jz      short loc_40DAF5
  0040DAF4: inc     eax
  0040DAF5: test    bl, 8
  0040DAF8: jz      short loc_40DAFD
  0040DAFA: or      eax, 4
  0040DAFD: test    bl, 4
  0040DB00: jz      short loc_40DB05
  0040DB02: or      eax, 8
  0040DB05: test    bl, 2
  0040DB08: jz      short loc_40DB0D
  0040DB0A: or      eax, 10h
  0040DB0D: test    bl, 1
  0040DB10: jz      short loc_40DB15
  0040DB12: or      eax, 20h
  0040DB15: test    ebx, 80000h
  0040DB1B: jz      short loc_40DB20
  0040DB1D: or      eax, 2
  0040DB20: mov     ecx, ebx
  0040DB22: mov     edx, 300h
  0040DB27: and     ecx, edx
  0040DB29: push    esi
  0040DB2A: mov     esi, 200h
  0040DB2F: jz      short loc_40DB54
  0040DB31: cmp     ecx, 100h
  0040DB37: jz      short loc_40DB4F
  0040DB39: cmp     ecx, esi
  0040DB3B: jz      short loc_40DB48
  0040DB3D: cmp     ecx, edx
  0040DB3F: jnz     short loc_40DB54
  0040DB41: or      eax, 0C00h
  0040DB46: jmp     short loc_40DB54
  0040DB48: or      eax, 800h
  0040DB4D: jmp     short loc_40DB54
  0040DB4F: or      eax, 400h
  0040DB54: mov     ecx, ebx
  0040DB56: and     ecx, 30000h
  0040DB5C: jz      short loc_40DB6A
  0040DB5E: cmp     ecx, 10000h
  0040DB64: jnz     short loc_40DB6C
  0040DB66: or      eax, esi
  0040DB68: jmp     short loc_40DB6C
  0040DB6A: or      eax, edx
  0040DB6C: test    ebx, 40000h
  0040DB72: pop     esi
  0040DB73: jz      short locret_DB7A
  0040DB75: or      eax, 1000h
  0040DB7A: retn

Function: __control87
  0040DB7B: push    ebp
  0040DB7C: mov     ebp, esp
  0040DB7E: push    ecx
  0040DB7F: push    ebx
  0040DB80: fstcw   word ptr [ebp+var_4]
  0040DB84: mov     ebx, [ebp+var_4]
  0040DB87: call    __abstract_cw
  0040DB8C: mov     ebx, eax
  0040DB8E: mov     eax, [ebp+Mask]
  0040DB91: not     eax
  0040DB93: and     ebx, eax
  0040DB95: mov     eax, [ebp+NewValue]
  0040DB98: and     eax, [ebp+Mask]
  0040DB9B: or      ebx, eax
  0040DB9D: call    __hw_cw
  0040DBA2: mov     [ebp+Mask], eax
  0040DBA5: fldcw   word ptr [ebp+Mask]
  0040DBA8: mov     eax, ebx
  0040DBAA: pop     ebx
  0040DBAB: leave
  0040DBAC: retn

Function: __controlfp
  0040DBAD: mov     eax, [esp+Mask]
  0040DBB1: and     eax, 0FFF7FFFFh
  0040DBB6: push    eax; Mask
  0040DBB7: push    [esp+4+NewValue]; NewValue
  0040DBBB: call    __control87
  0040DBC0: pop     ecx
  0040DBC1: pop     ecx
  0040DBC2: retn

Function: ___crtMessageBoxA
  0040DBC3: push    ebp
  0040DBC4: mov     ebp, esp
  0040DBC6: sub     esp, 10h
  0040DBC9: push    ebx
  0040DBCA: xor     ebx, ebx
  0040DBCC: cmp     ds:41E284h, ebx
  0040DBD2: push    esi
  0040DBD3: push    edi
  0040DBD4: jnz     short loc_40DC43
  0040DBD6: push    412518h
  0040DBDB: call    dword ptr ds:411014h
  0040DBE1: mov     edi, eax
  0040DBE3: cmp     edi, ebx
  0040DBE5: jz      loc_40DC7E
  0040DBEB: mov     esi, ds:411018h
  0040DBF1: push    41250Ch; lpProcName
  0040DBF6: push    edi; hModule
  0040DBF7: call    esi ; GetProcAddress
  0040DBF9: test    eax, eax
  0040DBFB: mov     ds:41E284h, eax
  0040DC00: jz      short loc_40DC7E
  0040DC02: push    4124FCh; lpProcName
  0040DC07: push    edi; hModule
  0040DC08: call    esi ; GetProcAddress
  0040DC0A: push    4124E8h; lpProcName
  0040DC0F: push    edi; hModule
  0040DC10: mov     ds:41E288h, eax
  0040DC15: call    esi ; GetProcAddress
  0040DC17: cmp     dword ptr ds:41E0A4h, 2
  0040DC1E: mov     ds:41E28Ch, eax
  0040DC23: jnz     short loc_40DC43
  0040DC25: push    4124CCh; lpProcName
  0040DC2A: push    edi; hModule
  0040DC2B: call    esi ; GetProcAddress
  0040DC2D: test    eax, eax
  0040DC2F: mov     ds:41E294h, eax
  0040DC34: jz      short loc_40DC43
  0040DC36: push    4124B4h; lpProcName
  0040DC3B: push    edi; hModule
  0040DC3C: call    esi ; GetProcAddress
  0040DC3E: mov     ds:41E290h, eax
  0040DC43: mov     eax, ds:41E290h
  0040DC48: test    eax, eax
  0040DC4A: jz      short loc_40DC88
  0040DC4C: call    eax
  0040DC4E: test    eax, eax
  0040DC50: jz      short loc_40DC6F
  0040DC52: lea     ecx, [ebp+var_4]
  0040DC55: push    ecx
  0040DC56: push    0Ch
  0040DC58: lea     ecx, [ebp+var_10]
  0040DC5B: push    ecx
  0040DC5C: push    1
  0040DC5E: push    eax
  0040DC5F: call    dword ptr ds:41E294h
  0040DC65: test    eax, eax
  0040DC67: jz      short loc_40DC6F
  0040DC69: test    [ebp+var_8], 1
  0040DC6D: jnz     short loc_40DC88
  0040DC6F: cmp     dword ptr ds:41E0B0h, 4
  0040DC76: jb      short loc_40DC82
  0040DC78: or      [ebp+arg_A], 20h
  0040DC7C: jmp     short loc_40DCA7
  0040DC7E: xor     eax, eax
  0040DC80: jmp     short loc_40DCB7
  0040DC82: or      [ebp+arg_A], 4
  0040DC86: jmp     short loc_40DCA7
  0040DC88: mov     eax, ds:41E288h
  0040DC8D: test    eax, eax
  0040DC8F: jz      short loc_40DCA7
  0040DC91: call    eax
  0040DC93: mov     ebx, eax
  0040DC95: test    ebx, ebx
  0040DC97: jz      short loc_40DCA7
  0040DC99: mov     eax, ds:41E28Ch
  0040DC9E: test    eax, eax
  0040DCA0: jz      short loc_40DCA7
  0040DCA2: push    ebx
  0040DCA3: call    eax
  0040DCA5: mov     ebx, eax
  0040DCA7: push    dword ptr [ebp+10h]
  0040DCAA: push    [ebp+arg_4]
  0040DCAD: push    [ebp+arg_0]
  0040DCB0: push    ebx
  0040DCB1: call    dword ptr ds:41E284h
  0040DCB7: pop     edi
  0040DCB8: pop     esi
  0040DCB9: pop     ebx
  0040DCBA: leave
  0040DCBB: retn

Function: _strncpy
  0040DCC0: mov     ecx, [esp+Count]
  0040DCC4: push    edi
  0040DCC5: test    ecx, ecx
  0040DCC7: jz      finish_0
  0040DCCD: push    esi
  0040DCCE: push    ebx
  0040DCCF: mov     ebx, ecx
  0040DCD1: mov     esi, [esp+0Ch+Source]
  0040DCD5: test    esi, 3
  0040DCDB: mov     edi, [esp+0Ch+Destination]
  0040DCDF: jnz     short src_misaligned_0
  0040DCE1: shr     ecx, 2
  0040DCE4: jnz     main_loop_entrance_0
  0040DCEA: jmp     short copy_tail_loop
  0040DCEC: mov     al, [esi]
  0040DCEE: add     esi, 1
  0040DCF1: mov     [edi], al
  0040DCF3: add     edi, 1
  0040DCF6: sub     ecx, 1
  0040DCF9: jz      short fill_tail_end1
  0040DCFB: test    al, al
  0040DCFD: jz      short align_dest
  0040DCFF: test    esi, 3
  0040DD05: jnz     short src_misaligned_0
  0040DD07: mov     ebx, ecx
  0040DD09: shr     ecx, 2
  0040DD0C: jnz     short main_loop_entrance_0
  0040DD0E: and     ebx, 3
  0040DD11: jz      short fill_tail_end1
  0040DD13: mov     al, [esi]
  0040DD15: add     esi, 1
  0040DD18: mov     [edi], al
  0040DD1A: add     edi, 1
  0040DD1D: test    al, al
  0040DD1F: jz      short fill_tail_zero_bytes
  0040DD21: sub     ebx, 1
  0040DD24: jnz     short copy_tail_loop
  0040DD26: mov     eax, [esp+0Ch+Destination]
  0040DD2A: pop     ebx
  0040DD2B: pop     esi
  0040DD2C: pop     edi
  0040DD2D: retn
  0040DD2E: test    edi, 3
  0040DD34: jz      short dest_align_loop_end
  0040DD36: mov     [edi], al
  0040DD38: add     edi, 1
  0040DD3B: sub     ecx, 1
  0040DD3E: jz      fill_tail_end
  0040DD44: test    edi, 3
  0040DD4A: jnz     short dest_align_loop
  0040DD4C: mov     ebx, ecx
  0040DD4E: shr     ecx, 2
  0040DD51: jnz     short fill_dwords_with_EOS
  0040DD53: mov     [edi], al
  0040DD55: add     edi, 1
  0040DD58: sub     ebx, 1
  0040DD5B: jnz     short finish_loop
  0040DD5D: pop     ebx
  0040DD5E: pop     esi
  0040DD5F: mov     eax, [esp+4+Destination]
  0040DD63: pop     edi
  0040DD64: retn
  0040DD65: mov     [edi], edx
  0040DD67: add     edi, 4
  0040DD6A: sub     ecx, 1
  0040DD6D: jz      short tail_loop_start
  0040DD6F: mov     edx, 7EFEFEFFh
  0040DD74: mov     eax, [esi]
  0040DD76: add     edx, eax
  0040DD78: xor     eax, 0FFFFFFFFh
  0040DD7B: xor     eax, edx
  0040DD7D: mov     edx, [esi]
  0040DD7F: add     esi, 4
  0040DD82: test    eax, 81010100h
  0040DD87: jz      short main_loop_1
  0040DD89: test    dl, dl
  0040DD8B: jz      short loc_40DDB9
  0040DD8D: test    dh, dh
  0040DD8F: jz      short loc_40DDAF
  0040DD91: test    edx, 0FF0000h
  0040DD97: jz      short loc_40DDA5
  0040DD99: test    edx, 0FF000000h
  0040DD9F: jnz     short main_loop_1
  0040DDA1: mov     [edi], edx
  0040DDA3: jmp     short fill_with_EOS_dwords
  0040DDA5: and     edx, 0FFFFh
  0040DDAB: mov     [edi], edx
  0040DDAD: jmp     short fill_with_EOS_dwords
  0040DDAF: and     edx, 0FFh
  0040DDB5: mov     [edi], edx
  0040DDB7: jmp     short fill_with_EOS_dwords
  0040DDB9: xor     edx, edx
  0040DDBB: mov     [edi], edx
  0040DDBD: add     edi, 4
  0040DDC0: xor     eax, eax
  0040DDC2: sub     ecx, 1
  0040DDC5: jz      short fill_tail
  0040DDC7: xor     eax, eax
  0040DDC9: mov     [edi], eax
  0040DDCB: add     edi, 4
  0040DDCE: sub     ecx, 1
  0040DDD1: jnz     short fill_with_EOS_loop
  0040DDD3: and     ebx, 3
  0040DDD6: jnz     finish_loop
  0040DDDC: mov     eax, [esp+0Ch+Destination]
  0040DDE0: pop     ebx
  0040DDE1: pop     esi
  0040DDE2: pop     edi
  0040DDE3: retn

Function: _x_ismbbtype
  0040DDE4: movzx   eax, [esp+arg_0]
  0040DDE9: mov     cl, [esp+arg_8]
  0040DDED: test    [eax+41E321h], cl
  0040DDF3: jnz     short loc_40DE13
  0040DDF5: cmp     [esp+arg_4], 0
  0040DDFA: jz      short loc_40DE0C
  0040DDFC: mov     ecx, ds:4133ACh
  0040DE02: movzx   eax, word ptr [ecx+eax*2]
  0040DE06: and     eax, [esp+arg_4]
  0040DE0A: jmp     short loc_40DE0E
  0040DE0C: xor     eax, eax
  0040DE0E: test    eax, eax
  0040DE10: jnz     short loc_40DE13
  0040DE12: retn
  0040DE13: xor     eax, eax
  0040DE15: inc     eax
  0040DE16: retn

Function: __ismbblead
  0040DE17: push    4
  0040DE19: push    0
  0040DE1B: push    [esp+8+arg_0]
  0040DE1F: call    _x_ismbbtype
  0040DE24: add     esp, 0Ch
  0040DE27: retn

Function: _CPtoLCID
  0040DE28: sub     eax, 3A4h
  0040DE2D: jz      short loc_40DE51
  0040DE2F: sub     eax, 4
  0040DE32: jz      short loc_40DE4B
  0040DE34: sub     eax, 0Dh
  0040DE37: jz      short loc_40DE45
  0040DE39: dec     eax
  0040DE3A: jz      short loc_40DE3F
  0040DE3C: xor     eax, eax
  0040DE3E: retn
  0040DE3F: mov     eax, 404h
  0040DE44: retn
  0040DE45: mov     eax, 412h
  0040DE4A: retn
  0040DE4B: mov     eax, 804h
  0040DE50: retn
  0040DE51: mov     eax, 411h
  0040DE56: retn

Function: _setSBCS
  0040DE57: push    edi
  0040DE58: push    40h ; '@'
  0040DE5A: xor     eax, eax
  0040DE5C: pop     ecx
  0040DE5D: mov     edi, 41E320h
  0040DE62: rep stosd
  0040DE64: stosb
  0040DE65: xor     eax, eax
  0040DE67: mov     ds:41E424h, eax
  0040DE6C: mov     ds:41E308h, eax
  0040DE71: mov     ds:41E304h, eax
  0040DE76: mov     edi, 41E430h
  0040DE7B: stosd
  0040DE7C: stosd
  0040DE7D: stosd
  0040DE7E: pop     edi
  0040DE7F: retn

Function: _setSBUpLow
  0040DE80: push    ebp
  0040DE81: mov     ebp, esp
  0040DE83: sub     esp, 518h
  0040DE89: mov     eax, ds:413390h
  0040DE8E: mov     [ebp+StackCookie], eax
  0040DE91: push    esi
  0040DE92: lea     eax, [ebp+CPInfo]
  0040DE95: push    eax; lpCPInfo
  0040DE96: push    dword ptr ds:41E424h; CodePage
  0040DE9C: call    dword ptr ds:4110ACh
  0040DEA2: cmp     eax, 1
  0040DEA5: mov     esi, 100h
  0040DEAA: jnz     loc_40DFBD
  0040DEB0: xor     eax, eax
  0040DEB2: mov     [ebp+eax+MultiByteStr], al
  0040DEB9: inc     eax
  0040DEBA: cmp     eax, esi
  0040DEBC: jb      short loc_40DEB2
  0040DEBE: mov     al, [ebp+CPInfo.LeadByte]
  0040DEC1: test    al, al
  0040DEC3: mov     [ebp+MultiByteStr], 20h ; ' '
  0040DECA: jz      short loc_40DF02
  0040DECC: push    ebx
  0040DECD: lea     edx, [ebp+CPInfo.LeadByte+1]
  0040DED0: push    edi
  0040DED1: movzx   ecx, byte ptr [edx]
  0040DED4: movzx   eax, al
  0040DED7: cmp     eax, ecx
  0040DED9: ja      short loc_40DEF8
  0040DEDB: sub     ecx, eax
  0040DEDD: inc     ecx
  0040DEDE: mov     ebx, ecx
  0040DEE0: shr     ecx, 2
  0040DEE3: lea     edi, [ebp+eax+MultiByteStr]
  0040DEEA: mov     eax, 20202020h
  0040DEEF: rep stosd
  0040DEF1: mov     ecx, ebx
  0040DEF3: and     ecx, 3
  0040DEF6: rep stosb
  0040DEF8: inc     edx
  0040DEF9: mov     al, [edx]
  0040DEFB: inc     edx
  0040DEFC: test    al, al
  0040DEFE: jnz     short loc_40DED1
  0040DF00: pop     edi
  0040DF01: pop     ebx
  0040DF02: push    0; int
  0040DF04: push    dword ptr ds:41E304h; Locale
  0040DF0A: lea     eax, [ebp+CharType]
  0040DF10: push    dword ptr ds:41E424h; CodePage
  0040DF16: push    eax; lpCharType
  0040DF17: push    esi; cbMultiByte
  0040DF18: lea     eax, [ebp+MultiByteStr]
  0040DF1E: push    eax; lpMultiByteStr
  0040DF1F: push    1; dwInfoType
  0040DF21: call    ___crtGetStringTypeA
  0040DF26: push    0; int
  0040DF28: push    dword ptr ds:41E424h; CodePage
  0040DF2E: lea     eax, [ebp+DestStr]
  0040DF34: push    esi; cchDest
  0040DF35: push    eax; lpDestStr
  0040DF36: push    esi; cbMultiByte
  0040DF37: lea     eax, [ebp+MultiByteStr]
  0040DF3D: push    eax; lpMultiByteStr
  0040DF3E: push    esi; dwMapFlags
  0040DF3F: push    dword ptr ds:41E304h; Locale
  0040DF45: call    ___crtLCMapStringA
  0040DF4A: push    0; int
  0040DF4C: push    dword ptr ds:41E424h; CodePage
  0040DF52: lea     eax, [ebp+var_318]
  0040DF58: push    esi; cchDest
  0040DF59: push    eax; lpDestStr
  0040DF5A: push    esi; cbMultiByte
  0040DF5B: lea     eax, [ebp+MultiByteStr]
  0040DF61: push    eax; lpMultiByteStr
  0040DF62: push    200h; dwMapFlags
  0040DF67: push    dword ptr ds:41E304h; Locale
  0040DF6D: call    ___crtLCMapStringA
  0040DF72: add     esp, 5Ch
  0040DF75: xor     eax, eax
  0040DF77: mov     cx, [ebp+eax*2+CharType]
  0040DF7F: test    cl, 1
  0040DF82: jz      short loc_40DF9A
  0040DF84: or      byte ptr [eax+41E321h], 10h
  0040DF8B: mov     cl, byte ptr [ebp+eax+DestStr]
  0040DF92: mov     [eax+41E440h], cl
  0040DF98: jmp     short loc_40DFB6
  0040DF9A: test    cl, 2
  0040DF9D: jz      short loc_40DFAF
  0040DF9F: or      byte ptr [eax+41E321h], 20h
  0040DFA6: mov     cl, byte ptr [ebp+eax+var_318]
  0040DFAD: jmp     short loc_40DF92
  0040DFAF: mov     byte ptr [eax+41E440h], 0
  0040DFB6: inc     eax
  0040DFB7: cmp     eax, esi
  0040DFB9: jb      short loc_40DF77
  0040DFBB: jmp     short loc_40E001
  0040DFBD: xor     eax, eax
  0040DFBF: cmp     eax, 41h ; 'A'
  0040DFC2: jb      short loc_40DFDD
  0040DFC4: cmp     eax, 5Ah ; 'Z'
  0040DFC7: ja      short loc_40DFDD
  0040DFC9: or      byte ptr [eax+41E321h], 10h
  0040DFD0: mov     cl, al
  0040DFD2: add     cl, 20h ; ' '
  0040DFD5: mov     [eax+41E440h], cl
  0040DFDB: jmp     short loc_40DFFC
  0040DFDD: cmp     eax, 61h ; 'a'
  0040DFE0: jb      short loc_40DFF5
  0040DFE2: cmp     eax, 7Ah ; 'z'
  0040DFE5: ja      short loc_40DFF5
  0040DFE7: or      byte ptr [eax+41E321h], 20h
  0040DFEE: mov     cl, al
  0040DFF0: sub     cl, 20h ; ' '
  0040DFF3: jmp     short loc_40DFD5
  0040DFF5: mov     byte ptr [eax+41E440h], 0
  0040DFFC: inc     eax
  0040DFFD: cmp     eax, esi
  0040DFFF: jb      short loc_40DFBF
  0040E001: mov     ecx, [ebp+StackCookie]; StackCookie
  0040E004: pop     esi
  0040E005: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040E00A: leave
  0040E00B: retn

Function: __setmbcp
  0040E00C: push    ebp
  0040E00D: mov     ebp, esp
  0040E00F: sub     esp, 1Ch
  0040E012: mov     eax, ds:413390h
  0040E017: push    ebx
  0040E018: push    esi
  0040E019: mov     esi, [ebp+CodePage]
  0040E01C: xor     ebx, ebx
  0040E01E: cmp     esi, 0FFFFFFFEh
  0040E021: mov     [ebp+StackCookie], eax
  0040E024: push    edi
  0040E025: mov     ds:41E298h, ebx
  0040E02B: jnz     short loc_40E03F
  0040E02D: mov     dword ptr ds:41E298h, 1
  0040E037: call    dword ptr ds:4110A8h
  0040E03D: jmp     short loc_40E06A
  0040E03F: cmp     esi, 0FFFFFFFDh
  0040E042: jnz     short loc_40E056
  0040E044: mov     dword ptr ds:41E298h, 1
  0040E04E: call    dword ptr ds:411008h
  0040E054: jmp     short loc_40E06A
  0040E056: cmp     esi, 0FFFFFFFCh
  0040E059: jnz     short loc_40E06F
  0040E05B: mov     eax, ds:41E2BCh
  0040E060: mov     dword ptr ds:41E298h, 1
  0040E06A: mov     [ebp+CodePage], eax
  0040E06D: mov     esi, eax
  0040E06F: cmp     esi, ds:41E424h
  0040E075: jz      loc_40E1DE
  0040E07B: cmp     esi, ebx
  0040E07D: jz      loc_40E1D4
  0040E083: xor     edx, edx
  0040E085: xor     eax, eax
  0040E087: cmp     [eax+4133F8h], esi
  0040E08D: jz      short loc_40E0F6
  0040E08F: add     eax, 30h ; '0'
  0040E092: inc     edx
  0040E093: cmp     eax, 0F0h ; 'ð'
  0040E098: jb      short loc_40E087
  0040E09A: lea     eax, [ebp+CPInfo]
  0040E09D: push    eax; lpCPInfo
  0040E09E: push    esi; CodePage
  0040E09F: call    dword ptr ds:4110ACh
  0040E0A5: cmp     eax, 1
  0040E0A8: jnz     loc_40E1CC
  0040E0AE: push    40h ; '@'
  0040E0B0: xor     eax, eax
  0040E0B2: pop     ecx
  0040E0B3: mov     edi, 41E320h
  0040E0B8: rep stosd
  0040E0BA: stosb
  0040E0BB: xor     edi, edi
  0040E0BD: inc     edi
  0040E0BE: cmp     [ebp+CPInfo.MaxCharSize], edi
  0040E0C1: mov     ds:41E424h, esi
  0040E0C7: mov     ds:41E304h, ebx
  0040E0CD: jbe     loc_40E1BA
  0040E0D3: cmp     [ebp+CPInfo.LeadByte], 0
  0040E0D7: jz      loc_40E195
  0040E0DD: lea     ecx, [ebp+CPInfo.LeadByte+1]
  0040E0E0: mov     dl, [ecx]
  0040E0E2: test    dl, dl
  0040E0E4: jz      loc_40E195
  0040E0EA: movzx   eax, byte ptr [ecx-1]
  0040E0EE: movzx   edx, dl
  0040E0F1: jmp     loc_40E185
  0040E0F6: push    40h ; '@'
  0040E0F8: xor     eax, eax
  0040E0FA: pop     ecx
  0040E0FB: mov     edi, 41E320h
  0040E100: rep stosd
  0040E102: lea     ecx, [edx+edx*2]
  0040E105: shl     ecx, 4
  0040E108: mov     [ebp+var_1C], ebx
  0040E10B: stosb
  0040E10C: lea     ebx, [ecx+413408h]
  0040E112: mov     al, [ebx]
  0040E114: mov     esi, ebx
  0040E116: jmp     short loc_40E141
  0040E118: mov     dl, [esi+1]
  0040E11B: test    dl, dl
  0040E11D: jz      short loc_40E145
  0040E11F: movzx   eax, al
  0040E122: movzx   edi, dl
  0040E125: cmp     eax, edi
  0040E127: ja      short loc_40E13D
  0040E129: mov     edx, [ebp+var_1C]
  0040E12C: mov     dl, [edx+4133F0h]
  0040E132: or      [eax+41E321h], dl
  0040E138: inc     eax
  0040E139: cmp     eax, edi
  0040E13B: jbe     short loc_40E132
  0040E13D: inc     esi
  0040E13E: inc     esi
  0040E13F: mov     al, [esi]
  0040E141: test    al, al
  0040E143: jnz     short loc_40E118
  0040E145: inc     [ebp+var_1C]
  0040E148: add     ebx, 8
  0040E14B: cmp     [ebp+var_1C], 4
  0040E14F: jb      short loc_40E112
  0040E151: mov     eax, [ebp+CodePage]
  0040E154: mov     ds:41E424h, eax
  0040E159: mov     dword ptr ds:41E308h, 1
  0040E163: call    _CPtoLCID
  0040E168: lea     esi, [ecx+4133FCh]
  0040E16E: mov     edi, 41E430h
  0040E173: movsd
  0040E174: movsd
  0040E175: mov     ds:41E304h, eax
  0040E17A: movsd
  0040E17B: jmp     short loc_40E1D9
  0040E17D: or      byte ptr [eax+41E321h], 4
  0040E184: inc     eax
  0040E185: cmp     eax, edx
  0040E187: jbe     short loc_40E17D
  0040E189: inc     ecx
  0040E18A: inc     ecx
  0040E18B: cmp     byte ptr [ecx-1], 0
  0040E18F: jnz     loc_40E0E0
  0040E195: mov     eax, edi
  0040E197: or      byte ptr [eax+41E321h], 8
  0040E19E: inc     eax
  0040E19F: cmp     eax, 0FFh
  0040E1A4: jb      short loc_40E197
  0040E1A6: mov     eax, esi
  0040E1A8: call    _CPtoLCID
  0040E1AD: mov     ds:41E304h, eax
  0040E1B2: mov     ds:41E308h, edi
  0040E1B8: jmp     short loc_40E1C0
  0040E1BA: mov     ds:41E308h, ebx
  0040E1C0: xor     eax, eax
  0040E1C2: mov     edi, 41E430h
  0040E1C7: stosd
  0040E1C8: stosd
  0040E1C9: stosd
  0040E1CA: jmp     short loc_40E1D9
  0040E1CC: cmp     ds:41E298h, ebx
  0040E1D2: jz      short loc_40E1E2
  0040E1D4: call    _setSBCS
  0040E1D9: call    _setSBUpLow
  0040E1DE: xor     eax, eax
  0040E1E0: jmp     short loc_40E1E5
  0040E1E2: or      eax, 0FFFFFFFFh
  0040E1E5: mov     ecx, [ebp+StackCookie]; StackCookie
  0040E1E8: pop     edi
  0040E1E9: pop     esi
  0040E1EA: pop     ebx
  0040E1EB: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040E1F0: leave
  0040E1F1: retn

Function: ___initmbctable
  0040E1F2: cmp     dword ptr ds:41E690h, 0
  0040E1F9: jnz     short loc_40E20D
  0040E1FB: push    0FFFFFFFDh; CodePage
  0040E1FD: call    __setmbcp
  0040E202: pop     ecx
  0040E203: mov     dword ptr ds:41E690h, 1
  0040E20D: xor     eax, eax
  0040E20F: retn

Function: ___security_init_cookie
  0040E210: push    ebp
  0040E211: mov     ebp, esp
  0040E213: sub     esp, 10h
  0040E216: mov     eax, ds:413390h
  0040E21B: test    eax, eax
  0040E21D: jz      short loc_40E226
  0040E21F: cmp     eax, 0BB40E64Eh
  0040E224: jnz     short locret_E274
  0040E226: push    esi
  0040E227: lea     eax, [ebp+SystemTimeAsFileTime]
  0040E22A: push    eax; lpSystemTimeAsFileTime
  0040E22B: call    dword ptr ds:4110C0h
  0040E231: mov     esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
  0040E234: xor     esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
  0040E237: call    dword ptr ds:4110BCh
  0040E23D: xor     esi, eax
  0040E23F: call    dword ptr ds:4110B8h
  0040E245: xor     esi, eax
  0040E247: call    dword ptr ds:4110B4h
  0040E24D: xor     esi, eax
  0040E24F: lea     eax, [ebp+PerformanceCount]
  0040E252: push    eax; lpPerformanceCount
  0040E253: call    dword ptr ds:4110B0h
  0040E259: mov     eax, dword ptr [ebp+PerformanceCount+4]
  0040E25C: xor     eax, dword ptr [ebp+PerformanceCount]
  0040E25F: xor     esi, eax
  0040E261: mov     ds:413390h, esi
  0040E267: jnz     short loc_40E273
  0040E269: mov     dword ptr ds:413390h, 0BB40E64Eh
  0040E273: pop     esi
  0040E274: leave
  0040E275: retn

Function: ___security_error_handler
  0040E276: push    118h
  0040E27B: push    4126C8h
  0040E280: call    __SEH_prolog
  0040E285: mov     eax, ds:413390h
  0040E28A: mov     [ebp+var_1C], eax
  0040E28D: mov     eax, ds:41E29Ch
  0040E292: xor     ecx, ecx
  0040E294: cmp     eax, ecx
  0040E296: jz      short loc_40E2B7
  0040E298: mov     [ebp+ms_exc.registration.TryLevel], ecx
  0040E29B: push    [ebp+arg_4]
  0040E29E: push    [ebp+arg_0]
  0040E2A1: call    eax
  0040E2A3: pop     ecx
  0040E2A4: pop     ecx
  0040E2A5: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040E2A9: jmp     loc_40E3B6
  0040E2AE: xor     eax, eax
  0040E2B0: inc     eax
  0040E2B1: retn
  0040E2B2: mov     esp, [ebp+ms_exc.old_esp]
  0040E2B5: jmp     short loc_40E2A5
  0040E2B7: mov     eax, [ebp+arg_0]
  0040E2BA: dec     eax
  0040E2BB: jz      short loc_40E2D3
  0040E2BD: mov     edi, 4126A4h
  0040E2C2: mov     [ebp+Source], 4125F0h
  0040E2CC: mov     esi, 0D4h ; 'Ô'
  0040E2D1: jmp     short loc_40E2E7
  0040E2D3: mov     edi, 4125D0h
  0040E2D8: mov     [ebp+Source], 412530h
  0040E2E2: mov     esi, 0B9h ; '¹'
  0040E2E7: mov     [ebp+var_20], cl
  0040E2EA: push    104h; nSize
  0040E2EF: lea     eax, [ebp+Filename]
  0040E2F5: push    eax; lpFilename
  0040E2F6: push    ecx; hModule
  0040E2F7: call    dword ptr ds:411084h
  0040E2FD: test    eax, eax
  0040E2FF: jnz     short loc_40E314
  0040E301: push    411F68h; Source
  0040E306: lea     eax, [ebp+Filename]
  0040E30C: push    eax; Destination
  0040E30D: call    _strcpy
  0040E312: pop     ecx
  0040E313: pop     ecx
  0040E314: lea     ebx, [ebp+Filename]
  0040E31A: mov     eax, ebx
  0040E31C: push    eax; Str
  0040E31D: call    _strlen
  0040E322: pop     ecx
  0040E323: add     eax, 0Bh
  0040E326: cmp     eax, 3Ch ; '<'
  0040E329: jbe     short loc_40E350
  0040E32B: mov     eax, ebx
  0040E32D: push    eax; Str
  0040E32E: call    _strlen
  0040E333: mov     ebx, eax
  0040E335: lea     eax, [ebp+Filename]
  0040E33B: sub     eax, 31h ; '1'
  0040E33E: add     ebx, eax
  0040E340: push    3; Count
  0040E342: push    41181Ch; Source
  0040E347: push    ebx; Destination
  0040E348: call    _strncpy
  0040E34D: add     esp, 10h
  0040E350: push    ebx; Str
  0040E351: call    _strlen
  0040E356: pop     ecx
  0040E357: lea     eax, [eax+esi+0Ch]
  0040E35B: add     eax, 3
  0040E35E: and     eax, 0FFFFFFFCh
  0040E361: call    __alloca_probe
  0040E366: mov     [ebp+ms_exc.old_esp], esp
  0040E369: mov     esi, esp
  0040E36B: push    edi; Source
  0040E36C: push    esi; Destination
  0040E36D: call    _strcpy
  0040E372: mov     edi, 411F48h
  0040E377: push    edi; Source
  0040E378: push    esi; Destination
  0040E379: call    _strcat
  0040E37E: push    412524h; Source
  0040E383: push    esi; Destination
  0040E384: call    _strcat
  0040E389: push    ebx; Source
  0040E38A: push    esi; Destination
  0040E38B: call    _strcat
  0040E390: push    edi; Source
  0040E391: push    esi; Destination
  0040E392: call    _strcat
  0040E397: push    [ebp+Source]; Source
  0040E39D: push    esi; Destination
  0040E39E: call    _strcat
  0040E3A3: push    12010h
  0040E3A8: push    411F20h
  0040E3AD: push    esi
  0040E3AE: call    ___crtMessageBoxA
  0040E3B3: add     esp, 3Ch
  0040E3B6: push    3; Code
  0040E3B8: call    __exit

Function: __ismbcspace
  0040E3BE: push    ebp
  0040E3BF: mov     ebp, esp
  0040E3C1: push    ecx
  0040E3C2: mov     ecx, [ebp+C]
  0040E3C5: cmp     ecx, 0FFh
  0040E3CB: jbe     short loc_40E42B
  0040E3CD: and     [ebp+CharType], 0
  0040E3D2: push    edi
  0040E3D3: xor     eax, eax
  0040E3D5: lea     edi, [ebp+var_2]
  0040E3D8: stosw
  0040E3DA: mov     eax, ecx
  0040E3DC: shr     eax, 8
  0040E3DF: cmp     dword ptr ds:41E308h, 0
  0040E3E6: mov     byte ptr [ebp+C+2], al
  0040E3E9: mov     byte ptr [ebp+C+3], cl
  0040E3EC: pop     edi
  0040E3ED: jnz     short loc_40E3F3
  0040E3EF: xor     eax, eax
  0040E3F1: leave
  0040E3F2: retn
  0040E3F3: push    1; int
  0040E3F5: push    dword ptr ds:41E304h; Locale
  0040E3FB: lea     eax, [ebp+CharType]
  0040E3FE: push    dword ptr ds:41E424h; CodePage
  0040E404: push    eax; lpCharType
  0040E405: push    2; cbMultiByte
  0040E407: lea     eax, [ebp+C+2]
  0040E40A: push    eax; lpMultiByteStr
  0040E40B: push    1; dwInfoType
  0040E40D: call    ___crtGetStringTypeA
  0040E412: add     esp, 1Ch
  0040E415: test    eax, eax
  0040E417: jz      short loc_40E3EF
  0040E419: cmp     [ebp+var_2], 0
  0040E41E: jnz     short loc_40E3EF
  0040E420: test    byte ptr [ebp+CharType], 8
  0040E424: jz      short loc_40E3EF
  0040E426: xor     eax, eax
  0040E428: inc     eax
  0040E429: leave
  0040E42A: retn
  0040E42B: cmp     dword ptr ds:4133A0h, 1
  0040E432: jle     short loc_40E440
  0040E434: push    8; Type
  0040E436: push    ecx; C
  0040E437: call    __isctype
  0040E43C: pop     ecx
  0040E43D: pop     ecx
  0040E43E: leave
  0040E43F: retn
  0040E440: mov     eax, ds:4133ACh
  0040E445: movzx   eax, byte ptr [eax+ecx*2]
  0040E449: and     eax, 8
  0040E44C: leave
  0040E44D: retn

Function: __raise_exc
  0040E44E: push    ebp
  0040E44F: mov     ebp, esp
  0040E451: mov     ecx, [ebp+Arguments]
  0040E454: xor     eax, eax
  0040E456: mov     [ecx+4], eax
  0040E459: mov     ecx, [ebp+Arguments]
  0040E45C: mov     [ecx+8], eax
  0040E45F: mov     ecx, [ebp+Arguments]
  0040E462: push    ebx
  0040E463: xor     ebx, ebx
  0040E465: mov     [ecx+0Ch], eax
  0040E468: mov     cl, byte ptr [ebp+dwExceptionCode]
  0040E46B: push    esi
  0040E46C: inc     ebx
  0040E46D: test    cl, 10h
  0040E470: push    edi
  0040E471: jz      short loc_40E480
  0040E473: mov     eax, [ebp+Arguments]
  0040E476: or      [eax+4], ebx
  0040E479: mov     [ebp+dwExceptionCode], 0C000008Fh
  0040E480: test    cl, 2
  0040E483: jz      short loc_40E493
  0040E485: mov     eax, [ebp+Arguments]
  0040E488: or      dword ptr [eax+4], 2
  0040E48C: mov     [ebp+dwExceptionCode], 0C0000093h
  0040E493: test    bl, cl
  0040E495: jz      short loc_40E4A5
  0040E497: mov     eax, [ebp+Arguments]
  0040E49A: or      dword ptr [eax+4], 4
  0040E49E: mov     [ebp+dwExceptionCode], 0C0000091h
  0040E4A5: test    cl, 4
  0040E4A8: jz      short loc_40E4B8
  0040E4AA: mov     eax, [ebp+Arguments]
  0040E4AD: or      dword ptr [eax+4], 8
  0040E4B1: mov     [ebp+dwExceptionCode], 0C000008Eh
  0040E4B8: test    cl, 8
  0040E4BB: jz      short loc_40E4CB
  0040E4BD: mov     eax, [ebp+Arguments]
  0040E4C0: or      dword ptr [eax+4], 10h
  0040E4C4: mov     [ebp+dwExceptionCode], 0C0000090h
  0040E4CB: mov     esi, [ebp+arg_4]
  0040E4CE: mov     ecx, [esi]
  0040E4D0: mov     eax, [ebp+Arguments]
  0040E4D3: shl     ecx, 4
  0040E4D6: not     ecx
  0040E4D8: xor     ecx, [eax+8]
  0040E4DB: push    2
  0040E4DD: and     ecx, 10h
  0040E4E0: xor     [eax+8], ecx
  0040E4E3: mov     ecx, [esi]
  0040E4E5: mov     eax, [ebp+Arguments]
  0040E4E8: shl     ecx, 1
  0040E4EA: not     ecx
  0040E4EC: xor     ecx, [eax+8]
  0040E4EF: pop     edi
  0040E4F0: and     ecx, 8
  0040E4F3: xor     [eax+8], ecx
  0040E4F6: mov     ecx, [esi]
  0040E4F8: mov     eax, [ebp+Arguments]
  0040E4FB: shr     ecx, 1
  0040E4FD: not     ecx
  0040E4FF: xor     ecx, [eax+8]
  0040E502: and     ecx, 4
  0040E505: xor     [eax+8], ecx
  0040E508: mov     ecx, [esi]
  0040E50A: mov     eax, [ebp+Arguments]
  0040E50D: shr     ecx, 3
  0040E510: not     ecx
  0040E512: xor     ecx, [eax+8]
  0040E515: and     ecx, edi
  0040E517: xor     [eax+8], ecx
  0040E51A: mov     ecx, [esi]
  0040E51C: mov     eax, [ebp+Arguments]
  0040E51F: shr     ecx, 5
  0040E522: not     ecx
  0040E524: xor     ecx, [eax+8]
  0040E527: and     ecx, ebx
  0040E529: xor     [eax+8], ecx
  0040E52C: call    __statfp
  0040E531: test    bl, al
  0040E533: jz      short loc_40E53C
  0040E535: mov     ecx, [ebp+Arguments]
  0040E538: or      dword ptr [ecx+0Ch], 10h
  0040E53C: test    al, 4
  0040E53E: jz      short loc_40E547
  0040E540: mov     ecx, [ebp+Arguments]
  0040E543: or      dword ptr [ecx+0Ch], 8
  0040E547: test    al, 8
  0040E549: jz      short loc_40E552
  0040E54B: mov     ecx, [ebp+Arguments]
  0040E54E: or      dword ptr [ecx+0Ch], 4
  0040E552: test    al, 10h
  0040E554: jz      short loc_40E55C
  0040E556: mov     ecx, [ebp+Arguments]
  0040E559: or      [ecx+0Ch], edi
  0040E55C: test    al, 20h
  0040E55E: jz      short loc_40E566
  0040E560: mov     eax, [ebp+Arguments]
  0040E563: or      [eax+0Ch], ebx
  0040E566: mov     eax, [esi]
  0040E568: mov     ecx, 0C00h
  0040E56D: and     eax, ecx
  0040E56F: jz      short loc_40E5A5
  0040E571: cmp     eax, 400h
  0040E576: jz      short loc_40E597
  0040E578: cmp     eax, 800h
  0040E57D: jz      short loc_40E58B
  0040E57F: cmp     eax, ecx
  0040E581: jnz     short loc_40E5AB
  0040E583: mov     eax, [ebp+Arguments]
  0040E586: or      dword ptr [eax], 3
  0040E589: jmp     short loc_40E5AB
  0040E58B: mov     eax, [ebp+Arguments]
  0040E58E: mov     ecx, [eax]
  0040E590: and     ecx, 0FFFFFFFEh
  0040E593: or      ecx, edi
  0040E595: jmp     short loc_40E5A1
  0040E597: mov     eax, [ebp+Arguments]
  0040E59A: mov     ecx, [eax]
  0040E59C: and     ecx, 0FFFFFFFDh
  0040E59F: or      ecx, ebx
  0040E5A1: mov     [eax], ecx
  0040E5A3: jmp     short loc_40E5AB
  0040E5A5: mov     eax, [ebp+Arguments]
  0040E5A8: and     dword ptr [eax], 0FFFFFFFCh
  0040E5AB: mov     eax, [esi]
  0040E5AD: mov     ecx, 300h
  0040E5B2: and     eax, ecx
  0040E5B4: jz      short loc_40E5D6
  0040E5B6: cmp     eax, 200h
  0040E5BB: jz      short loc_40E5C9
  0040E5BD: cmp     eax, ecx
  0040E5BF: jnz     short loc_40E5E3
  0040E5C1: mov     eax, [ebp+Arguments]
  0040E5C4: and     dword ptr [eax], 0FFFFFFE3h
  0040E5C7: jmp     short loc_40E5E3
  0040E5C9: mov     eax, [ebp+Arguments]
  0040E5CC: mov     ecx, [eax]
  0040E5CE: and     ecx, 0FFFFFFE7h
  0040E5D1: or      ecx, 4
  0040E5D4: jmp     short loc_40E5E1
  0040E5D6: mov     eax, [ebp+Arguments]
  0040E5D9: mov     ecx, [eax]
  0040E5DB: and     ecx, 0FFFFFFEBh
  0040E5DE: or      ecx, 8
  0040E5E1: mov     [eax], ecx
  0040E5E3: mov     eax, [ebp+Arguments]
  0040E5E6: mov     ecx, [ebp+arg_C]
  0040E5E9: shl     ecx, 5
  0040E5EC: xor     ecx, [eax]
  0040E5EE: and     ecx, 1FFE0h
  0040E5F4: xor     [eax], ecx
  0040E5F6: mov     eax, [ebp+Arguments]
  0040E5F9: or      [eax+20h], ebx
  0040E5FC: mov     eax, [ebp+Arguments]
  0040E5FF: mov     ecx, [eax+20h]
  0040E602: and     ecx, 0FFFFFFE3h
  0040E605: or      ecx, edi
  0040E607: mov     [eax+20h], ecx
  0040E60A: mov     eax, [ebp+arg_10]
  0040E60D: fld     qword ptr [eax]
  0040E60F: mov     eax, [ebp+Arguments]
  0040E612: fstp    qword ptr [eax+10h]
  0040E615: mov     eax, [ebp+Arguments]
  0040E618: or      [eax+60h], ebx
  0040E61B: mov     eax, [ebp+Arguments]
  0040E61E: mov     ecx, [eax+60h]
  0040E621: and     ecx, 0FFFFFFE3h
  0040E624: or      ecx, edi
  0040E626: mov     edi, [ebp+arg_14]
  0040E629: mov     [eax+60h], ecx
  0040E62C: fld     qword ptr [edi]
  0040E62E: mov     eax, [ebp+Arguments]
  0040E631: fstp    qword ptr [eax+50h]
  0040E634: call    __clrfp
  0040E639: lea     eax, [ebp+Arguments]
  0040E63C: push    eax; lpArguments
  0040E63D: push    ebx; nNumberOfArguments
  0040E63E: push    0; dwExceptionFlags
  0040E640: push    [ebp+dwExceptionCode]; dwExceptionCode
  0040E643: call    dword ptr ds:41102Ch
  0040E649: mov     eax, [ebp+Arguments]
  0040E64C: test    byte ptr [eax+8], 10h
  0040E650: jz      short loc_40E655
  0040E652: and     dword ptr [esi], 0FFFFFFFEh
  0040E655: test    byte ptr [eax+8], 8
  0040E659: jz      short loc_40E65E
  0040E65B: and     dword ptr [esi], 0FFFFFFFBh
  0040E65E: test    byte ptr [eax+8], 4
  0040E662: jz      short loc_40E667
  0040E664: and     dword ptr [esi], 0FFFFFFF7h
  0040E667: test    byte ptr [eax+8], 2
  0040E66B: jz      short loc_40E670
  0040E66D: and     dword ptr [esi], 0FFFFFFEFh
  0040E670: test    [eax+8], bl
  0040E673: jz      short loc_40E678
  0040E675: and     dword ptr [esi], 0FFFFFFDFh
  0040E678: mov     ecx, [eax]
  0040E67A: and     ecx, 3
  0040E67D: sub     ecx, 0
  0040E680: mov     edx, 0FFFFF3FFh
  0040E685: jz      short loc_40E6B8
  0040E687: dec     ecx
  0040E688: jz      short loc_40E6A6
  0040E68A: dec     ecx
  0040E68B: jz      short loc_40E696
  0040E68D: dec     ecx
  0040E68E: jnz     short loc_40E6BA
  0040E690: or      byte ptr [esi+1], 0Ch
  0040E694: jmp     short loc_40E6BA
  0040E696: mov     ecx, [esi]
  0040E698: and     ecx, 0FFFFFBFFh
  0040E69E: or      ecx, 800h
  0040E6A4: jmp     short loc_40E6B4
  0040E6A6: mov     ecx, [esi]
  0040E6A8: and     ecx, 0FFFFF7FFh
  0040E6AE: or      ecx, 400h
  0040E6B4: mov     [esi], ecx
  0040E6B6: jmp     short loc_40E6BA
  0040E6B8: and     [esi], edx
  0040E6BA: mov     ecx, [eax]
  0040E6BC: shr     ecx, 2
  0040E6BF: and     ecx, 7
  0040E6C2: sub     ecx, 0
  0040E6C5: jz      short loc_40E6DD
  0040E6C7: dec     ecx
  0040E6C8: jz      short loc_40E6D1
  0040E6CA: dec     ecx
  0040E6CB: jnz     short loc_40E6E9
  0040E6CD: and     [esi], edx
  0040E6CF: jmp     short loc_40E6E9
  0040E6D1: mov     ecx, [esi]
  0040E6D3: and     ecx, edx
  0040E6D5: or      ecx, 200h
  0040E6DB: jmp     short loc_40E6E7
  0040E6DD: mov     ecx, [esi]
  0040E6DF: and     ecx, edx
  0040E6E1: or      ecx, 300h
  0040E6E7: mov     [esi], ecx
  0040E6E9: fld     qword ptr [eax+50h]
  0040E6EC: fstp    qword ptr [edi]
  0040E6EE: pop     edi
  0040E6EF: pop     esi
  0040E6F0: pop     ebx
  0040E6F1: pop     ebp
  0040E6F2: retn

Function: __handle_exc
  0040E6F3: push    ebp
  0040E6F4: mov     ebp, esp
  0040E6F6: sub     esp, 10h
  0040E6F9: mov     eax, [ebp+arg_0]
  0040E6FC: push    ebx
  0040E6FD: push    esi
  0040E6FE: xor     ebx, ebx
  0040E700: mov     esi, eax
  0040E702: and     esi, 1Fh
  0040E705: inc     ebx
  0040E706: test    al, 8
  0040E708: mov     [ebp+var_4], esi
  0040E70B: jz      short loc_40E721
  0040E70D: test    byte ptr [ebp+arg_8], bl
  0040E710: jz      short loc_40E721
  0040E712: push    ebx
  0040E713: call    __set_statfp
  0040E718: pop     ecx
  0040E719: and     esi, 0FFFFFFF7h
  0040E71C: jmp     loc_40E8F5
  0040E721: test    al, 4
  0040E723: jz      short loc_40E73B
  0040E725: test    byte ptr [ebp+arg_8], 4
  0040E729: jz      short loc_40E73B
  0040E72B: push    4
  0040E72D: call    __set_statfp
  0040E732: pop     ecx
  0040E733: and     esi, 0FFFFFFFBh
  0040E736: jmp     loc_40E8F5
  0040E73B: test    bl, al
  0040E73D: jz      loc_40E81B
  0040E743: test    byte ptr [ebp+arg_8], 8
  0040E747: jz      loc_40E81B
  0040E74D: push    8
  0040E74F: call    __set_statfp
  0040E754: mov     eax, [ebp+arg_8]
  0040E757: pop     ecx
  0040E758: mov     ecx, 0C00h
  0040E75D: and     eax, ecx
  0040E75F: jz      loc_40E7F1
  0040E765: cmp     eax, 400h
  0040E76A: jz      short loc_40E7C7
  0040E76C: cmp     eax, 800h
  0040E771: jz      short loc_40E79D
  0040E773: cmp     eax, ecx
  0040E775: jnz     loc_40E813
  0040E77B: mov     ecx, [ebp+arg_4]
  0040E77E: fld     qword ptr [ecx]
  0040E780: fcomp   qword ptr ds:411120h
  0040E786: fld     qword ptr ds:413600h
  0040E78C: fnstsw  ax
  0040E78E: test    ah, 41h
  0040E791: jz      short loc_40E795
  0040E793: fchs
  0040E795: fstp    [ebp+var_10]
  0040E798: fld     [ebp+var_10]
  0040E79B: jmp     short loc_40E811
  0040E79D: mov     ecx, [ebp+arg_4]
  0040E7A0: fld     qword ptr [ecx]
  0040E7A2: fcomp   qword ptr ds:411120h
  0040E7A8: fnstsw  ax
  0040E7AA: test    ah, 41h
  0040E7AD: jnz     short loc_40E7B7
  0040E7AF: fld     qword ptr ds:4135F0h
  0040E7B5: jmp     short loc_40E7BF
  0040E7B7: fld     qword ptr ds:413600h
  0040E7BD: fchs
  0040E7BF: fstp    [ebp+var_10]
  0040E7C2: fld     [ebp+var_10]
  0040E7C5: jmp     short loc_40E811
  0040E7C7: mov     ecx, [ebp+arg_4]
  0040E7CA: fld     qword ptr [ecx]
  0040E7CC: fcomp   qword ptr ds:411120h
  0040E7D2: fnstsw  ax
  0040E7D4: test    ah, 41h
  0040E7D7: jnz     short loc_40E7E1
  0040E7D9: fld     qword ptr ds:413600h
  0040E7DF: jmp     short loc_40E7E9
  0040E7E1: fld     qword ptr ds:4135F0h
  0040E7E7: fchs
  0040E7E9: fstp    [ebp+var_10]
  0040E7EC: fld     [ebp+var_10]
  0040E7EF: jmp     short loc_40E811
  0040E7F1: mov     ecx, [ebp+arg_4]
  0040E7F4: fld     qword ptr [ecx]
  0040E7F6: fcomp   qword ptr ds:411120h
  0040E7FC: fld     qword ptr ds:4135F0h
  0040E802: fnstsw  ax
  0040E804: test    ah, 41h
  0040E807: jz      short loc_40E80B
  0040E809: fchs
  0040E80B: fstp    [ebp+var_10]
  0040E80E: fld     [ebp+var_10]
  0040E811: fstp    qword ptr [ecx]
  0040E813: and     esi, 0FFFFFFFEh
  0040E816: jmp     loc_40E8F5
  0040E81B: test    al, 2
  0040E81D: jz      loc_40E8F5
  0040E823: test    byte ptr [ebp+arg_8], 10h
  0040E827: jz      loc_40E8F5
  0040E82D: xor     esi, esi
  0040E82F: test    al, 10h
  0040E831: jz      short loc_40E835
  0040E833: mov     esi, ebx
  0040E835: fld     qword ptr ds:411120h
  0040E83B: push    edi
  0040E83C: mov     edi, [ebp+arg_4]
  0040E83F: fld     qword ptr [edi]
  0040E841: fucompp
  0040E843: fnstsw  ax
  0040E845: test    ah, 44h
  0040E848: jnp     loc_40E8DF
  0040E84E: fld     qword ptr [edi]
  0040E850: lea     eax, [ebp+var_8]
  0040E853: push    eax; int
  0040E854: push    ecx
  0040E855: push    ecx
  0040E856: fstp    [esp+28h+var_28]; double
  0040E859: call    __decomp
  0040E85E: mov     ecx, [ebp+var_8]
  0040E861: fstp    [ebp+var_10]
  0040E864: fld     [ebp+var_10]
  0040E867: add     ecx, 0FFFFFA00h
  0040E86D: add     esp, 0Ch
  0040E870: cmp     ecx, 0FFFFFBCEh
  0040E876: jge     short loc_40E882
  0040E878: fmul    qword ptr ds:411120h
  0040E87E: mov     esi, ebx
  0040E880: jmp     short loc_40E8D5
  0040E882: fcomp   qword ptr ds:411120h
  0040E888: fnstsw  ax
  0040E88A: test    ah, 5
  0040E88D: jp      short loc_40E893
  0040E88F: mov     edx, ebx
  0040E891: jmp     short loc_40E895
  0040E893: xor     edx, edx
  0040E895: xor     eax, eax
  0040E897: mov     al, byte ptr [ebp+var_10+6]
  0040E89A: and     eax, 0Fh
  0040E89D: or      eax, 10h
  0040E8A0: mov     word ptr [ebp+var_10+6], ax
  0040E8A4: mov     eax, 0FFFFFC03h
  0040E8A9: cmp     ecx, eax
  0040E8AB: jge     short loc_40E8CC
  0040E8AD: sub     eax, ecx
  0040E8AF: test    byte ptr [ebp+var_10], bl
  0040E8B2: jz      short loc_40E8BA
  0040E8B4: test    esi, esi
  0040E8B6: jnz     short loc_40E8BA
  0040E8B8: mov     esi, ebx
  0040E8BA: shr     dword ptr [ebp+var_10], 1
  0040E8BD: test    byte ptr [ebp+var_10+4], bl
  0040E8C0: jz      short loc_40E8C6
  0040E8C2: or      byte ptr [ebp+var_10+3], 80h
  0040E8C6: shr     dword ptr [ebp+var_10+4], 1
  0040E8C9: dec     eax
  0040E8CA: jnz     short loc_40E8AF
  0040E8CC: test    edx, edx
  0040E8CE: jz      short loc_40E8D8
  0040E8D0: fld     [ebp+var_10]
  0040E8D3: fchs
  0040E8D5: fstp    [ebp+var_10]
  0040E8D8: fld     [ebp+var_10]
  0040E8DB: fstp    qword ptr [edi]
  0040E8DD: jmp     short loc_40E8E1
  0040E8DF: mov     esi, ebx
  0040E8E1: test    esi, esi
  0040E8E3: pop     edi
  0040E8E4: jz      short loc_40E8EE
  0040E8E6: push    10h
  0040E8E8: call    __set_statfp
  0040E8ED: pop     ecx
  0040E8EE: and     [ebp+var_4], 0FFFFFFFDh
  0040E8F2: mov     esi, [ebp+var_4]
  0040E8F5: test    byte ptr [ebp+arg_0], 10h
  0040E8F9: jz      short loc_40E90C
  0040E8FB: test    byte ptr [ebp+arg_8], 20h
  0040E8FF: jz      short loc_40E90C
  0040E901: push    20h ; ' '
  0040E903: call    __set_statfp
  0040E908: pop     ecx
  0040E909: and     esi, 0FFFFFFEFh
  0040E90C: xor     eax, eax
  0040E90E: test    esi, esi
  0040E910: pop     esi
  0040E911: setz    al
  0040E914: pop     ebx
  0040E915: leave
  0040E916: retn

Function: __set_errno
  0040E917: mov     eax, [esp+Value]
  0040E91B: cmp     eax, 1
  0040E91E: jz      short loc_40E932
  0040E920: jle     short locret_E93C
  0040E922: cmp     eax, 3
  0040E925: jg      short locret_E93C
  0040E927: mov     dword ptr ds:41E098h, 22h ; '"'
  0040E931: retn
  0040E932: mov     dword ptr ds:41E098h, 21h ; '!'
  0040E93C: retn

Function: sub_40E93D
  0040E93D: xor     eax, eax
  0040E93F: retn

Function: __statfp
  0040E940: push    ecx
  0040E941: fstsw   [esp+4+var_4]
  0040E945: movsx   eax, [esp+4+var_4]
  0040E949: pop     ecx
  0040E94A: retn

Function: __clrfp
  0040E94B: push    ecx
  0040E94C: fnstsw  [esp+4+var_4]
  0040E94F: fnclex
  0040E951: movsx   eax, [esp+4+var_4]
  0040E955: pop     ecx
  0040E956: retn

Function: __ctrlfp
  0040E957: push    ebp
  0040E958: mov     ebp, esp
  0040E95A: push    ecx
  0040E95B: fstcw   word ptr [ebp+var_4]
  0040E95F: mov     eax, [ebp+arg_4]
  0040E962: mov     ecx, [ebp+arg_0]
  0040E965: and     ecx, [ebp+arg_4]
  0040E968: not     eax
  0040E96A: and     eax, [ebp+var_4]
  0040E96D: or      eax, ecx
  0040E96F: mov     [ebp+arg_4], eax
  0040E972: fldcw   word ptr [ebp+arg_4]
  0040E975: movsx   eax, word ptr [ebp+var_4]
  0040E979: leave
  0040E97A: retn

Function: __set_statfp
  0040E97B: push    ecx
  0040E97C: push    ecx
  0040E97D: mov     cl, byte ptr [esp+8+arg_0]
  0040E981: test    cl, 1
  0040E984: jz      short loc_40E991
  0040E986: fld     tbyte ptr ds:4135D4h
  0040E98C: fistp   [esp+8+arg_0]
  0040E990: wait
  0040E991: test    cl, 8
  0040E994: jz      short loc_40E9A6
  0040E996: fstsw   ax
  0040E999: fld     tbyte ptr ds:4135D4h
  0040E99F: fstp    [esp+8+var_8]
  0040E9A2: wait
  0040E9A3: fstsw   ax
  0040E9A6: test    cl, 10h
  0040E9A9: jz      short loc_40E9B5
  0040E9AB: fld     tbyte ptr ds:4135E0h
  0040E9B1: fstp    [esp+8+var_8]
  0040E9B4: wait
  0040E9B5: test    cl, 4
  0040E9B8: jz      short loc_40E9C3
  0040E9BA: fldz
  0040E9BC: fld1
  0040E9BE: fdivrp  st(1), st
  0040E9C0: fstp    st
  0040E9C2: wait
  0040E9C3: test    cl, 20h
  0040E9C6: jz      short loc_40E9CE
  0040E9C8: fldpi
  0040E9CA: fstp    [esp+8+var_8]
  0040E9CD: wait
  0040E9CE: pop     ecx
  0040E9CF: pop     ecx
  0040E9D0: retn

Function: ___crtGetStringTypeA
  0040E9D1: push    1Ch
  0040E9D3: push    4127A0h
  0040E9D8: call    __SEH_prolog
  0040E9DD: xor     esi, esi
  0040E9DF: cmp     ds:41E2A0h, esi
  0040E9E5: jnz     short loc_40EA1C
  0040E9E7: lea     eax, [ebp+CharType]
  0040E9EA: push    eax; lpCharType
  0040E9EB: xor     edi, edi
  0040E9ED: inc     edi
  0040E9EE: push    edi; cchSrc
  0040E9EF: push    41279Ch; lpSrcStr
  0040E9F4: push    edi; dwInfoType
  0040E9F5: call    dword ptr ds:4110CCh
  0040E9FB: test    eax, eax
  0040E9FD: jz      short loc_40EA07
  0040E9FF: mov     ds:41E2A0h, edi
  0040EA05: jmp     short loc_40EA1C
  0040EA07: call    dword ptr ds:411034h
  0040EA0D: cmp     eax, 78h ; 'x'
  0040EA10: jnz     short loc_40EA1C
  0040EA12: mov     dword ptr ds:41E2A0h, 2
  0040EA1C: mov     eax, ds:41E2A0h
  0040EA21: cmp     eax, 2
  0040EA24: jz      loc_40EB14
  0040EA2A: cmp     eax, esi
  0040EA2C: jz      loc_40EB14
  0040EA32: cmp     eax, 1
  0040EA35: jnz     loc_40EB3A
  0040EA3B: mov     [ebp+var_24], esi
  0040EA3E: mov     [ebp+var_20], esi
  0040EA41: cmp     [ebp+CodePage], esi
  0040EA44: jnz     short loc_40EA4E
  0040EA46: mov     eax, ds:41E2BCh
  0040EA4B: mov     [ebp+CodePage], eax
  0040EA4E: push    esi; cchWideChar
  0040EA4F: push    esi; lpWideCharStr
  0040EA50: push    [ebp+cbMultiByte]; cbMultiByte
  0040EA53: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040EA56: xor     eax, eax
  0040EA58: cmp     [ebp+arg_18], esi
  0040EA5B: setnz   al
  0040EA5E: lea     eax, ds:1[eax*8]
  0040EA65: push    eax; dwFlags
  0040EA66: push    [ebp+CodePage]; CodePage
  0040EA69: call    dword ptr ds:4110C8h
  0040EA6F: mov     edi, eax
  0040EA71: mov     [ebp+var_28], edi
  0040EA74: test    edi, edi
  0040EA76: jz      loc_40EB3A
  0040EA7C: and     [ebp+ms_exc.registration.TryLevel], 0
  0040EA80: lea     ebx, [edi+edi]
  0040EA83: mov     eax, ebx
  0040EA85: add     eax, 3
  0040EA88: and     eax, 0FFFFFFFCh
  0040EA8B: call    __alloca_probe
  0040EA90: mov     [ebp+ms_exc.old_esp], esp
  0040EA93: mov     esi, esp
  0040EA95: mov     [ebp+var_2C], esi
  0040EA98: push    ebx; Size
  0040EA99: push    0; Val
  0040EA9B: push    esi; void *
  0040EA9C: call    _memset
  0040EAA1: add     esp, 0Ch
  0040EAA4: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040EAA8: jmp     short loc_40EABF
  0040EAAA: xor     eax, eax
  0040EAAC: inc     eax
  0040EAAD: retn
  0040EAAE: mov     esp, [ebp+ms_exc.old_esp]
  0040EAB1: call    __resetstkoflw
  0040EAB6: xor     esi, esi
  0040EAB8: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040EABC: mov     edi, [ebp+var_28]
  0040EABF: test    esi, esi
  0040EAC1: jnz     short loc_40EADA
  0040EAC3: push    edi; Size
  0040EAC4: push    2; Count
  0040EAC6: call    _calloc
  0040EACB: pop     ecx
  0040EACC: pop     ecx
  0040EACD: mov     esi, eax
  0040EACF: test    esi, esi
  0040EAD1: jz      short loc_40EB3A
  0040EAD3: mov     [ebp+var_20], 1
  0040EADA: push    edi; cchWideChar
  0040EADB: push    esi; lpWideCharStr
  0040EADC: push    [ebp+cbMultiByte]; cbMultiByte
  0040EADF: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040EAE2: push    1; dwFlags
  0040EAE4: push    [ebp+CodePage]; CodePage
  0040EAE7: call    dword ptr ds:4110C8h
  0040EAED: test    eax, eax
  0040EAEF: jz      short loc_40EB02
  0040EAF1: push    [ebp+lpCharType]; lpCharType
  0040EAF4: push    eax; cchSrc
  0040EAF5: push    esi; lpSrcStr
  0040EAF6: push    [ebp+dwInfoType]; dwInfoType
  0040EAF9: call    dword ptr ds:4110CCh
  0040EAFF: mov     [ebp+var_24], eax
  0040EB02: cmp     [ebp+var_20], 0
  0040EB06: jz      short loc_40EB0F
  0040EB08: push    esi; Block
  0040EB09: call    _free
  0040EB0E: pop     ecx
  0040EB0F: mov     eax, [ebp+var_24]
  0040EB12: jmp     short loc_40EB82
  0040EB14: mov     ebx, [ebp+Locale]
  0040EB17: cmp     ebx, esi
  0040EB19: jnz     short loc_40EB21
  0040EB1B: mov     ebx, ds:41E2ACh
  0040EB21: mov     edi, [ebp+CodePage]
  0040EB24: test    edi, edi
  0040EB26: jnz     short loc_40EB2E
  0040EB28: mov     edi, ds:41E2BCh
  0040EB2E: push    ebx; Locale
  0040EB2F: call    ___ansicp
  0040EB34: pop     ecx
  0040EB35: cmp     eax, 0FFFFFFFFh
  0040EB38: jnz     short loc_40EB3E
  0040EB3A: xor     eax, eax
  0040EB3C: jmp     short loc_40EB82
  0040EB3E: cmp     eax, edi
  0040EB40: jz      short loc_40EB60
  0040EB42: push    0; int
  0040EB44: push    0; LPSTR
  0040EB46: lea     ecx, [ebp+cbMultiByte]
  0040EB49: push    ecx; int
  0040EB4A: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040EB4D: push    eax; UINT
  0040EB4E: push    edi; CodePage
  0040EB4F: call    ___convertcp
  0040EB54: add     esp, 18h
  0040EB57: mov     esi, eax
  0040EB59: test    esi, esi
  0040EB5B: jz      short loc_40EB3A
  0040EB5D: mov     [ebp+lpMultiByteStr], esi
  0040EB60: push    [ebp+lpCharType]; lpCharType
  0040EB63: push    [ebp+cbMultiByte]; cchSrc
  0040EB66: push    [ebp+lpMultiByteStr]; lpSrcStr
  0040EB69: push    [ebp+dwInfoType]; dwInfoType
  0040EB6C: push    ebx; Locale
  0040EB6D: call    dword ptr ds:4110C4h
  0040EB73: mov     edi, eax
  0040EB75: test    esi, esi
  0040EB77: jz      short loc_40EB80
  0040EB79: push    esi; Block
  0040EB7A: call    _free
  0040EB7F: pop     ecx
  0040EB80: mov     eax, edi
  0040EB82: lea     esp, [ebp-38h]
  0040EB85: call    __SEH_epilog
  0040EB8A: retn

Function: ___crtLCMapStringA
  0040EB8B: push    38h
  0040EB8D: push    4127B0h
  0040EB92: call    __SEH_prolog
  0040EB97: xor     ebx, ebx
  0040EB99: cmp     ds:41E2C4h, ebx
  0040EB9F: jnz     short loc_40EBD9
  0040EBA1: push    ebx; cchDest
  0040EBA2: push    ebx; lpDestStr
  0040EBA3: xor     esi, esi
  0040EBA5: inc     esi
  0040EBA6: push    esi; cchSrc
  0040EBA7: push    41279Ch; lpSrcStr
  0040EBAC: push    100h; dwMapFlags
  0040EBB1: push    ebx; Locale
  0040EBB2: call    dword ptr ds:4110D4h
  0040EBB8: test    eax, eax
  0040EBBA: jz      short loc_40EBC4
  0040EBBC: mov     ds:41E2C4h, esi
  0040EBC2: jmp     short loc_40EBD9
  0040EBC4: call    dword ptr ds:411034h
  0040EBCA: cmp     eax, 78h ; 'x'
  0040EBCD: jnz     short loc_40EBD9
  0040EBCF: mov     dword ptr ds:41E2C4h, 2
  0040EBD9: cmp     [ebp+cbMultiByte], ebx
  0040EBDC: jle     short loc_40EBF9
  0040EBDE: mov     ecx, [ebp+cbMultiByte]
  0040EBE1: mov     eax, [ebp+lpMultiByteStr]
  0040EBE4: dec     ecx
  0040EBE5: cmp     [eax], bl
  0040EBE7: jz      short loc_40EBF1
  0040EBE9: inc     eax
  0040EBEA: cmp     ecx, ebx
  0040EBEC: jnz     short loc_40EBE4
  0040EBEE: or      ecx, 0FFFFFFFFh
  0040EBF1: or      eax, 0FFFFFFFFh
  0040EBF4: sub     eax, ecx
  0040EBF6: add     [ebp+cbMultiByte], eax
  0040EBF9: mov     eax, ds:41E2C4h
  0040EBFE: cmp     eax, 2
  0040EC01: jz      loc_40EDE3
  0040EC07: cmp     eax, ebx
  0040EC09: jz      loc_40EDE3
  0040EC0F: cmp     eax, 1
  0040EC12: jnz     loc_40EE16
  0040EC18: xor     edi, edi
  0040EC1A: mov     [ebp+var_2C], edi
  0040EC1D: mov     [ebp+var_38], ebx
  0040EC20: mov     [ebp+var_34], ebx
  0040EC23: cmp     [ebp+CodePage], ebx
  0040EC26: jnz     short loc_40EC30
  0040EC28: mov     eax, ds:41E2BCh
  0040EC2D: mov     [ebp+CodePage], eax
  0040EC30: push    ebx; cchWideChar
  0040EC31: push    ebx; lpWideCharStr
  0040EC32: push    [ebp+cbMultiByte]; cbMultiByte
  0040EC35: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040EC38: xor     eax, eax
  0040EC3A: cmp     [ebp+arg_1C], ebx
  0040EC3D: setnz   al
  0040EC40: lea     eax, ds:1[eax*8]
  0040EC47: push    eax; dwFlags
  0040EC48: push    [ebp+CodePage]; CodePage
  0040EC4B: call    dword ptr ds:4110C8h
  0040EC51: mov     esi, eax
  0040EC53: mov     [ebp+var_30], esi
  0040EC56: cmp     esi, ebx
  0040EC58: jz      loc_40EE16
  0040EC5E: mov     [ebp+ms_exc.registration.TryLevel], 1
  0040EC65: lea     eax, [esi+esi]
  0040EC68: add     eax, 3
  0040EC6B: and     eax, 0FFFFFFFCh
  0040EC6E: call    __alloca_probe
  0040EC73: mov     [ebp+ms_exc.old_esp], esp
  0040EC76: mov     eax, esp
  0040EC78: mov     [ebp+lpWideCharStr], eax
  0040EC7B: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040EC7F: jmp     short loc_40EC9C
  0040EC81: xor     eax, eax
  0040EC83: inc     eax
  0040EC84: retn
  0040EC85: mov     esp, [ebp+ms_exc.old_esp]
  0040EC88: call    __resetstkoflw
  0040EC8D: xor     ebx, ebx
  0040EC8F: mov     [ebp+lpWideCharStr], ebx
  0040EC92: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040EC96: mov     edi, [ebp+var_2C]
  0040EC99: mov     esi, [ebp+var_30]
  0040EC9C: cmp     [ebp+lpWideCharStr], ebx
  0040EC9F: jnz     short loc_40ECBD
  0040ECA1: lea     eax, [esi+esi]
  0040ECA4: push    eax; Size
  0040ECA5: call    _malloc
  0040ECAA: pop     ecx
  0040ECAB: mov     [ebp+lpWideCharStr], eax
  0040ECAE: cmp     eax, ebx
  0040ECB0: jz      loc_40EE16
  0040ECB6: mov     [ebp+var_38], 1
  0040ECBD: push    esi; cchWideChar
  0040ECBE: push    [ebp+lpWideCharStr]; lpWideCharStr
  0040ECC1: push    [ebp+cbMultiByte]; cbMultiByte
  0040ECC4: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040ECC7: push    1; dwFlags
  0040ECC9: push    [ebp+CodePage]; CodePage
  0040ECCC: call    dword ptr ds:4110C8h
  0040ECD2: test    eax, eax
  0040ECD4: jz      loc_40EDC0
  0040ECDA: push    ebx; cchDest
  0040ECDB: push    ebx; lpDestStr
  0040ECDC: push    esi; cchSrc
  0040ECDD: push    [ebp+lpWideCharStr]; lpSrcStr
  0040ECE0: push    [ebp+dwMapFlags]; dwMapFlags
  0040ECE3: push    [ebp+Locale]; Locale
  0040ECE6: call    dword ptr ds:4110D4h
  0040ECEC: mov     edi, eax
  0040ECEE: mov     [ebp+var_2C], edi
  0040ECF1: cmp     edi, ebx
  0040ECF3: jz      loc_40EDC0
  0040ECF9: test    byte ptr [ebp+dwMapFlags+1], 4
  0040ECFD: jz      short loc_40ED2C
  0040ECFF: cmp     [ebp+cchDest], ebx
  0040ED02: jz      loc_40EDC0
  0040ED08: cmp     edi, [ebp+cchDest]
  0040ED0B: jg      loc_40EDC0
  0040ED11: push    [ebp+cchDest]; cchDest
  0040ED14: push    [ebp+lpDestStr]; lpDestStr
  0040ED17: push    esi; cchSrc
  0040ED18: push    [ebp+lpWideCharStr]; lpSrcStr
  0040ED1B: push    [ebp+dwMapFlags]; dwMapFlags
  0040ED1E: push    [ebp+Locale]; Locale
  0040ED21: call    dword ptr ds:4110D4h
  0040ED27: jmp     loc_40EDC0
  0040ED2C: mov     [ebp+ms_exc.registration.TryLevel], 2
  0040ED33: lea     eax, [edi+edi]
  0040ED36: add     eax, 3
  0040ED39: and     eax, 0FFFFFFFCh
  0040ED3C: call    __alloca_probe
  0040ED41: mov     [ebp+ms_exc.old_esp], esp
  0040ED44: mov     eax, esp
  0040ED46: mov     [ebp+var_20], eax
  0040ED49: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040ED4D: jmp     short loc_40ED6A
  0040ED4F: xor     eax, eax
  0040ED51: inc     eax
  0040ED52: retn
  0040ED53: mov     esp, [ebp+ms_exc.old_esp]
  0040ED56: call    __resetstkoflw
  0040ED5B: xor     ebx, ebx
  0040ED5D: mov     [ebp+var_20], ebx
  0040ED60: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040ED64: mov     edi, [ebp+var_2C]
  0040ED67: mov     esi, [ebp+var_30]
  0040ED6A: cmp     [ebp+var_20], ebx
  0040ED6D: jnz     short loc_40ED87
  0040ED6F: lea     eax, [edi+edi]
  0040ED72: push    eax; Size
  0040ED73: call    _malloc
  0040ED78: pop     ecx
  0040ED79: mov     [ebp+var_20], eax
  0040ED7C: cmp     eax, ebx
  0040ED7E: jz      short loc_40EDC0
  0040ED80: mov     [ebp+var_34], 1
  0040ED87: push    edi; cchDest
  0040ED88: push    [ebp+var_20]; lpDestStr
  0040ED8B: push    esi; cchSrc
  0040ED8C: push    [ebp+lpWideCharStr]; lpSrcStr
  0040ED8F: push    [ebp+dwMapFlags]; dwMapFlags
  0040ED92: push    [ebp+Locale]; Locale
  0040ED95: call    dword ptr ds:4110D4h
  0040ED9B: test    eax, eax
  0040ED9D: jz      short loc_40EDC0
  0040ED9F: push    ebx; lpUsedDefaultChar
  0040EDA0: push    ebx; lpDefaultChar
  0040EDA1: cmp     [ebp+cchDest], ebx
  0040EDA4: jnz     short loc_40EDAA
  0040EDA6: push    ebx
  0040EDA7: push    ebx
  0040EDA8: jmp     short loc_40EDB0
  0040EDAA: push    [ebp+cchDest]; cbMultiByte
  0040EDAD: push    [ebp+lpDestStr]; lpMultiByteStr
  0040EDB0: push    edi; cchWideChar
  0040EDB1: push    [ebp+var_20]; lpWideCharStr
  0040EDB4: push    ebx; dwFlags
  0040EDB5: push    [ebp+CodePage]; CodePage
  0040EDB8: call    dword ptr ds:411098h
  0040EDBE: mov     edi, eax
  0040EDC0: cmp     [ebp+var_34], ebx
  0040EDC3: jz      short loc_40EDCE
  0040EDC5: push    [ebp+var_20]; Block
  0040EDC8: call    _free
  0040EDCD: pop     ecx
  0040EDCE: cmp     [ebp+var_38], ebx
  0040EDD1: jz      short loc_40EDDC
  0040EDD3: push    [ebp+lpWideCharStr]; Block
  0040EDD6: call    _free
  0040EDDB: pop     ecx
  0040EDDC: mov     eax, edi
  0040EDDE: jmp     loc_40EF3E
  0040EDE3: mov     [ebp+lpSrcStr], ebx
  0040EDE6: xor     edi, edi
  0040EDE8: mov     [ebp+var_3C], ebx
  0040EDEB: cmp     [ebp+Locale], ebx
  0040EDEE: jnz     short loc_40EDF8
  0040EDF0: mov     eax, ds:41E2ACh
  0040EDF5: mov     [ebp+Locale], eax
  0040EDF8: cmp     [ebp+CodePage], ebx
  0040EDFB: jnz     short loc_40EE05
  0040EDFD: mov     eax, ds:41E2BCh
  0040EE02: mov     [ebp+CodePage], eax
  0040EE05: push    [ebp+Locale]; Locale
  0040EE08: call    ___ansicp
  0040EE0D: pop     ecx
  0040EE0E: mov     [ebp+var_40], eax
  0040EE11: cmp     eax, 0FFFFFFFFh
  0040EE14: jnz     short loc_40EE1D
  0040EE16: xor     eax, eax
  0040EE18: jmp     loc_40EF3E
  0040EE1D: cmp     eax, [ebp+CodePage]
  0040EE20: jz      loc_40EF14
  0040EE26: push    ebx; int
  0040EE27: push    ebx; LPSTR
  0040EE28: lea     ecx, [ebp+cbMultiByte]
  0040EE2B: push    ecx; int
  0040EE2C: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040EE2F: push    eax; UINT
  0040EE30: push    [ebp+CodePage]; CodePage
  0040EE33: call    ___convertcp
  0040EE38: add     esp, 18h
  0040EE3B: mov     [ebp+lpSrcStr], eax
  0040EE3E: cmp     eax, ebx
  0040EE40: jz      short loc_40EE16
  0040EE42: push    ebx; cchDest
  0040EE43: push    ebx; lpDestStr
  0040EE44: push    [ebp+cbMultiByte]; cchSrc
  0040EE47: push    eax; lpSrcStr
  0040EE48: push    [ebp+dwMapFlags]; dwMapFlags
  0040EE4B: push    [ebp+Locale]; Locale
  0040EE4E: call    dword ptr ds:4110D0h
  0040EE54: mov     esi, eax
  0040EE56: mov     [ebp+Size], esi
  0040EE59: cmp     esi, ebx
  0040EE5B: jz      loc_40EF03
  0040EE61: mov     [ebp+ms_exc.registration.TryLevel], ebx
  0040EE64: add     eax, 3
  0040EE67: and     eax, 0FFFFFFFCh
  0040EE6A: call    __alloca_probe
  0040EE6F: mov     [ebp+ms_exc.old_esp], esp
  0040EE72: mov     edi, esp
  0040EE74: mov     [ebp+var_44], edi
  0040EE77: push    esi; Size
  0040EE78: push    ebx; Val
  0040EE79: push    edi; void *
  0040EE7A: call    _memset
  0040EE7F: add     esp, 0Ch
  0040EE82: jmp     short loc_40EE94
  0040EE84: xor     eax, eax
  0040EE86: inc     eax
  0040EE87: retn
  0040EE88: mov     esp, [ebp+ms_exc.old_esp]
  0040EE8B: call    __resetstkoflw
  0040EE90: xor     ebx, ebx
  0040EE92: xor     edi, edi
  0040EE94: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040EE98: cmp     edi, ebx
  0040EE9A: jnz     short loc_40EEBF
  0040EE9C: push    [ebp+Size]; Size
  0040EE9F: call    _malloc
  0040EEA4: pop     ecx
  0040EEA5: mov     edi, eax
  0040EEA7: cmp     edi, ebx
  0040EEA9: jz      short loc_40EEDC
  0040EEAB: push    [ebp+Size]; Size
  0040EEAE: push    ebx; Val
  0040EEAF: push    edi; void *
  0040EEB0: call    _memset
  0040EEB5: add     esp, 0Ch
  0040EEB8: mov     [ebp+var_3C], 1
  0040EEBF: push    [ebp+Size]; cchDest
  0040EEC2: push    edi; lpDestStr
  0040EEC3: push    [ebp+cbMultiByte]; cchSrc
  0040EEC6: push    [ebp+lpSrcStr]; lpSrcStr
  0040EEC9: push    [ebp+dwMapFlags]; dwMapFlags
  0040EECC: push    [ebp+Locale]; Locale
  0040EECF: call    dword ptr ds:4110D0h
  0040EED5: mov     [ebp+Size], eax
  0040EED8: cmp     eax, ebx
  0040EEDA: jnz     short loc_40EEE0
  0040EEDC: xor     esi, esi
  0040EEDE: jmp     short loc_40EF06
  0040EEE0: push    [ebp+cchDest]; int
  0040EEE3: push    [ebp+lpDestStr]; LPSTR
  0040EEE6: lea     eax, [ebp+Size]
  0040EEE9: push    eax; int
  0040EEEA: push    edi; lpMultiByteStr
  0040EEEB: push    [ebp+CodePage]; UINT
  0040EEEE: push    [ebp+var_40]; CodePage
  0040EEF1: call    ___convertcp
  0040EEF6: add     esp, 18h
  0040EEF9: mov     esi, eax
  0040EEFB: neg     esi
  0040EEFD: sbb     esi, esi
  0040EEFF: neg     esi
  0040EF01: jmp     short loc_40EF06
  0040EF03: mov     esi, [ebp+var_48]
  0040EF06: cmp     [ebp+var_3C], ebx
  0040EF09: jz      short loc_40EF2E
  0040EF0B: push    edi; Block
  0040EF0C: call    _free
  0040EF11: pop     ecx
  0040EF12: jmp     short loc_40EF2E
  0040EF14: push    [ebp+cchDest]; cchDest
  0040EF17: push    [ebp+lpDestStr]; lpDestStr
  0040EF1A: push    [ebp+cbMultiByte]; cchSrc
  0040EF1D: push    [ebp+lpMultiByteStr]; lpSrcStr
  0040EF20: push    [ebp+dwMapFlags]; dwMapFlags
  0040EF23: push    [ebp+Locale]; Locale
  0040EF26: call    dword ptr ds:4110D0h
  0040EF2C: mov     esi, eax
  0040EF2E: cmp     [ebp+lpSrcStr], ebx
  0040EF31: jz      short loc_40EF3C
  0040EF33: push    [ebp+lpSrcStr]; Block
  0040EF36: call    _free
  0040EF3B: pop     ecx
  0040EF3C: mov     eax, esi
  0040EF3E: lea     esp, [ebp-54h]
  0040EF41: call    __SEH_epilog
  0040EF46: retn

Function: ___addl
  0040EF47: mov     edx, [esp+arg_0]
  0040EF4B: push    esi
  0040EF4C: mov     esi, [esp+4+arg_4]
  0040EF50: lea     ecx, [edx+esi]
  0040EF53: xor     eax, eax
  0040EF55: cmp     ecx, edx
  0040EF57: jb      short loc_40EF5D
  0040EF59: cmp     ecx, esi
  0040EF5B: jnb     short loc_40EF60
  0040EF5D: xor     eax, eax
  0040EF5F: inc     eax
  0040EF60: mov     edx, [esp+4+arg_8]
  0040EF64: mov     [edx], ecx
  0040EF66: pop     esi
  0040EF67: retn

Function: ___add_12
  0040EF68: push    esi
  0040EF69: mov     esi, [esp+4+arg_0]
  0040EF6D: push    edi
  0040EF6E: mov     edi, [esp+8+arg_4]
  0040EF72: push    esi
  0040EF73: push    dword ptr [edi]
  0040EF75: push    dword ptr [esi]
  0040EF77: call    ___addl
  0040EF7C: add     esp, 0Ch
  0040EF7F: test    eax, eax
  0040EF81: jz      short loc_40EF9A
  0040EF83: lea     eax, [esi+4]
  0040EF86: push    eax
  0040EF87: push    1
  0040EF89: push    dword ptr [eax]
  0040EF8B: call    ___addl
  0040EF90: add     esp, 0Ch
  0040EF93: test    eax, eax
  0040EF95: jz      short loc_40EF9A
  0040EF97: inc     dword ptr [esi+8]
  0040EF9A: lea     eax, [esi+4]
  0040EF9D: push    eax
  0040EF9E: push    dword ptr [edi+4]
  0040EFA1: push    dword ptr [eax]
  0040EFA3: call    ___addl
  0040EFA8: add     esp, 0Ch
  0040EFAB: test    eax, eax
  0040EFAD: jz      short loc_40EFB2
  0040EFAF: inc     dword ptr [esi+8]
  0040EFB2: lea     eax, [esi+8]
  0040EFB5: push    eax
  0040EFB6: push    dword ptr [edi+8]
  0040EFB9: push    dword ptr [eax]
  0040EFBB: call    ___addl
  0040EFC0: add     esp, 0Ch
  0040EFC3: pop     edi
  0040EFC4: pop     esi
  0040EFC5: retn

Function: ___shl_12
  0040EFC6: mov     eax, [esp+arg_0]
  0040EFCA: push    esi
  0040EFCB: mov     esi, [eax]
  0040EFCD: mov     ecx, esi
  0040EFCF: add     esi, esi
  0040EFD1: push    edi
  0040EFD2: mov     edi, [eax+4]
  0040EFD5: shr     ecx, 1Fh
  0040EFD8: mov     [eax], esi
  0040EFDA: lea     esi, [edi+edi]
  0040EFDD: or      esi, ecx
  0040EFDF: mov     ecx, [eax+8]
  0040EFE2: mov     edx, edi
  0040EFE4: shr     edx, 1Fh
  0040EFE7: shl     ecx, 1
  0040EFE9: or      ecx, edx
  0040EFEB: pop     edi
  0040EFEC: mov     [eax+4], esi
  0040EFEF: mov     [eax+8], ecx
  0040EFF2: pop     esi
  0040EFF3: retn

Function: ___shr_12
  0040EFF4: mov     eax, [esp+arg_0]
  0040EFF8: mov     edx, [eax+8]
  0040EFFB: mov     ecx, [eax+4]
  0040EFFE: push    esi
  0040EFFF: push    edi
  0040F000: mov     edi, ecx
  0040F002: mov     esi, edx
  0040F004: shr     ecx, 1
  0040F006: shl     esi, 1Fh
  0040F009: or      ecx, esi
  0040F00B: mov     [eax+4], ecx
  0040F00E: mov     ecx, [eax]
  0040F010: shl     edi, 1Fh
  0040F013: shr     ecx, 1
  0040F015: or      ecx, edi
  0040F017: shr     edx, 1
  0040F019: pop     edi
  0040F01A: mov     [eax+8], edx
  0040F01D: mov     [eax], ecx
  0040F01F: pop     esi
  0040F020: retn

Function: ___mtold12
  0040F021: push    ebp
  0040F022: mov     ebp, esp
  0040F024: sub     esp, 14h
  0040F027: mov     eax, ds:413390h
  0040F02C: push    ebx
  0040F02D: mov     ebx, [ebp+arg_8]
  0040F030: xor     edx, edx
  0040F032: mov     [ebp+StackCookie], eax
  0040F035: mov     eax, [ebp+arg_4]
  0040F038: cmp     eax, edx
  0040F03A: push    esi
  0040F03B: push    edi
  0040F03C: mov     [ebp+var_14], 404Eh
  0040F043: mov     [ebx], edx
  0040F045: mov     [ebx+4], edx
  0040F048: mov     [ebx+8], edx
  0040F04B: jbe     short loc_40F09C
  0040F04D: mov     [ebp+arg_8], eax
  0040F050: mov     esi, ebx
  0040F052: lea     edi, [ebp+var_10]
  0040F055: movsd
  0040F056: movsd
  0040F057: push    ebx
  0040F058: movsd
  0040F059: call    ___shl_12
  0040F05E: push    ebx
  0040F05F: call    ___shl_12
  0040F064: lea     eax, [ebp+var_10]
  0040F067: push    eax
  0040F068: push    ebx
  0040F069: call    ___add_12
  0040F06E: push    ebx
  0040F06F: call    ___shl_12
  0040F074: mov     eax, [ebp+arg_0]
  0040F077: movsx   eax, byte ptr [eax]
  0040F07A: and     [ebp+var_C], 0
  0040F07E: and     [ebp+var_8], 0
  0040F082: mov     [ebp+var_10], eax
  0040F085: lea     eax, [ebp+var_10]
  0040F088: push    eax
  0040F089: push    ebx
  0040F08A: call    ___add_12
  0040F08F: add     esp, 1Ch
  0040F092: inc     [ebp+arg_0]
  0040F095: dec     [ebp+arg_8]
  0040F098: jnz     short loc_40F050
  0040F09A: xor     edx, edx
  0040F09C: cmp     [ebx+8], edx
  0040F09F: jnz     short loc_40F0D0
  0040F0A1: mov     edi, [ebx+8]
  0040F0A4: mov     ecx, [ebx+4]
  0040F0A7: add     [ebp+var_14], 0FFF0h
  0040F0AE: mov     eax, ecx
  0040F0B0: shr     eax, 10h
  0040F0B3: mov     edi, eax
  0040F0B5: mov     eax, [ebx]
  0040F0B7: mov     esi, eax
  0040F0B9: shr     esi, 10h
  0040F0BC: shl     ecx, 10h
  0040F0BF: or      esi, ecx
  0040F0C1: shl     eax, 10h
  0040F0C4: cmp     edi, edx
  0040F0C6: mov     [ebx+4], esi
  0040F0C9: mov     [ebx], eax
  0040F0CB: jz      short loc_40F0A4
  0040F0CD: mov     [ebx+8], edi
  0040F0D0: mov     esi, 8000h
  0040F0D5: jmp     short loc_40F0E5
  0040F0D7: push    ebx
  0040F0D8: call    ___shl_12
  0040F0DD: add     [ebp+var_14], 0FFFFh
  0040F0E4: pop     ecx
  0040F0E5: test    [ebx+8], esi
  0040F0E8: jz      short loc_40F0D7
  0040F0EA: mov     ax, word ptr [ebp+var_14]
  0040F0EE: mov     ecx, [ebp+StackCookie]; StackCookie
  0040F0F1: pop     edi
  0040F0F2: pop     esi
  0040F0F3: mov     [ebx+0Ah], ax
  0040F0F7: pop     ebx
  0040F0F8: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040F0FD: leave
  0040F0FE: retn

Function: ___strgtold12
  0040F0FF: push    ebp
  0040F100: mov     ebp, esp
  0040F102: sub     esp, 5Ch
  0040F105: mov     eax, ds:413390h
  0040F10A: mov     [ebp+StackCookie], eax
  0040F10D: push    ebx
  0040F10E: lea     eax, [ebp+var_30]
  0040F111: push    esi
  0040F112: mov     [ebp+var_3C], eax
  0040F115: xor     eax, eax
  0040F117: xor     edx, edx
  0040F119: push    edi
  0040F11A: mov     edi, [ebp+arg_8]
  0040F11D: inc     edx
  0040F11E: mov     [ebp+var_50], eax
  0040F121: mov     [ebp+var_4C], edx
  0040F124: mov     [ebp+var_34], eax
  0040F127: mov     [ebp+var_44], eax
  0040F12A: mov     [ebp+var_58], eax
  0040F12D: mov     [ebp+var_5C], eax
  0040F130: mov     [ebp+var_54], eax
  0040F133: mov     [ebp+var_38], eax
  0040F136: mov     [ebp+var_48], eax
  0040F139: mov     [ebp+var_40], edi
  0040F13C: mov     cl, [edi]
  0040F13E: cmp     cl, 20h ; ' '
  0040F141: jz      short loc_40F152
  0040F143: cmp     cl, 9
  0040F146: jz      short loc_40F152
  0040F148: cmp     cl, 0Ah
  0040F14B: jz      short loc_40F152
  0040F14D: cmp     cl, 0Dh
  0040F150: jnz     short loc_40F155
  0040F152: inc     edi
  0040F153: jmp     short loc_40F13C
  0040F155: push    4
  0040F157: pop     esi
  0040F158: mov     bl, [edi]
  0040F15A: inc     edi
  0040F15B: cmp     eax, 0Bh; switch with an invalid jump table
  0040F15E: ja      def_F164; jumptable 0040F164 default case
  0040F164: jmp     dword ptr [eax*4+40F556h]; switch jump
  0040F16B: cmp     bl, 31h ; '1'; jumptable 0040F164 case 0
  0040F16E: jl      short loc_40F17C
  0040F170: cmp     bl, 39h ; '9'
  0040F173: jg      short loc_40F17C
  0040F175: push    3
  0040F177: jmp     loc_40F384
  0040F17C: cmp     bl, ds:4133A4h
  0040F182: jnz     short loc_40F18B
  0040F184: push    5
  0040F186: jmp     loc_40F3C2
  0040F18B: movsx   eax, bl
  0040F18E: sub     eax, 2Bh ; '+'
  0040F191: jz      short loc_40F1B2
  0040F193: dec     eax
  0040F194: dec     eax
  0040F195: jz      short loc_40F1A6
  0040F197: sub     eax, 3
  0040F19A: jz      loc_40F229
  0040F1A0: dec     edi
  0040F1A1: jmp     loc_40F45F
  0040F1A6: push    2
  0040F1A8: pop     eax
  0040F1A9: mov     [ebp+var_50], 8000h
  0040F1B0: jmp     short loc_40F158
  0040F1B2: and     [ebp+var_50], 0
  0040F1B6: push    2
  0040F1B8: pop     eax
  0040F1B9: jmp     short loc_40F158
  0040F1BB: cmp     bl, 31h ; '1'; jumptable 0040F164 case 1
  0040F1BE: mov     [ebp+var_44], edx
  0040F1C1: jl      short loc_40F1C8
  0040F1C3: cmp     bl, 39h ; '9'
  0040F1C6: jle     short loc_40F175
  0040F1C8: cmp     bl, ds:4133A4h
  0040F1CE: jz      loc_40F282
  0040F1D4: cmp     bl, 2Bh ; '+'
  0040F1D7: jz      short loc_40F1FE
  0040F1D9: cmp     bl, 2Dh ; '-'
  0040F1DC: jz      short loc_40F1FE
  0040F1DE: cmp     bl, 30h ; '0'
  0040F1E1: jz      short loc_40F229
  0040F1E3: cmp     bl, 43h ; 'C'
  0040F1E6: jle     short loc_40F1A0
  0040F1E8: cmp     bl, 45h ; 'E'
  0040F1EB: jle     short loc_40F1F7
  0040F1ED: cmp     bl, 63h ; 'c'
  0040F1F0: jle     short loc_40F1A0
  0040F1F2: cmp     bl, 65h ; 'e'
  0040F1F5: jg      short loc_40F1A0
  0040F1F7: push    6
  0040F1F9: jmp     loc_40F3C2
  0040F1FE: dec     edi
  0040F1FF: push    0Bh
  0040F201: jmp     loc_40F3C2
  0040F206: cmp     bl, 31h ; '1'; jumptable 0040F164 case 2
  0040F209: jl      short loc_40F214
  0040F20B: cmp     bl, 39h ; '9'
  0040F20E: jle     loc_40F175
  0040F214: cmp     bl, ds:4133A4h
  0040F21A: jz      loc_40F184
  0040F220: cmp     bl, 30h ; '0'
  0040F223: jnz     loc_40F390
  0040F229: mov     eax, edx
  0040F22B: jmp     loc_40F158
  0040F230: mov     [ebp+var_44], edx; jumptable 0040F164 case 3
  0040F233: cmp     ds:4133A0h, edx
  0040F239: movzx   eax, bl
  0040F23C: jle     short loc_40F24C
  0040F23E: push    esi; Type
  0040F23F: push    eax; C
  0040F240: call    __isctype
  0040F245: pop     ecx
  0040F246: xor     edx, edx
  0040F248: pop     ecx
  0040F249: inc     edx
  0040F24A: jmp     short loc_40F258
  0040F24C: mov     ecx, ds:4133ACh
  0040F252: movzx   eax, byte ptr [ecx+eax*2]
  0040F256: and     eax, esi
  0040F258: test    eax, eax
  0040F25A: jz      short loc_40F27A
  0040F25C: cmp     [ebp+var_34], 19h
  0040F260: jnb     short loc_40F272
  0040F262: mov     eax, [ebp+var_3C]
  0040F265: inc     [ebp+var_34]
  0040F268: sub     bl, 30h ; '0'
  0040F26B: inc     [ebp+var_3C]
  0040F26E: mov     [eax], bl
  0040F270: jmp     short loc_40F275
  0040F272: inc     [ebp+var_38]
  0040F275: mov     bl, [edi]
  0040F277: inc     edi
  0040F278: jmp     short loc_40F233
  0040F27A: cmp     bl, ds:4133A4h
  0040F280: jnz     short loc_40F2E7
  0040F282: mov     eax, esi
  0040F284: jmp     loc_40F158
  0040F289: cmp     [ebp+var_34], 0; jumptable 0040F164 case 4
  0040F28D: mov     [ebp+var_44], edx
  0040F290: mov     [ebp+var_58], edx
  0040F293: jnz     short loc_40F2A2
  0040F295: jmp     short loc_40F29D
  0040F297: dec     [ebp+var_38]
  0040F29A: mov     bl, [edi]
  0040F29C: inc     edi
  0040F29D: cmp     bl, 30h ; '0'
  0040F2A0: jz      short loc_40F297
  0040F2A2: cmp     ds:4133A0h, edx
  0040F2A8: movzx   eax, bl
  0040F2AB: jle     short loc_40F2BB
  0040F2AD: push    esi; Type
  0040F2AE: push    eax; C
  0040F2AF: call    __isctype
  0040F2B4: pop     ecx
  0040F2B5: xor     edx, edx
  0040F2B7: pop     ecx
  0040F2B8: inc     edx
  0040F2B9: jmp     short loc_40F2C7
  0040F2BB: mov     ecx, ds:4133ACh
  0040F2C1: movzx   eax, byte ptr [ecx+eax*2]
  0040F2C5: and     eax, esi
  0040F2C7: test    eax, eax
  0040F2C9: jz      short loc_40F2E7
  0040F2CB: cmp     [ebp+var_34], 19h
  0040F2CF: jnb     short loc_40F2E2
  0040F2D1: inc     [ebp+var_34]
  0040F2D4: mov     eax, [ebp+var_3C]
  0040F2D7: sub     bl, 30h ; '0'
  0040F2DA: inc     [ebp+var_3C]
  0040F2DD: dec     [ebp+var_38]
  0040F2E0: mov     [eax], bl
  0040F2E2: mov     bl, [edi]
  0040F2E4: inc     edi
  0040F2E5: jmp     short loc_40F2A2
  0040F2E7: cmp     bl, 2Bh ; '+'
  0040F2EA: jz      loc_40F1FE
  0040F2F0: cmp     bl, 2Dh ; '-'
  0040F2F3: jz      loc_40F1FE
  0040F2F9: jmp     loc_40F1E3
  0040F2FE: cmp     ds:4133A0h, edx; jumptable 0040F164 case 5
  0040F304: mov     [ebp+var_58], edx
  0040F307: movzx   eax, bl
  0040F30A: jle     short loc_40F31A
  0040F30C: push    esi; Type
  0040F30D: push    eax; C
  0040F30E: call    __isctype
  0040F313: pop     ecx
  0040F314: xor     edx, edx
  0040F316: pop     ecx
  0040F317: inc     edx
  0040F318: jmp     short loc_40F326
  0040F31A: mov     ecx, ds:4133ACh
  0040F320: movzx   eax, byte ptr [ecx+eax*2]
  0040F324: and     eax, esi
  0040F326: test    eax, eax
  0040F328: jz      short loc_40F390
  0040F32A: mov     eax, esi
  0040F32C: jmp     short loc_40F385
  0040F32E: cmp     bl, 31h ; '1'; jumptable 0040F164 case 6
  0040F331: lea     ecx, [edi-2]
  0040F334: mov     [ebp+var_40], ecx
  0040F337: jl      short loc_40F33E
  0040F339: cmp     bl, 39h ; '9'
  0040F33C: jle     short loc_40F382
  0040F33E: movsx   eax, bl
  0040F341: sub     eax, 2Bh ; '+'
  0040F344: jz      short loc_40F3C0
  0040F346: dec     eax
  0040F347: dec     eax
  0040F348: jz      short loc_40F3B4
  0040F34A: sub     eax, 3
  0040F34D: jnz     loc_40F45D
  0040F353: push    8
  0040F355: jmp     short loc_40F3C2
  0040F357: mov     [ebp+var_5C], edx; jumptable 0040F164 case 8
  0040F35A: jmp     short loc_40F35F
  0040F35C: mov     bl, [edi]
  0040F35E: inc     edi
  0040F35F: cmp     bl, 30h ; '0'
  0040F362: jz      short loc_40F35C
  0040F364: cmp     bl, 31h ; '1'
  0040F367: jl      loc_40F1A0
  0040F36D: cmp     bl, 39h ; '9'
  0040F370: jg      loc_40F1A0
  0040F376: jmp     short loc_40F382
  0040F378: cmp     bl, 31h ; '1'; jumptable 0040F164 case 7
  0040F37B: jl      short loc_40F38B
  0040F37D: cmp     bl, 39h ; '9'
  0040F380: jg      short loc_40F38B
  0040F382: push    9
  0040F384: pop     eax
  0040F385: dec     edi
  0040F386: jmp     loc_40F158
  0040F38B: cmp     bl, 30h ; '0'
  0040F38E: jz      short loc_40F353
  0040F390: mov     edi, [ebp+var_40]
  0040F393: jmp     loc_40F45F
  0040F398: cmp     [ebp+arg_18], 0; jumptable 0040F164 case 11
  0040F39C: jz      short loc_40F3C8
  0040F39E: movsx   eax, bl
  0040F3A1: sub     eax, 2Bh ; '+'
  0040F3A4: lea     ecx, [edi-1]
  0040F3A7: mov     [ebp+var_40], ecx
  0040F3AA: jz      short loc_40F3C0
  0040F3AC: dec     eax
  0040F3AD: dec     eax
  0040F3AE: jnz     loc_40F45D
  0040F3B4: or      [ebp+var_4C], 0FFFFFFFFh
  0040F3B8: push    7
  0040F3BA: pop     eax
  0040F3BB: jmp     loc_40F158
  0040F3C0: push    7
  0040F3C2: pop     eax
  0040F3C3: jmp     loc_40F158
  0040F3C8: push    0Ah
  0040F3CA: pop     eax
  0040F3CB: dec     edi
  0040F3CC: cmp     eax, 0Ah; jumptable 0040F164 default case
  0040F3CF: jnz     loc_40F158
  0040F3D5: jmp     loc_40F45F
  0040F3DA: mov     [ebp+var_5C], 1; jumptable 0040F164 case 9
  0040F3E1: xor     esi, esi
  0040F3E3: cmp     dword ptr ds:4133A0h, 1
  0040F3EA: movzx   eax, bl
  0040F3ED: jle     short loc_40F3FB
  0040F3EF: push    4; Type
  0040F3F1: push    eax; C
  0040F3F2: call    __isctype
  0040F3F7: pop     ecx
  0040F3F8: pop     ecx
  0040F3F9: jmp     short loc_40F408
  0040F3FB: mov     ecx, ds:4133ACh
  0040F401: movzx   eax, byte ptr [ecx+eax*2]
  0040F405: and     eax, 4
  0040F408: test    eax, eax
  0040F40A: jz      short loc_40F428
  0040F40C: movsx   ecx, bl
  0040F40F: lea     eax, [esi+esi*4]
  0040F412: lea     esi, [ecx+eax*2-30h]
  0040F416: cmp     esi, 1450h
  0040F41C: jg      short loc_40F423
  0040F41E: mov     bl, [edi]
  0040F420: inc     edi
  0040F421: jmp     short loc_40F3E3
  0040F423: mov     esi, 1451h
  0040F428: mov     [ebp+var_54], esi
  0040F42B: cmp     dword ptr ds:4133A0h, 1
  0040F432: movzx   eax, bl
  0040F435: jle     short loc_40F443
  0040F437: push    4; Type
  0040F439: push    eax; C
  0040F43A: call    __isctype
  0040F43F: pop     ecx
  0040F440: pop     ecx
  0040F441: jmp     short loc_40F450
  0040F443: mov     ecx, ds:4133ACh
  0040F449: movzx   eax, byte ptr [ecx+eax*2]
  0040F44D: and     eax, 4
  0040F450: test    eax, eax
  0040F452: jz      loc_40F1A0
  0040F458: mov     bl, [edi]
  0040F45A: inc     edi
  0040F45B: jmp     short loc_40F42B
  0040F45D: mov     edi, ecx
  0040F45F: cmp     [ebp+var_44], 0
  0040F463: mov     eax, [ebp+arg_4]
  0040F466: mov     [eax], edi
  0040F468: jz      loc_40F504
  0040F46E: push    18h
  0040F470: pop     eax
  0040F471: cmp     [ebp+var_34], eax
  0040F474: jbe     short loc_40F48B
  0040F476: cmp     [ebp+var_19], 5
  0040F47A: jl      short loc_40F47F
  0040F47C: inc     [ebp+var_19]
  0040F47F: mov     [ebp+var_34], eax
  0040F482: mov     eax, [ebp+var_3C]
  0040F485: dec     eax
  0040F486: inc     [ebp+var_38]
  0040F489: jmp     short loc_40F48E
  0040F48B: mov     eax, [ebp+var_3C]
  0040F48E: cmp     [ebp+var_34], 0
  0040F492: jbe     loc_40F52B
  0040F498: jmp     short loc_40F4A0
  0040F49A: dec     [ebp+var_34]
  0040F49D: inc     [ebp+var_38]
  0040F4A0: dec     eax
  0040F4A1: cmp     byte ptr [eax], 0
  0040F4A4: jz      short loc_40F49A
  0040F4A6: lea     eax, [ebp+var_14]
  0040F4A9: push    eax
  0040F4AA: push    [ebp+var_34]
  0040F4AD: lea     eax, [ebp+var_30]
  0040F4B0: push    eax
  0040F4B1: call    ___mtold12
  0040F4B6: mov     eax, [ebp+var_54]
  0040F4B9: xor     ecx, ecx
  0040F4BB: add     esp, 0Ch
  0040F4BE: cmp     [ebp+var_4C], ecx
  0040F4C1: jge     short loc_40F4C5
  0040F4C3: neg     eax
  0040F4C5: add     eax, [ebp+var_38]
  0040F4C8: cmp     [ebp+var_5C], ecx
  0040F4CB: jnz     short loc_40F4D0
  0040F4CD: add     eax, [ebp+arg_10]
  0040F4D0: cmp     [ebp+var_58], ecx
  0040F4D3: jnz     short loc_40F4D8
  0040F4D5: sub     eax, [ebp+arg_14]
  0040F4D8: cmp     eax, 1450h
  0040F4DD: jg      short loc_40F50D
  0040F4DF: cmp     eax, 0FFFFEBB0h
  0040F4E4: jl      short loc_40F524
  0040F4E6: push    [ebp+arg_C]
  0040F4E9: push    eax
  0040F4EA: lea     eax, [ebp+var_14]
  0040F4ED: push    eax
  0040F4EE: call    ___multtenpow12
  0040F4F3: mov     edx, [ebp+var_14]
  0040F4F6: mov     ebx, [ebp+var_14+2]
  0040F4F9: mov     esi, [ebp+var_E]
  0040F4FC: mov     eax, [ebp+var_A]
  0040F4FF: add     esp, 0Ch
  0040F502: jmp     short loc_40F533
  0040F504: mov     [ebp+var_48], 4
  0040F50B: jmp     short loc_40F52B
  0040F50D: xor     ebx, ebx
  0040F50F: mov     eax, 7FFFh
  0040F514: mov     esi, 80000000h
  0040F519: xor     edx, edx
  0040F51B: mov     [ebp+var_48], 2
  0040F522: jmp     short loc_40F533
  0040F524: mov     [ebp+var_48], 1
  0040F52B: xor     edx, edx
  0040F52D: xor     eax, eax
  0040F52F: xor     esi, esi
  0040F531: xor     ebx, ebx
  0040F533: mov     ecx, [ebp+arg_0]
  0040F536: or      eax, [ebp+var_50]
  0040F539: pop     edi
  0040F53A: mov     [ecx+6], esi
  0040F53D: mov     [ecx+2], ebx
  0040F540: mov     [ecx+0Ah], ax
  0040F544: mov     eax, [ebp+var_48]
  0040F547: mov     [ecx], dx
  0040F54A: mov     ecx, [ebp+StackCookie]; StackCookie
  0040F54D: pop     esi
  0040F54E: pop     ebx
  0040F54F: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040F554: leave
  0040F555: retn

Function: _$I10_OUTPUT
  0040F586: push    ebp
  0040F587: mov     ebp, esp
  0040F589: sub     esp, 30h
  0040F58C: mov     eax, ds:413390h
  0040F591: mov     [ebp+StackCookie], eax
  0040F594: mov     eax, [ebp+arg_8]
  0040F597: push    ebx
  0040F598: mov     ebx, [ebp+arg_14]
  0040F59B: push    esi
  0040F59C: mov     ecx, eax
  0040F59E: mov     esi, 7FFFh
  0040F5A3: and     ecx, 8000h
  0040F5A9: and     eax, esi
  0040F5AB: test    cx, cx
  0040F5AE: push    edi
  0040F5AF: mov     [ebp+var_1C], 0CCh ; 'Ì'
  0040F5B3: mov     [ebp+var_1B], 0CCh ; 'Ì'
  0040F5B7: mov     [ebp+var_1A], 0CCh ; 'Ì'
  0040F5BB: mov     [ebp+var_19], 0CCh ; 'Ì'
  0040F5BF: mov     [ebp+var_18], 0CCh ; 'Ì'
  0040F5C3: mov     [ebp+var_17], 0CCh ; 'Ì'
  0040F5C7: mov     [ebp+var_16], 0CCh ; 'Ì'
  0040F5CB: mov     [ebp+var_15], 0CCh ; 'Ì'
  0040F5CF: mov     [ebp+var_14], 0CCh ; 'Ì'
  0040F5D3: mov     [ebp+var_13], 0CCh ; 'Ì'
  0040F5D7: mov     [ebp+var_12], 0FBh ; 'û'
  0040F5DB: mov     [ebp+var_11], 3Fh ; '?'
  0040F5DF: mov     [ebp+var_2C], 1
  0040F5E6: mov     edx, eax
  0040F5E8: jz      short loc_40F5F0
  0040F5EA: mov     byte ptr [ebx+2], 2Dh ; '-'
  0040F5EE: jmp     short loc_40F5F4
  0040F5F0: mov     byte ptr [ebx+2], 20h ; ' '
  0040F5F4: test    dx, dx
  0040F5F7: mov     edi, [ebp+arg_4]
  0040F5FA: jnz     short loc_40F609
  0040F5FC: test    edi, edi
  0040F5FE: jnz     short loc_40F609
  0040F600: cmp     [ebp+arg_0], edi
  0040F603: jz      loc_40F6FC
  0040F609: cmp     dx, si
  0040F60C: jnz     short loc_40F686
  0040F60E: mov     eax, 80000000h
  0040F613: cmp     edi, eax
  0040F615: mov     word ptr [ebx], 1
  0040F61A: jnz     short loc_40F622
  0040F61C: cmp     [ebp+arg_0], 0
  0040F620: jz      short loc_40F631
  0040F622: test    edi, 40000000h
  0040F628: jnz     short loc_40F631
  0040F62A: push    4127ECh
  0040F62F: jmp     short loc_40F677
  0040F631: test    cx, cx
  0040F634: jz      short loc_40F64B
  0040F636: cmp     edi, 0C0000000h
  0040F63C: jnz     short loc_40F64B
  0040F63E: cmp     [ebp+arg_0], 0
  0040F642: jnz     short loc_40F672
  0040F644: push    4127E4h
  0040F649: jmp     short loc_40F65A
  0040F64B: cmp     edi, eax
  0040F64D: jnz     short loc_40F672
  0040F64F: cmp     [ebp+arg_0], 0
  0040F653: jnz     short loc_40F672
  0040F655: push    4127DCh; Source
  0040F65A: lea     eax, [ebx+4]
  0040F65D: push    eax; Destination
  0040F65E: call    _strcpy
  0040F663: mov     byte ptr [ebx+3], 5
  0040F667: and     [ebp+var_2C], 0
  0040F66B: pop     ecx
  0040F66C: pop     ecx
  0040F66D: jmp     loc_40F7DE
  0040F672: push    4127D4h; Source
  0040F677: lea     eax, [ebx+4]
  0040F67A: push    eax; Destination
  0040F67B: call    _strcpy
  0040F680: mov     byte ptr [ebx+3], 6
  0040F684: jmp     short loc_40F667
  0040F686: movzx   eax, dx
  0040F689: mov     esi, eax
  0040F68B: imul    eax, 4D10h
  0040F691: and     [ebp+var_10], 0
  0040F696: mov     ecx, edi
  0040F698: shr     ecx, 18h
  0040F69B: shr     esi, 8
  0040F69E: lea     ecx, [esi+ecx*2]
  0040F6A1: imul    ecx, 4Dh ; 'M'
  0040F6A4: lea     esi, [ecx+eax-134312F4h]
  0040F6AB: mov     eax, [ebp+arg_0]
  0040F6AE: mov     [ebp+var_E], eax
  0040F6B1: sar     esi, 10h
  0040F6B4: movsx   eax, si
  0040F6B7: neg     eax
  0040F6B9: push    1
  0040F6BB: push    eax
  0040F6BC: lea     eax, [ebp+var_10]
  0040F6BF: push    eax
  0040F6C0: mov     [ebp+var_6], dx
  0040F6C4: mov     [ebp+var_A], edi
  0040F6C7: call    ___multtenpow12
  0040F6CC: add     esp, 0Ch
  0040F6CF: cmp     [ebp+var_6], 3FFFh
  0040F6D5: jb      short loc_40F6E7
  0040F6D7: lea     eax, [ebp+var_1C]
  0040F6DA: push    eax
  0040F6DB: lea     eax, [ebp+var_10]
  0040F6DE: push    eax
  0040F6DF: inc     esi
  0040F6E0: call    ___ld12mul
  0040F6E5: pop     ecx
  0040F6E6: pop     ecx
  0040F6E7: test    [ebp+arg_10], 1
  0040F6EB: mov     edi, [ebp+arg_C]
  0040F6EE: mov     [ebx], si
  0040F6F1: jz      short loc_40F705
  0040F6F3: movsx   eax, si
  0040F6F6: add     edi, eax
  0040F6F8: test    edi, edi
  0040F6FA: jg      short loc_40F705
  0040F6FC: mov     byte ptr [ebx+4], 30h ; '0'
  0040F700: jmp     loc_40F7FF
  0040F705: cmp     edi, 15h
  0040F708: jle     short loc_40F70D
  0040F70A: push    15h
  0040F70C: pop     edi
  0040F70D: movzx   esi, [ebp+var_6]
  0040F711: sub     esi, 3FFEh
  0040F717: and     [ebp+var_6], 0
  0040F71C: mov     [ebp+arg_8], 8
  0040F723: lea     eax, [ebp+var_10]
  0040F726: push    eax
  0040F727: call    ___shl_12
  0040F72C: dec     [ebp+arg_8]
  0040F72F: pop     ecx
  0040F730: jnz     short loc_40F723
  0040F732: test    esi, esi
  0040F734: jge     short loc_40F74D
  0040F736: neg     esi
  0040F738: and     esi, 0FFh
  0040F73E: jle     short loc_40F74D
  0040F740: lea     eax, [ebp+var_10]
  0040F743: push    eax
  0040F744: call    ___shr_12
  0040F749: dec     esi
  0040F74A: pop     ecx
  0040F74B: jnz     short loc_40F740
  0040F74D: lea     ecx, [edi+1]
  0040F750: test    ecx, ecx
  0040F752: lea     eax, [ebx+4]
  0040F755: mov     [ebp+var_30], eax
  0040F758: jle     short loc_40F7AA
  0040F75A: mov     [ebp+arg_8], ecx
  0040F75D: lea     esi, [ebp+var_10]
  0040F760: lea     edi, [ebp+var_28]
  0040F763: movsd
  0040F764: movsd
  0040F765: lea     eax, [ebp+var_10]
  0040F768: push    eax
  0040F769: movsd
  0040F76A: call    ___shl_12
  0040F76F: lea     eax, [ebp+var_10]
  0040F772: push    eax
  0040F773: call    ___shl_12
  0040F778: lea     eax, [ebp+var_28]
  0040F77B: push    eax
  0040F77C: lea     eax, [ebp+var_10]
  0040F77F: push    eax
  0040F780: call    ___add_12
  0040F785: lea     eax, [ebp+var_10]
  0040F788: push    eax
  0040F789: call    ___shl_12
  0040F78E: mov     al, byte ptr [ebp+var_6+1]
  0040F791: mov     ecx, [ebp+var_30]
  0040F794: add     al, 30h ; '0'
  0040F796: add     esp, 14h
  0040F799: inc     [ebp+var_30]
  0040F79C: dec     [ebp+arg_8]
  0040F79F: mov     [ecx], al
  0040F7A1: mov     byte ptr [ebp+var_6+1], 0
  0040F7A5: jnz     short loc_40F75D
  0040F7A7: mov     eax, [ebp+var_30]
  0040F7AA: dec     eax
  0040F7AB: mov     cl, [eax]
  0040F7AD: dec     eax
  0040F7AE: cmp     cl, 35h ; '5'
  0040F7B1: lea     ecx, [ebx+4]
  0040F7B4: jl      short loc_40F7F4
  0040F7B6: jmp     short loc_40F7C1
  0040F7B8: cmp     byte ptr [eax], 39h ; '9'
  0040F7BB: jnz     short loc_40F7C5
  0040F7BD: mov     byte ptr [eax], 30h ; '0'
  0040F7C0: dec     eax
  0040F7C1: cmp     eax, ecx
  0040F7C3: jnb     short loc_40F7B8
  0040F7C5: cmp     eax, ecx
  0040F7C7: jnb     short loc_40F7CD
  0040F7C9: inc     eax
  0040F7CA: inc     word ptr [ebx]
  0040F7CD: inc     byte ptr [eax]
  0040F7CF: sub     al, bl
  0040F7D1: sub     al, 3
  0040F7D3: mov     [ebx+3], al
  0040F7D6: movsx   eax, al
  0040F7D9: mov     byte ptr [eax+ebx+4], 0
  0040F7DE: mov     eax, [ebp+var_2C]
  0040F7E1: mov     ecx, [ebp+StackCookie]; StackCookie
  0040F7E4: pop     edi
  0040F7E5: pop     esi
  0040F7E6: pop     ebx
  0040F7E7: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040F7EC: leave
  0040F7ED: retn
  0040F7EE: cmp     byte ptr [eax], 30h ; '0'
  0040F7F1: jnz     short loc_40F7F8
  0040F7F3: dec     eax
  0040F7F4: cmp     eax, ecx
  0040F7F6: jnb     short loc_40F7EE
  0040F7F8: cmp     eax, ecx
  0040F7FA: jnb     short loc_40F7CF
  0040F7FC: mov     byte ptr [ecx], 30h ; '0'
  0040F7FF: and     word ptr [ebx], 0
  0040F803: xor     eax, eax
  0040F805: mov     byte ptr [ebx+2], 20h ; ' '
  0040F809: mov     byte ptr [ebx+3], 1
  0040F80D: mov     byte ptr [ebx+5], 0
  0040F811: inc     eax
  0040F812: jmp     short loc_40F7E1

Function: __set_exp
  0040F814: push    ebp
  0040F815: mov     ebp, esp
  0040F817: push    ecx
  0040F818: push    ecx
  0040F819: mov     eax, [ebp+arg_8]
  0040F81C: fld     [ebp+arg_0]
  0040F81F: mov     ecx, dword ptr [ebp+arg_0+6]
  0040F822: fstp    [ebp+var_8]
  0040F825: add     eax, 3FEh
  0040F82A: shl     eax, 4
  0040F82D: and     ecx, 0FFFF800Fh
  0040F833: or      eax, ecx
  0040F835: mov     word ptr [ebp+var_8+6], ax
  0040F839: fld     [ebp+var_8]
  0040F83C: leave
  0040F83D: retn

Function: __decomp
  0040F83E: push    ebp
  0040F83F: mov     ebp, esp
  0040F841: push    ecx
  0040F842: push    ecx
  0040F843: fld     qword ptr ds:411120h
  0040F849: fld     [ebp+arg_0]
  0040F84C: fucompp
  0040F84E: fnstsw  ax
  0040F850: test    ah, 44h
  0040F853: jp      short loc_40F85E
  0040F855: fldz
  0040F857: xor     edx, edx
  0040F859: jmp     loc_40F8ED
  0040F85E: xor     ecx, ecx
  0040F860: test    word ptr [ebp+arg_0+6], 7FF0h
  0040F866: jnz     short loc_40F8CA
  0040F868: test    dword ptr [ebp+arg_0+4], 0FFFFFh
  0040F86F: jnz     short loc_40F876
  0040F871: cmp     dword ptr [ebp+arg_0], ecx
  0040F874: jz      short loc_40F8CA
  0040F876: fld     [ebp+arg_0]
  0040F879: mov     edx, 0FFFFFC03h
  0040F87E: fcomp   qword ptr ds:411120h
  0040F884: fnstsw  ax
  0040F886: test    ah, 5
  0040F889: jp      short loc_40F890
  0040F88B: xor     eax, eax
  0040F88D: inc     eax
  0040F88E: jmp     short loc_40F8A5
  0040F890: xor     eax, eax
  0040F892: jmp     short loc_40F8A5
  0040F894: shl     dword ptr [ebp+arg_0+4], 1
  0040F897: test    byte ptr [ebp+arg_0+3], 80h
  0040F89B: jz      short loc_40F8A1
  0040F89D: or      dword ptr [ebp+arg_0+4], 1
  0040F8A1: shl     dword ptr [ebp+arg_0], 1
  0040F8A4: dec     edx
  0040F8A5: test    byte ptr [ebp+arg_0+6], 10h
  0040F8A9: jz      short loc_40F894
  0040F8AB: and     byte ptr [ebp+arg_0+6], 0EFh
  0040F8AF: cmp     eax, ecx
  0040F8B1: jz      short loc_40F8B7
  0040F8B3: or      byte ptr [ebp+arg_0+7], 80h
  0040F8B7: fld     [ebp+arg_0]
  0040F8BA: push    ecx; int
  0040F8BB: push    ecx
  0040F8BC: push    ecx
  0040F8BD: fstp    [esp+14h+var_14]; double
  0040F8C0: call    __set_exp
  0040F8C5: add     esp, 0Ch
  0040F8C8: jmp     short loc_40F8ED
  0040F8CA: fld     [ebp+arg_0]
  0040F8CD: push    ecx; int
  0040F8CE: push    ecx
  0040F8CF: push    ecx
  0040F8D0: fstp    [esp+14h+var_14]; double
  0040F8D3: call    __set_exp
  0040F8D8: mov     edx, dword ptr [ebp+arg_0+6]
  0040F8DB: shr     edx, 4
  0040F8DE: and     edx, 7FFh
  0040F8E4: add     esp, 0Ch
  0040F8E7: sub     edx, 3FEh
  0040F8ED: mov     eax, [ebp+arg_8]
  0040F8F0: fstp    [ebp+var_8]
  0040F8F3: fld     [ebp+var_8]
  0040F8F6: mov     [eax], edx
  0040F8F8: leave
  0040F8F9: retn

Function: ___ansicp
  0040F8FA: push    ebp
  0040F8FB: mov     ebp, esp
  0040F8FD: sub     esp, 0Ch
  0040F900: mov     eax, ds:413390h
  0040F905: push    6; cchData
  0040F907: mov     [ebp+StackCookie], eax
  0040F90A: lea     eax, [ebp+LCData]
  0040F90D: push    eax; lpLCData
  0040F90E: push    1004h; LCType
  0040F913: push    [ebp+Locale]; Locale
  0040F916: mov     [ebp+var_6], 0
  0040F91A: call    dword ptr ds:41100Ch
  0040F920: test    eax, eax
  0040F922: jnz     short loc_40F929
  0040F924: or      eax, 0FFFFFFFFh
  0040F927: jmp     short loc_40F933
  0040F929: lea     eax, [ebp+LCData]
  0040F92C: push    eax; String
  0040F92D: call    _atol
  0040F932: pop     ecx
  0040F933: mov     ecx, [ebp+StackCookie]; StackCookie
  0040F936: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040F93B: leave
  0040F93C: retn

Function: ___convertcp
  0040F93D: push    38h
  0040F93F: push    4127F8h
  0040F944: call    __SEH_prolog
  0040F949: mov     eax, ds:413390h
  0040F94E: mov     [ebp+StackCookie], eax
  0040F951: xor     edi, edi
  0040F953: mov     [ebp+Block], edi
  0040F956: mov     [ebp+var_44], edi
  0040F959: mov     eax, [ebp+arg_C]
  0040F95C: mov     ebx, [eax]
  0040F95E: mov     [ebp+cbMultiByte], ebx
  0040F961: mov     [ebp+var_3C], edi
  0040F964: mov     eax, [ebp+CodePage]
  0040F967: cmp     eax, [ebp+arg_4]
  0040F96A: jz      loc_40FAE3
  0040F970: lea     ecx, [ebp+CPInfo]
  0040F973: push    ecx; lpCPInfo
  0040F974: push    eax; CodePage
  0040F975: mov     esi, ds:4110ACh
  0040F97B: call    esi ; GetCPInfo
  0040F97D: test    eax, eax
  0040F97F: jz      short loc_40F9A1
  0040F981: cmp     [ebp+CPInfo.MaxCharSize], 1
  0040F985: jnz     short loc_40F9A1
  0040F987: lea     eax, [ebp+CPInfo]
  0040F98A: push    eax; lpCPInfo
  0040F98B: push    [ebp+arg_4]; CodePage
  0040F98E: call    esi ; GetCPInfo
  0040F990: test    eax, eax
  0040F992: jz      short loc_40F9A1
  0040F994: cmp     [ebp+CPInfo.MaxCharSize], 1
  0040F998: jnz     short loc_40F9A1
  0040F99A: mov     [ebp+var_3C], 1
  0040F9A1: cmp     [ebp+var_3C], edi
  0040F9A4: jz      short loc_40F9C0
  0040F9A6: cmp     ebx, 0FFFFFFFFh
  0040F9A9: jz      short loc_40F9AF
  0040F9AB: mov     esi, ebx
  0040F9AD: jmp     short loc_40F9BB
  0040F9AF: push    [ebp+lpMultiByteStr]; Str
  0040F9B2: call    _strlen
  0040F9B7: pop     ecx
  0040F9B8: mov     esi, eax
  0040F9BA: inc     esi
  0040F9BB: mov     [ebp+var_38], esi
  0040F9BE: jmp     short loc_40F9C3
  0040F9C0: mov     esi, [ebp+var_38]
  0040F9C3: cmp     [ebp+var_3C], edi
  0040F9C6: jnz     short loc_40F9E2
  0040F9C8: push    edi; cchWideChar
  0040F9C9: push    edi; lpWideCharStr
  0040F9CA: push    ebx; cbMultiByte
  0040F9CB: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040F9CE: push    1; dwFlags
  0040F9D0: push    [ebp+CodePage]; CodePage
  0040F9D3: call    dword ptr ds:4110C8h
  0040F9D9: mov     esi, eax
  0040F9DB: mov     [ebp+var_38], esi
  0040F9DE: cmp     esi, edi
  0040F9E0: jz      short loc_40FA3A
  0040F9E2: mov     [ebp+ms_exc.registration.TryLevel], edi
  0040F9E5: lea     eax, [esi+esi]
  0040F9E8: add     eax, 3
  0040F9EB: and     eax, 0FFFFFFFCh
  0040F9EE: call    __alloca_probe
  0040F9F3: mov     [ebp+ms_exc.old_esp], esp
  0040F9F6: mov     ebx, esp
  0040F9F8: mov     [ebp+var_48], ebx
  0040F9FB: lea     eax, [esi+esi]
  0040F9FE: push    eax; Size
  0040F9FF: push    edi; Val
  0040FA00: push    ebx; void *
  0040FA01: call    _memset
  0040FA06: add     esp, 0Ch
  0040FA09: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040FA0D: jmp     short loc_40FA26
  0040FA0F: xor     eax, eax
  0040FA11: inc     eax
  0040FA12: retn
  0040FA13: mov     esp, [ebp+ms_exc.old_esp]
  0040FA16: call    __resetstkoflw
  0040FA1B: xor     edi, edi
  0040FA1D: xor     ebx, ebx
  0040FA1F: or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
  0040FA23: mov     esi, [ebp+var_38]
  0040FA26: cmp     ebx, edi
  0040FA28: jnz     short loc_40FA48
  0040FA2A: push    esi; Size
  0040FA2B: push    2; Count
  0040FA2D: call    _calloc
  0040FA32: pop     ecx
  0040FA33: pop     ecx
  0040FA34: mov     ebx, eax
  0040FA36: cmp     ebx, edi
  0040FA38: jnz     short loc_40FA41
  0040FA3A: xor     eax, eax
  0040FA3C: jmp     loc_40FAF5
  0040FA41: mov     [ebp+var_44], 1
  0040FA48: push    esi; cchWideChar
  0040FA49: push    ebx; lpWideCharStr
  0040FA4A: push    [ebp+cbMultiByte]; cbMultiByte
  0040FA4D: push    [ebp+lpMultiByteStr]; lpMultiByteStr
  0040FA50: push    1; dwFlags
  0040FA52: push    [ebp+CodePage]; CodePage
  0040FA55: call    dword ptr ds:4110C8h
  0040FA5B: test    eax, eax
  0040FA5D: jz      loc_40FAE6
  0040FA63: cmp     [ebp+arg_10], edi
  0040FA66: jz      short loc_40FA88
  0040FA68: push    edi; lpUsedDefaultChar
  0040FA69: push    edi; lpDefaultChar
  0040FA6A: push    [ebp+arg_14]; cbMultiByte
  0040FA6D: push    [ebp+arg_10]; lpMultiByteStr
  0040FA70: push    esi; cchWideChar
  0040FA71: push    ebx; lpWideCharStr
  0040FA72: push    edi; dwFlags
  0040FA73: push    [ebp+arg_4]; CodePage
  0040FA76: call    dword ptr ds:411098h
  0040FA7C: test    eax, eax
  0040FA7E: jz      short loc_40FAE6
  0040FA80: mov     eax, [ebp+arg_10]
  0040FA83: mov     [ebp+Block], eax
  0040FA86: jmp     short loc_40FAE6
  0040FA88: cmp     [ebp+var_3C], edi
  0040FA8B: jnz     short loc_40FAA3
  0040FA8D: push    edi; lpUsedDefaultChar
  0040FA8E: push    edi; lpDefaultChar
  0040FA8F: push    edi; cbMultiByte
  0040FA90: push    edi; lpMultiByteStr
  0040FA91: push    esi; cchWideChar
  0040FA92: push    ebx; lpWideCharStr
  0040FA93: push    edi; dwFlags
  0040FA94: push    [ebp+arg_4]; CodePage
  0040FA97: call    dword ptr ds:411098h
  0040FA9D: mov     esi, eax
  0040FA9F: cmp     esi, edi
  0040FAA1: jz      short loc_40FAE6
  0040FAA3: push    esi; Size
  0040FAA4: push    1; Count
  0040FAA6: call    _calloc
  0040FAAB: pop     ecx
  0040FAAC: pop     ecx
  0040FAAD: mov     [ebp+Block], eax
  0040FAB0: cmp     eax, edi
  0040FAB2: jz      short loc_40FAE6
  0040FAB4: push    edi; lpUsedDefaultChar
  0040FAB5: push    edi; lpDefaultChar
  0040FAB6: push    esi; cbMultiByte
  0040FAB7: push    eax; lpMultiByteStr
  0040FAB8: push    esi; cchWideChar
  0040FAB9: push    ebx; lpWideCharStr
  0040FABA: push    edi; dwFlags
  0040FABB: push    [ebp+arg_4]; CodePage
  0040FABE: call    dword ptr ds:411098h
  0040FAC4: cmp     eax, edi
  0040FAC6: jnz     short loc_40FAD6
  0040FAC8: push    [ebp+Block]; Block
  0040FACB: call    _free
  0040FAD0: pop     ecx
  0040FAD1: mov     [ebp+Block], edi
  0040FAD4: jmp     short loc_40FAE6
  0040FAD6: cmp     [ebp+cbMultiByte], 0FFFFFFFFh
  0040FADA: jz      short loc_40FAE6
  0040FADC: mov     ecx, [ebp+arg_C]
  0040FADF: mov     [ecx], eax
  0040FAE1: jmp     short loc_40FAE6
  0040FAE3: mov     ebx, [ebp+var_48]
  0040FAE6: cmp     [ebp+var_44], edi
  0040FAE9: jz      short loc_40FAF2
  0040FAEB: push    ebx; Block
  0040FAEC: call    _free
  0040FAF1: pop     ecx
  0040FAF2: mov     eax, [ebp+Block]
  0040FAF5: lea     esp, [ebp-54h]
  0040FAF8: mov     ecx, [ebp+StackCookie]; StackCookie
  0040FAFB: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040FB00: call    __SEH_epilog
  0040FB05: retn

Function: _calloc
  0040FB06: push    ebx
  0040FB07: push    esi
  0040FB08: mov     esi, [esp+8+Count]
  0040FB0C: imul    esi, [esp+8+Size]
  0040FB11: test    esi, esi
  0040FB13: push    edi
  0040FB14: mov     ebx, esi
  0040FB16: jnz     short loc_40FB19
  0040FB18: inc     esi
  0040FB19: xor     edi, edi
  0040FB1B: cmp     esi, 0FFFFFFE0h
  0040FB1E: ja      short loc_40FB59
  0040FB20: cmp     dword ptr ds:41E680h, 3
  0040FB27: jnz     short loc_40FB44
  0040FB29: add     esi, 0Fh
  0040FB2C: and     esi, 0FFFFFFF0h
  0040FB2F: cmp     ebx, ds:41E66Ch
  0040FB35: ja      short loc_40FB44
  0040FB37: push    ebx
  0040FB38: call    ___sbh_alloc_block
  0040FB3D: mov     edi, eax
  0040FB3F: test    edi, edi
  0040FB41: pop     ecx
  0040FB42: jnz     short loc_40FB6F
  0040FB44: push    esi; dwBytes
  0040FB45: push    8; dwFlags
  0040FB47: push    dword ptr ds:41E67Ch; hHeap
  0040FB4D: call    dword ptr ds:411050h
  0040FB53: mov     edi, eax
  0040FB55: test    edi, edi
  0040FB57: jnz     short loc_40FB7B
  0040FB59: cmp     dword ptr ds:41E254h, 0
  0040FB60: jz      short loc_40FB7B
  0040FB62: push    esi; Size
  0040FB63: call    __callnewh
  0040FB68: test    eax, eax
  0040FB6A: pop     ecx
  0040FB6B: jnz     short loc_40FB19
  0040FB6D: jmp     short loc_40FB7D
  0040FB6F: push    ebx; Size
  0040FB70: push    0; Val
  0040FB72: push    edi; void *
  0040FB73: call    _memset
  0040FB78: add     esp, 0Ch
  0040FB7B: mov     eax, edi
  0040FB7D: pop     edi
  0040FB7E: pop     esi
  0040FB7F: pop     ebx
  0040FB80: retn

Function: __resetstkoflw
  0040FB81: push    ebp
  0040FB82: mov     ebp, esp
  0040FB84: sub     esp, 4Ch
  0040FB87: push    ebx
  0040FB88: push    esi
  0040FB89: push    edi
  0040FB8A: push    4
  0040FB8C: pop     eax
  0040FB8D: call    __alloca_probe
  0040FB92: mov     esi, esp
  0040FB94: push    1Ch; dwLength
  0040FB96: lea     eax, [ebp+Buffer]
  0040FB99: push    eax; lpBuffer
  0040FB9A: push    esi; lpAddress
  0040FB9B: call    dword ptr ds:411068h
  0040FBA1: test    eax, eax
  0040FBA3: jz      short loc_40FC1C
  0040FBA5: mov     ebx, [ebp+Buffer.AllocationBase]
  0040FBA8: lea     eax, [ebp+SystemInfo]
  0040FBAB: push    eax; lpSystemInfo
  0040FBAC: call    dword ptr ds:411030h
  0040FBB2: mov     ecx, [ebp+SystemInfo.dwPageSize]
  0040FBB5: mov     eax, ds:41E0A4h
  0040FBBA: lea     edi, [ecx-1]
  0040FBBD: not     edi
  0040FBBF: and     edi, esi
  0040FBC1: sub     edi, ecx
  0040FBC3: mov     esi, eax
  0040FBC5: dec     esi
  0040FBC6: neg     esi
  0040FBC8: sbb     esi, esi
  0040FBCA: and     esi, 0FFFFFFF1h
  0040FBCD: add     esi, 11h
  0040FBD0: imul    esi, ecx
  0040FBD3: add     esi, ebx
  0040FBD5: cmp     edi, esi
  0040FBD7: mov     [ebp+dwSize], ecx
  0040FBDA: jb      short loc_40FC1C
  0040FBDC: cmp     eax, 1
  0040FBDF: jz      short loc_40FC3D
  0040FBE1: mov     [ebp+lpAddress], ebx
  0040FBE4: mov     ebx, 1000h
  0040FBE9: push    1Ch; dwLength
  0040FBEB: lea     eax, [ebp+Buffer]
  0040FBEE: push    eax; lpBuffer
  0040FBEF: push    [ebp+lpAddress]; lpAddress
  0040FBF2: call    dword ptr ds:411068h
  0040FBF8: test    eax, eax
  0040FBFA: jz      short loc_40FC1C
  0040FBFC: mov     eax, [ebp+Buffer.RegionSize]
  0040FBFF: add     [ebp+lpAddress], eax
  0040FC02: test    [ebp+Buffer.State], ebx
  0040FC05: jz      short loc_40FBE9
  0040FC07: test    byte ptr [ebp+Buffer.Protect+1], 1
  0040FC0B: mov     eax, [ebp+Buffer.BaseAddress]
  0040FC0E: mov     [ebp+lpAddress], eax
  0040FC11: jz      short loc_40FC18
  0040FC13: xor     eax, eax
  0040FC15: inc     eax
  0040FC16: jmp     short loc_40FC5C
  0040FC18: cmp     edi, eax
  0040FC1A: jnb     short loc_40FC20
  0040FC1C: xor     eax, eax
  0040FC1E: jmp     short loc_40FC5C
  0040FC20: cmp     eax, esi
  0040FC22: jnb     short loc_40FC27
  0040FC24: mov     [ebp+lpAddress], esi
  0040FC27: push    4; flProtect
  0040FC29: push    ebx; flAllocationType
  0040FC2A: push    [ebp+dwSize]; dwSize
  0040FC2D: push    [ebp+lpAddress]; lpAddress
  0040FC30: call    dword ptr ds:411078h
  0040FC36: mov     eax, ds:41E0A4h
  0040FC3B: jmp     short loc_40FC40
  0040FC3D: mov     [ebp+lpAddress], edi
  0040FC40: dec     eax
  0040FC41: neg     eax
  0040FC43: sbb     eax, eax
  0040FC45: and     eax, 103h
  0040FC4A: lea     ecx, [ebp+flOldProtect]
  0040FC4D: push    ecx; lpflOldProtect
  0040FC4E: inc     eax
  0040FC4F: push    eax; flNewProtect
  0040FC50: push    [ebp+dwSize]; dwSize
  0040FC53: push    [ebp+lpAddress]; lpAddress
  0040FC56: call    dword ptr ds:4110D8h
  0040FC5C: lea     esp, [ebp-58h]
  0040FC5F: pop     edi
  0040FC60: pop     esi
  0040FC61: pop     ebx
  0040FC62: leave
  0040FC63: retn

Function: ___ld12mul
  0040FC64: push    ebp
  0040FC65: mov     ebp, esp
  0040FC67: sub     esp, 28h
  0040FC6A: mov     eax, ds:413390h
  0040FC6F: push    ebx
  0040FC70: mov     ebx, [ebp+arg_4]
  0040FC73: mov     [ebp+StackCookie], eax
  0040FC76: xor     eax, eax
  0040FC78: xor     ecx, ecx
  0040FC7A: mov     cx, [ebx+0Ah]
  0040FC7E: push    esi
  0040FC7F: mov     esi, [ebp+arg_0]
  0040FC82: mov     [ebp+var_1C], eax
  0040FC85: mov     [ebp+var_10], eax
  0040FC88: mov     [ebp+var_C], eax
  0040FC8B: mov     [ebp+var_8], eax
  0040FC8E: mov     ax, [esi+0Ah]
  0040FC92: push    edi
  0040FC93: mov     edi, ecx
  0040FC95: mov     edx, 7FFFh
  0040FC9A: and     ecx, edx
  0040FC9C: xor     edi, eax
  0040FC9E: and     eax, edx
  0040FCA0: and     edi, 8000h
  0040FCA6: cmp     ax, 7FFFh
  0040FCAA: lea     edx, [ecx+eax]
  0040FCAD: mov     [ebp+arg_0], edx
  0040FCB0: jnb     loc_40FE6E
  0040FCB6: cmp     cx, 7FFFh
  0040FCBB: jnb     loc_40FE6E
  0040FCC1: cmp     dx, 0BFFDh
  0040FCC6: ja      loc_40FE6E
  0040FCCC: cmp     dx, 3FBFh
  0040FCD1: ja      short loc_40FCD7
  0040FCD3: xor     eax, eax
  0040FCD5: jmp     short loc_40FD11
  0040FCD7: test    ax, ax
  0040FCDA: mov     edx, 7FFFFFFFh
  0040FCDF: jnz     short loc_40FCF9
  0040FCE1: inc     [ebp+arg_0]
  0040FCE4: xor     eax, eax
  0040FCE6: test    [esi+8], edx
  0040FCE9: jnz     short loc_40FCFB
  0040FCEB: cmp     [esi+4], eax
  0040FCEE: jnz     short loc_40FCFB
  0040FCF0: cmp     [esi], eax
  0040FCF2: jnz     short loc_40FCFB
  0040FCF4: jmp     loc_40FE68
  0040FCF9: xor     eax, eax
  0040FCFB: cmp     cx, ax
  0040FCFE: jnz     short loc_40FD1E
  0040FD00: inc     [ebp+arg_0]
  0040FD03: test    [ebx+8], edx
  0040FD06: jnz     short loc_40FD1E
  0040FD08: cmp     [ebx+4], eax
  0040FD0B: jnz     short loc_40FD1E
  0040FD0D: cmp     [ebx], eax
  0040FD0F: jnz     short loc_40FD1E
  0040FD11: mov     [esi+8], eax
  0040FD14: mov     [esi+4], eax
  0040FD17: mov     [esi], eax
  0040FD19: jmp     loc_40FE89
  0040FD1E: mov     [ebp+var_18], eax
  0040FD21: lea     eax, [ebp+var_C]
  0040FD24: mov     [ebp+var_14], eax
  0040FD27: mov     [ebp+arg_4], 5
  0040FD2E: mov     eax, [ebp+var_18]
  0040FD31: add     eax, eax
  0040FD33: cmp     [ebp+arg_4], 0
  0040FD37: jle     short loc_40FD82
  0040FD39: add     eax, esi
  0040FD3B: mov     [ebp+var_24], eax
  0040FD3E: mov     eax, [ebp+arg_4]
  0040FD41: lea     ecx, [ebx+8]
  0040FD44: mov     [ebp+var_20], ecx
  0040FD47: mov     [ebp+var_28], eax
  0040FD4A: mov     eax, [ebp+var_20]
  0040FD4D: mov     ecx, [ebp+var_24]
  0040FD50: movzx   ecx, word ptr [ecx]
  0040FD53: movzx   eax, word ptr [eax]
  0040FD56: imul    eax, ecx
  0040FD59: mov     ecx, [ebp+var_14]
  0040FD5C: add     ecx, 0FFFFFFFCh
  0040FD5F: push    ecx
  0040FD60: push    eax
  0040FD61: push    dword ptr [ecx]
  0040FD63: call    ___addl
  0040FD68: add     esp, 0Ch
  0040FD6B: test    eax, eax
  0040FD6D: jz      short loc_40FD75
  0040FD6F: mov     eax, [ebp+var_14]
  0040FD72: inc     word ptr [eax]
  0040FD75: add     [ebp+var_24], 2
  0040FD79: sub     [ebp+var_20], 2
  0040FD7D: dec     [ebp+var_28]
  0040FD80: jnz     short loc_40FD4A
  0040FD82: add     [ebp+var_14], 2
  0040FD86: inc     [ebp+var_18]
  0040FD89: dec     [ebp+arg_4]
  0040FD8C: cmp     [ebp+arg_4], 0
  0040FD90: jg      short loc_40FD2E
  0040FD92: add     [ebp+arg_0], 0C002h
  0040FD99: cmp     word ptr [ebp+arg_0], 0
  0040FD9E: jle     short loc_40FDC5
  0040FDA0: test    byte ptr [ebp+var_8+3], 80h
  0040FDA4: jnz     short loc_40FDBE
  0040FDA6: lea     eax, [ebp+var_10]
  0040FDA9: push    eax
  0040FDAA: call    ___shl_12
  0040FDAF: add     [ebp+arg_0], 0FFFFh
  0040FDB6: cmp     word ptr [ebp+arg_0], 0
  0040FDBB: pop     ecx
  0040FDBC: jg      short loc_40FDA0
  0040FDBE: cmp     word ptr [ebp+arg_0], 0
  0040FDC3: jg      short loc_40FDFE
  0040FDC5: add     [ebp+arg_0], 0FFFFh
  0040FDCC: cmp     word ptr [ebp+arg_0], 0
  0040FDD1: jge     short loc_40FDFE
  0040FDD3: mov     eax, [ebp+arg_0]
  0040FDD6: neg     eax
  0040FDD8: movzx   ebx, ax
  0040FDDB: add     [ebp+arg_0], ebx
  0040FDDE: test    byte ptr [ebp+var_10], 1
  0040FDE2: jz      short loc_40FDE7
  0040FDE4: inc     [ebp+var_1C]
  0040FDE7: lea     eax, [ebp+var_10]
  0040FDEA: push    eax
  0040FDEB: call    ___shr_12
  0040FDF0: dec     ebx
  0040FDF1: pop     ecx
  0040FDF2: jnz     short loc_40FDDE
  0040FDF4: cmp     [ebp+var_1C], 0
  0040FDF8: jz      short loc_40FDFE
  0040FDFA: or      byte ptr [ebp+var_10], 1
  0040FDFE: cmp     word ptr [ebp+var_10], 8000h
  0040FE04: ja      short loc_40FE15
  0040FE06: mov     eax, [ebp+var_10]
  0040FE09: and     eax, 1FFFFh
  0040FE0E: cmp     eax, 18000h
  0040FE13: jnz     short loc_40FE4A
  0040FE15: cmp     [ebp+var_10+2], 0FFFFFFFFh
  0040FE19: jnz     short loc_40FE47
  0040FE1B: and     [ebp+var_10+2], 0
  0040FE1F: cmp     [ebp+var_C+2], 0FFFFFFFFh
  0040FE23: jnz     short loc_40FE42
  0040FE25: and     [ebp+var_C+2], 0
  0040FE29: cmp     word ptr [ebp+var_8+2], 0FFFFh
  0040FE2F: jnz     short loc_40FE3C
  0040FE31: inc     [ebp+arg_0]
  0040FE34: mov     word ptr [ebp+var_8+2], 8000h
  0040FE3A: jmp     short loc_40FE4A
  0040FE3C: inc     word ptr [ebp+var_8+2]
  0040FE40: jmp     short loc_40FE4A
  0040FE42: inc     [ebp+var_C+2]
  0040FE45: jmp     short loc_40FE4A
  0040FE47: inc     [ebp+var_10+2]
  0040FE4A: mov     eax, [ebp+arg_0]
  0040FE4D: cmp     ax, 7FFFh
  0040FE51: jnb     short loc_40FE6E
  0040FE53: mov     cx, word ptr [ebp+var_10+2]
  0040FE57: mov     [esi], cx
  0040FE5A: mov     ecx, [ebp+var_C]
  0040FE5D: mov     [esi+2], ecx
  0040FE60: mov     ecx, [ebp+var_8]
  0040FE63: mov     [esi+6], ecx
  0040FE66: or      eax, edi
  0040FE68: mov     [esi+0Ah], ax
  0040FE6C: jmp     short loc_40FE89
  0040FE6E: neg     di
  0040FE71: sbb     edi, edi
  0040FE73: and     dword ptr [esi+4], 0
  0040FE77: and     edi, 80000000h
  0040FE7D: add     edi, 7FFF8000h
  0040FE83: and     dword ptr [esi], 0
  0040FE86: mov     [esi+8], edi
  0040FE89: mov     ecx, [ebp+StackCookie]; StackCookie
  0040FE8C: pop     edi
  0040FE8D: pop     esi
  0040FE8E: pop     ebx
  0040FE8F: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040FE94: leave
  0040FE95: retn

Function: ___multtenpow12
  0040FE96: push    ebp
  0040FE97: mov     ebp, esp
  0040FE99: sub     esp, 10h
  0040FE9C: mov     eax, ds:413390h
  0040FEA1: push    ebx
  0040FEA2: mov     ebx, 413618h
  0040FEA7: xor     ecx, ecx
  0040FEA9: sub     ebx, 60h ; '`'
  0040FEAC: cmp     [ebp+arg_4], ecx
  0040FEAF: mov     [ebp+StackCookie], eax
  0040FEB2: jz      short loc_40FF11
  0040FEB4: jge     short loc_40FEC1
  0040FEB6: neg     [ebp+arg_4]
  0040FEB9: mov     ebx, 413778h
  0040FEBE: sub     ebx, 60h ; '`'
  0040FEC1: cmp     [ebp+arg_8], ecx
  0040FEC4: jnz     short loc_40FECC
  0040FEC6: mov     eax, [ebp+arg_0]
  0040FEC9: mov     [eax], cx
  0040FECC: cmp     [ebp+arg_4], ecx
  0040FECF: jz      short loc_40FF11
  0040FED1: push    esi
  0040FED2: push    edi
  0040FED3: mov     eax, [ebp+arg_4]
  0040FED6: sar     [ebp+arg_4], 3
  0040FEDA: and     eax, 7
  0040FEDD: add     ebx, 54h ; 'T'
  0040FEE0: cmp     eax, ecx
  0040FEE2: jz      short loc_40FF0A
  0040FEE4: lea     eax, [eax+eax*2]
  0040FEE7: lea     esi, [ebx+eax*4]
  0040FEEA: cmp     word ptr [esi], 8000h
  0040FEEF: jb      short loc_40FEFD
  0040FEF1: lea     edi, [ebp+var_10]
  0040FEF4: movsd
  0040FEF5: movsd
  0040FEF6: movsd
  0040FEF7: dec     [ebp+var_E]
  0040FEFA: lea     esi, [ebp+var_10]
  0040FEFD: push    esi
  0040FEFE: push    [ebp+arg_0]
  0040FF01: call    ___ld12mul
  0040FF06: pop     ecx
  0040FF07: pop     ecx
  0040FF08: xor     ecx, ecx
  0040FF0A: cmp     [ebp+arg_4], ecx
  0040FF0D: jnz     short loc_40FED3
  0040FF0F: pop     edi
  0040FF10: pop     esi
  0040FF11: mov     ecx, [ebp+StackCookie]; StackCookie
  0040FF14: pop     ebx
  0040FF15: call    @__security_check_cookie@4; __security_check_cookie(x)
  0040FF1A: leave
  0040FF1B: retn

Function: sub_40FF39
  0040FF39: push    esi
  0040FF3A: mov     esi, ecx
  0040FF3C: lea     ecx, [esi+18h]
  0040FF3F: call    sub_405110
  0040FF44: xor     eax, eax
  0040FF46: mov     [esi+30h], eax
  0040FF49: mov     [esi+34h], eax
  0040FF4C: mov     [esi+38h], eax
  0040FF4F: mov     eax, esi
  0040FF51: pop     esi
  0040FF52: retn

Function: sub_40FF69
  0040FF69: push    ebp
  0040FF6A: lea     ebp, [esp-78h]
  0040FF6E: sub     esp, 98h
  0040FF74: mov     eax, ds:413390h
  0040FF79: push    esi
  0040FF7A: mov     [ebp+78h+StackCookie], eax
  0040FF7D: mov     esi, ecx
  0040FF7F: call    sub_40FF39
  0040FF84: mov     eax, 400000h
  0040FF89: push    94h ; '”'; Size
  0040FF8E: mov     [esi+8], eax
  0040FF91: mov     [esi+4], eax
  0040FF94: lea     eax, [ebp+78h+VersionInformation]
  0040FF97: push    0; Val
  0040FF99: push    eax; void *
  0040FF9A: mov     dword ptr [esi], 3Ch ; '<'
  0040FFA0: mov     byte ptr [esi+0Ch], 0
  0040FFA4: call    _memset
  0040FFA9: add     esp, 0Ch
  0040FFAC: lea     eax, [ebp+78h+VersionInformation]
  0040FFAF: push    eax; lpVersionInformation
  0040FFB0: mov     [ebp+78h+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
  0040FFB7: call    dword ptr ds:411000h
  0040FFBD: cmp     [ebp+78h+VersionInformation.dwPlatformId], 2
  0040FFC1: jnz     short loc_40FFCB
  0040FFC3: cmp     [ebp+78h+VersionInformation.dwMajorVersion], 5
  0040FFC7: jb      short loc_40FFE3
  0040FFC9: jmp     short loc_40FFDF
  0040FFCB: cmp     [ebp+78h+VersionInformation.dwPlatformId], 1
  0040FFCF: jnz     short loc_40FFE3
  0040FFD1: cmp     [ebp+78h+VersionInformation.dwMajorVersion], 4
  0040FFD5: ja      short loc_40FFDF
  0040FFD7: jnz     short loc_40FFE3
  0040FFD9: cmp     [ebp+78h+VersionInformation.dwMinorVersion], 0
  0040FFDD: jbe     short loc_40FFE3
  0040FFDF: mov     byte ptr [esi+0Ch], 1
  0040FFE3: lea     ecx, [esi+18h]
  0040FFE6: mov     dword ptr [esi+10h], 710h
  0040FFED: mov     dword ptr [esi+14h], 412814h
  0040FFF4: call    sub_405130
  0040FFF9: test    eax, eax
  0040FFFB: jge     short loc_410004
  0040FFFD: mov     byte ptr ds:47F8C0h, 1
  00410004: mov     ecx, [ebp+78h+StackCookie]; StackCookie
  00410007: mov     eax, esi
  00410009: pop     esi
  0041000A: call    @__security_check_cookie@4; __security_check_cookie(x)
  0041000F: add     ebp, 78h ; 'x'
  00410012: leave
  00410013: retn

Function: RtlUnwind
  00410014: jmp     dword ptr ds:41103Ch

Function: sub_410040
  0040FF1C: push    esi
  0040FF1D: mov     esi, ecx
  0040FF1F: mov     eax, [esi]
  0040FF21: test    eax, eax
  0040FF23: jz      short loc_40FF2F
  0040FF25: push    eax; Block
  0040FF26: call    _free
  0040FF2B: and     dword ptr [esi], 0
  0040FF2E: pop     ecx
  0040FF2F: and     dword ptr [esi+4], 0
  0040FF33: and     dword ptr [esi+8], 0
  0040FF37: pop     esi
  0040FF38: retn
  0040FF53: push    esi
  0040FF54: mov     esi, ecx
  0040FF56: lea     eax, [esi+18h]
  0040FF59: push    eax; lpCriticalSection
  0040FF5A: call    dword ptr ds:411028h
  0040FF60: lea     ecx, [esi+30h]
  0040FF63: pop     esi
  0040FF64: jmp     loc_40FF1C
  00410040: mov     ecx, 41E2C8h
  00410045: jmp     loc_40FF53

