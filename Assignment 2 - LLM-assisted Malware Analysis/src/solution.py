import json_repair
import json
import re
from pathlib import Path
from helper import ask_agent, load_input_data

def get_static_context(sample_number: int) -> str:
    PATH        = Path(f"sample_{sample_number}/static_disassembly.txt")
    CTX_BEFORE  = 3   # N lines BEFORE the CALL
    CTX_AFTER   = 3   # M lines AFTER the Jcc

    pattern_call = re.compile(r"\bcall\b", re.IGNORECASE)
    pattern_cmp  = re.compile(r"\bcmp\b",  re.IGNORECASE)
    pattern_jcc  = re.compile(r"\bj(a|b|c|e|g|l|m|n|o|p|s|z)\w*\b", re.IGNORECASE)  # jz, jnz, jne, etc.

    with PATH.open("r", encoding="utf-8", errors="ignore") as f:
        lines = [l.strip() for l in f if l.strip()]  # drop blank lines

    matches = []
    for i in range(len(lines) - 2):
        if (pattern_call.search(lines[i])
            and pattern_cmp.search(lines[i + 1])
            and pattern_jcc.search(lines[i + 2])):

            start = max(0, i - CTX_BEFORE)             # N lines before CALL
            end   = min(len(lines), i + 3 + CTX_AFTER) # M lines after Jcc
            snippet = lines[start:end]
            matches.append((start + 1, snippet))       # store 1-based start

    data = {
        "matches": [
            {"snippet": snippet[1]}
            for snippet in matches
        ],
    }

    # save data as json 
    out_path = f"s{sample_number}_filtered.json"
    with open(out_path, "w", encoding="utf-8") as out:
        json.dump(data, out, ensure_ascii=False, indent=2)
    return data

def task_1_solution(sample_number: int) -> int:
    """Takes in the static and dynamic analysis data and returns the address
    of the first branch instruction responsible for terminating early and hiding
    the malware's malicious behaviors.
    """
    static_data, api_calls = load_input_data(sample_number)

    # look into static_data and look for the string "C:\\Diebold". Extract 20 lines before and after that string.
    # context = []
    # for i, line in enumerate(static_data.splitlines()):
    #     if "Diebold" in line:
    #         context = static_data.splitlines()[max(0, i-20):i+21]
    #         break

    context = get_static_context(sample_number)

    prompt = f"""You are a malware analyst. Identify the five most likely addresses of a conditional jump that the malware uses to avoid detection. For each address, provide an in-depth explanation of why it's suspicious that's void of speculation. Format your response as JSON, with data fields "Description1", "Description2", "Description3", "Description4", and "Description5". Here's the relevant section of the disassembly:\n{context}"""
    top5 = ask_agent(prompt)
    repaired_response = json_repair.loads(top5)
    with open(f"s{sample_number}_t1_top5_response.json", "w") as f:
        json.dump(repaired_response, f, indent=2)

    prompt = f"""You are a malware analyst trying to identify when malware jumps to avoid detection. Malware will often check environment variables/conditions to make sure it's in the right environment before executing malicious code. From the following five descriptions of suspicious branch instructions, identify the single most likely address of the evasive branch instruction. Provide your answer in JSON format with the field "Suspect Address". Here are the descriptions:\n{repaired_response}"""
    response = ask_agent(prompt)
    repaired_response = json_repair.loads(response)
    branch_address = int(repaired_response["Suspect Address"], 16)
    with open(f"s{sample_number}_t1_final_response.json", "w") as f:
        json.dump(repaired_response, f, indent=2)
    
    assert isinstance(branch_address, int), f"The answer must be an integer representing the address, the actual type is: {type(branch_address)}"
    return branch_address

def task_2_solution(sample_number: int) -> str:
    """Takes in the static and dynamic analysis data and returns the address
    of the first branch instruction responsible for terminating early and hiding
    the malware's malicious behaviors.
    """

    static_data, api_calls = load_input_data(sample_number)

    context = []
    for i, line in enumerate(static_data.splitlines()):
        if "Diebold" in line:
            context = static_data.splitlines()[max(0, i-20):i+21]
            break

    # address = task_1_solution(sample_number)
    address = 0x404a59
    prompt = f"""I'm analyzing malware code that uses conditional branching to avoid detection. Write a python script that modifies the sandbox environment so that the jump instruction at address {address} doesn't happen. Format as a JSON file, with the fields "Explanation" and "Code". Here's the relevant context from the static analysis data:\n{context}"""
    response = ask_agent(prompt)

    repaired_response = json_repair.loads(response)
    python_script = repaired_response['Code']
    print(python_script)
    assert isinstance(python_script, str), "The answer must be a python script."
    return python_script