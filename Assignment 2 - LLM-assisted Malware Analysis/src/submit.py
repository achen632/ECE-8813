# YOU DO NOT NEED TO MODIFY THIS FILE
import argparse
import time
import requests

import os
import sys
from pathlib import Path

# Ensure imports work no matter where this script is run from
parent_dir = Path(__file__).resolve().parent
sys.path.insert(0, str(parent_dir))

try:
    import solution
    import helper
except ImportError as e:
    print(f"Import error: {e}. Make sure solution.py and helper.py are in the same directory as this script.")
    sys.exit(1)


def run_task(task_number: int, sample_number: int, dry_run: bool = False):
    uuid = str(int(time.time()))
    helper.SUBMISSION_ID = uuid
    solution_code = open(os.path.join(parent_dir, "solution.py"), "r").read()

    if task_number == 1:
        try:
            print("Running your solution for Task 1...")
            answer = solution.task_1_solution(sample_number)
            print(f" * Got suspected location of evasive branch instruction: '{hex(answer)}'")
            assert isinstance(answer, int), "The answer for task 1 must be an integer."
        except Exception as e:
            print(f" ! Error occurred while submitting task 1: {e}")
            return False
    elif task_number == 2:
        try:
            print("Running your solution for Task 2...")
            answer = solution.task_2_solution(sample_number)
            print(f" * Got python script from your solution.")
            assert isinstance(answer, str), "The answer for task 2 must be a string."
        except Exception as e:
            print(f" ! Error occurred while submitting task 2: {e}")
            return False

    if dry_run:
        print(" * Dry run enabled, not submitting to server.")
        return True

    url = "https://riposte-stu-20.storm.gatech.edu/api/submit_solution"
    payload = {
        "submission_key": helper.generate_submission_key(),
        "submission_id": helper.SUBMISSION_ID,
        "task_number": task_number,
        "sample_number": sample_number,
        "solution_code": solution_code,
        "answer": answer,
    }

    try:
        print(" * Submitting your solution to our server...")
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f" * Error occurred while asking agent: {e}")
        return False

def main():
    # Student can choose to submit task 1 or task 2 for sample 1, 2, or 3
    parser = argparse.ArgumentParser(description="Submit solutions for automated malware analysis tasks.")
    parser.add_argument("username", type=str,  help="Your username for submission.")
    parser.add_argument("last4id", type=str, help="Last 4 digits of your student ID.")
    parser.add_argument("--task", type=int, choices=[1, 2], help="Task number to submit (1 or 2).")
    parser.add_argument("--sample", type=int, choices=[1, 2, 3], help="Sample number to use (1, 2, or 3).")
    parser.add_argument("--dry_run", action="store_true", help="Perform a dry run without submitting.")
    args = parser.parse_args()
    helper.USERNAME = args.username
    assert len(args.last4id) == 4, "Last 4 digits of student ID must be exactly 4 characters."
    helper.LAST_4_DIGITS = args.last4id
    if args.task == 1:
        response = run_task(1, args.sample, args.dry_run)
    elif args.task == 2:
        response = run_task(2, args.sample, args.dry_run)
    if args.dry_run:
        return

    if response:
        if args.task == 1:
            print(f"   * Submission complete. Check https://riposte-stu-20.storm.gatech.edu/my_malware_submissions for results.")
        elif args.task == 2:
            print("   * Submitted task 2 to the malware sandbox, which may take several minutes to process. Check https://riposte-stu-20.storm.gatech.edu/my_malware_submissions in about 5-10 minutes for results.")

    else:
        print(f" ! Submission failed. Check the error messages above.")

if __name__ == "__main__":
    main()

# YOU DO NOT NEED TO MODIFY THIS FILE